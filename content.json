{"meta":{"title":"DataLatte's IT Blog","subtitle":"DataLatte's IT Blog using Hexo","description":"DataLatte가 Data Science 공부를 하면서 정리해 놓는 블로그","author":"HeungBae Lee","url":"https://heung-bae-lee.github.io","root":"/"},"pages":[],"posts":[{"title":"NLP 전처리","slug":"NLP_02","date":"2020-01-19T06:29:26.000Z","updated":"2020-01-19T13:41:12.486Z","comments":true,"path":"2020/01/19/NLP_02/","link":"","permalink":"https://heung-bae-lee.github.io/2020/01/19/NLP_02/","excerpt":"","text":"Tokenizing 라이브러리영어 Tokenizing 라이브러리 1) NLTK 파이썬에서 영어 텍스트 전처리 작업을 하는데 많 쓰이는 라이브러리로, 이 라이브러리는 50여 개가 넘는 말뭉치 리소를 활용해 영어 텍스트를 분석할 수 있게 제공 한다. 직관적으로 함수를 쉽게 사용할 수 있게 구성돼 있어 빠르게 텍스트 전처리를 할 수 있다. 또한 단어 단위 토크나이징과 문장 단위 토크나이징을 하는 모듈이 따로 있으며 ‘a’, ‘the’ 같은 관사나 ‘is’와 같이 자주 의미는 별로 없지만 자주 등장하는 단어인 불용어들을 모아 불용어 사전을 구성하고 있어 따로 불용어를 정의할 필요없이 바로 사용가능하다. 2) Spacy NLTK와 같은 오픈소스 라이브러리이다. 주로 상업용 목적으로 만들어졌다는 점이 NLTK와 다르며, 영어를 포함한 8개 언어에 대한 자연어 전처리 모듈을 제공하고, 빠른 속도로 전처리할 수 있다. 원하는 언어에 대한 전처리를 한 번에 해결할 수 있다는 장점이 있으며, 특히 딥러닝 언어 모델의 개발도 지원하고 있어 매력적이다. NLTK와 다르게 단어 단위, 문장 단위 토크나이징을 한가지 모듈을 통해 처리한다. 이러한 영어 토크나이징 도구는 한국어에 적용할 수 없다!! 한글 토크나이징 라이브러리 자연어 처리에서 각 언어마다 모두 특징이 다르기 때문에 천편일률적으로 동일한 방법을 적용하기는 어렵다. 한국어 자연어 처리에 많이 사용되는 파이썬 라이브러리 KoNLPy를 소개하겠다. 1) KoNLPy(지도학습 기법으로 학습) 한글 자연어 처리를 쉽고 간결하게 처리할 수 있도록 만들어진 오픈소스 라이브러리이다. 또한 국내에 이미 만드어져 사용되고 있는 여러 형태소 분석기를 사용할 수 있게 허용한다. 형태소 분석으로 형태소 단위의 토크나이징을 가능하게 할뿐만 아니라 구문 분석을 가능하게 해서 언어 분석을 하는 데 유용한 도구다. 한글 텍스트의 경우에는 형태소 단위 토크나이징이 필요할 때가 있다. KoNLPy에서는 여러 형태소 분석기를 제공하며, 각 형태소 분석기별로 분석한 결과가 다르므로 자신의 분석 데이터에 맞는 형태소 분석기를 선택해서 사용할 것을 권한다. Mecab의 경우 원도우에서는 사용할 수 없으니 참고해서 사용하자. Hannanum (한나눔) Kkma (꼬꼬마) Komoran (코모란) Mecab (메케브) Okt(Twitter) macOS에서 설치123456789# JPype1은 파이썬에서 자바 클래스를 사용할 수 있도록 만들어주는 라이브러리이다.# 만약 window라면 https://www.lfd.uci.edu/~gohlke/pythonlibs/#jpype에서 맞는 사양을 설치# 64bit-python3.6 버전이라면 JPype1-0.63-cp36-cp36m-win_amd64.whl 을 설치하면된다.# pip install JPype1-0.63-cp36-cp36m-win_amd64.whl# MacOs에선conda install -c conda-forge jpype1pip install konlpy 형태소 분석기 사용법 각각의 형태소 분석기는 클래스생성만 다르고 나머지는 동일한 함수를 사용하므로 아래 예시에서는 형태소 분석기 중 제일 속도가 빠르다고 알려져 있는 Mecab을 사용할 것이다. pos를 통해 얻는 품사의 태깅의 의미를 알고 싶다면 클릭 tokenizer.morphs() 텍스트를 형태소 단위로 나눈다. 옵션으로는 norm과 stem이있다. 각각 True 혹은 False 값을 받으며, norm은 normalize의 약자로서 문장을 정규화하는 역힐을 하고, stem은 각 단어에서 어간을 추출하는 기능(예시: 해야지 -&gt; 하다)이다. 각각 True로 설정하면 각 기능이 적용 된다. 둘 다 default는 False이다. tokenizer.nouns() 텍스트에서 명사만 뽑아낸다. tokenizer.phrases() 텍스트에서 어절을 뽑아낸다. tokenizer.pos() 위의 세 함수는 추출기인 반면에, pos 함수는 태깅함수이다. 각 품사를 태깅하는 역할을 한다. norm, stem 옵션이 존재하며 join=True로 하게 되면 (형태소, 품사)의 형태에서 형태소/품사 형태로 붙여서 리스트화한다. 어떤 형태소 분석기를 사용할지는 자신이 가진 데이터로 실험 삼아 형태소 분석을 해보고 속도나 품질을 비교해서 고르는 것이 좋다. 자신의 분석에서 사전에 추가해야할 단어들이 있다면 사용자 사전에 추가해 주면 된다. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546from konlpy.tag import Mecabtokenizer = Mecab()# 형태소 단위로 나누기tokenizer.morphs(\"아버지가방에들어가신다.\")# 결과[\"아버지\", \"가\", \"방\", \"에\", \"들어가\", \"신다\"]# 품사 태그tokenizer.pos('아버지가방에들어가신다.')#결과[('아버지', 'NNG'), ('가', 'JKS'), ('방', 'NNG'), ('에', 'JKB'), ('들어가', 'VV'), ('신다', 'EP+EC')]``` - Mecab에 사용자 사전 추가하기 - Komoran은 추가할 내용의 txt를 만들어 객체 생성시 userdic 파라미터에 만든 path를 입력해 주면되고, Hannanum은 konlpy/java/data/kE/dic_user.txt에 존재하며 여기에 새로운 단어를 형식에 맞춰 추가해주면된다. Kkma는 ~/anaconda3/lib/python3.6/site-packages/konlpy/java/kkma-2.0.jar 압축파일 내의 .dic 형식의 파일들이 dictionary 파일이므로 압축을 푼뒤 해당 품사에 맞는 파일에 단어를 추가해주면된다. 그리고나서 다시 .jar로 압축을 해주고 원본은 만약을 위해 다른 곳에 보관하며 사용한다. - 형태소 분석기를 사용하다 보면 가장 신경 써야 하는 점이 `중요 token들을 어떻게 처리해야 할지다.` 예를들면 우리가 '천리마전자'라는 기업의 데이터 분석 팀에 속해 있고 천리마저나에 관한 Corpus를 분석하거나 이로부터 임베딩을 만들어야 한다고 가정해보자. 이 경우 '천리마전자'라는 token은 섬세하게 처리해야한다. 만약 '천리마전자 텔레비전 정말 좋네요'라는 가상의 리뷰를 분석한다면 천리마 전자 보다 천리마전자로 분석됐을 때 임베딩 품질이 더 좋을 것이다. 이럴 경우 `사용자 사전에 추가하여 하나의 토큰으로 분석될 수 있도록 강제해야한다.`- 2) `Khaiii` 사용법 (지도학습기법으로 학습) - [reference](http://tech.kakao.com/2018/12/13/khaiii) - Khaiii(Kakao Hangul Analyzer iii)는 kakao가 2018년 말 공개한 오픈소스 한국어 형태소 분석기다. 국립국어원이 구축한 세종 코퍼스를 이용해 CNN 모델을 적용해 학습했다. Khaiii의 아키텍처는 입력 문장을 문자 단위로 읽어 들인 뒤 convolution filter가 이 문자들을 슬라이딩해 가면서 정보를 추출한다. 출력 노드에서는 이렇게 모은 정보들을 종합해 형태소의 경계와 품사 태그를 예측한다. 카카오 측 설명에 따르면 모델을 `C++로 구현해 GPU 없이도 형태소 분석이 가능하며 실행 속도 역시 빠르다고 한다.```` bashfrom khaiii import KhaiiiApitokenizer = KhaiiiApi()data = tokenizer.analyze('아버지가방에들어가신다')tokens = []for word in data: token.extend([str(m).split(\"/\")[0] for m in word.morphs])# 결과['아버지', '가', '방에', '들', '어', '가', '시', 'ㄴ다']# 품사 정보 확인 taggingfor word in data: token.extend([str(m) for m in word.morphs])# 결과['아버지/NNG', '가/JKS', '방에/NNG', '들/VV', '어/EC', '가/VV', '시/EP', 'ㄴ다/EC'] 3) soynlp (비지도학습으로 학습) 형태소 분석, 품사 판별 등을 지원하는 파이썬 기반 한국어 자연어 처리 패키지다. 데이터 패턴을 스스로 학습하는 비지도 학습 접근법을 지향하기 때문에 하나의 문장 혹은 문서에서보다는 어느 정도 규모가 있으면서 동질적인 문서 집합(homogeneous documents)에서 잘 작동한다. soynlp 패키지에 포함된 형태소 분석기는 데이터의 통계량을 확인해 만든 단어 점수 표로 작동한다. 단어 점수는 크게 응집확률(Cohesion Probability) 과 브랜칭 엔트로피(Branching Entropy)를 활용한다. 구체적으로는 주어진 문자령이 유기적으로 연결돼 함께 자주 나타나고(응집 확률이 높을 때), 그 단어 앞뒤로 다양한 조사, 어미 혹은 다른 단어가 등장하는 경우(브랜칭 엔트로피가 높을 때) 해당 문자열을 형태소로 취급한다. 예를 들어, 주어진 Corpus에서 ‘꿀잼’이라는 단어가 연결돼 자주 나타났다면 ‘꿀잼’을 형태소라고 본다(응집 확률이 높음). 한편 ‘꿀잼’ 앞에 ‘영화’, ‘정말’, ‘너무’ 등 문자열이, 뒤에 ‘ㅋㅋ’, ‘ㅎㅎ’, ‘!!’ 등 패턴이 다양하게 나타났다면 이 역시 ‘꿀잼’을 형태소로 취급한다.(브랜칭 엔트로피가 높음) 1234567891011121314151617181920212223242526from soynlp.word import WordExtractorsentence = [데이터]word_extractor = WordExtractor(min_frequency=100, min_cohesion_forward=0.05, min_right_branching_entropy=0.0)word_extractor.train(sentence)# model 저장word_extractor.save(model_fname_and_path)# 위에서 저장한 모델 loadimport mathfrom soynlp.tokenizer import LTokenizermodel_fname = '위에서 저장했던 model path'word_extractor = WordExtractor(min_frequency=100, min_cohesion_forward=0.05, min_right_branching_entropy=0.0)word_extractor.load(model_fname)scores = word_extractor.word_scores()scores = &#123;key ; (scores[key].cohesion_forward * math.exp(scores[key].min_right_branching_entropy)) for key in scores.keys()&#125;tokenizer = LTokenizer(scores=scores)tokens = tokenizer.tokenize('애비는 종이었다.') 4) 구글 센텐스피스(sentencepiece) 구글에서 공개한 비지도 학습기반 형태소 분석 패키지이며, 1994년 제안된 바이트 페어 인코딩(BPE : Byte Pair Encoding)기법 등을 지원하며 pip 설치를 통해 파이썬 콘솔에서도 사용할 수 있다. BPE의 기본 원리 Corpus에서 가장 많이 등장한 문자열을 병합해 문자열을 압축하는 것 예시 aaabdaaabac 위의 문자열에서는 aa가 가장 많이 나타났다. 이를 Z로 치환하면 원래 문자열을 다음과 같이 압축할 수 있다. ZabdZabac 이번에는 ab가 가장 많이 나타났으므로 Y로 치환하겠다. ZYdZYac 자연어 처리에서 BPE가 처음 쓰인 것은 기계 번역 분야다. BPE를 활용해 토크나이즈하는 메커니즘의 핵심은 원하는 어휘 집합 크기가 될 때까지 반복적으로 고빈도 문자열들을 병합해 어휘 집합에 추가한다. 이것이 BPE학습이다. 학습이 끝난 이후의 예측과정은 문장 내 각 어절(띄어쓰기로 문장을 나눈 것)에 어휘 집합에 있는 subword가 포함돼 있을 경우 해당 subword를 어절에서 분리한다.(최장 일치 기준) 이후 어절의 나머지에서 어휘 집합에 있는 subword를 다시 찾고, 또 분리한다. 어절 끝까지 찾았는데 어휘 집합에 없으면 미등록 단어(Unknown word)로 취급한다. BERT 모델은 BPE로 학습한 어휘 집합을 쓴다. BPE는 문자열 기반의 비지도 학습 기법이기 때문에 데이터만 확보할 수 있다면 어떤 언어에든 적용이 가능하다. 물론 BERT 모델에 사용할 수 있는 어휘 집합으로 쓸 수 있게 하기 위해서는 언더바(_) 문자를 ‘##’로 바꾸고 [PAD], [UNK], [CLS], [MASK], [SEP] 등 스페셜 토큰을 추가한다. 구글이 공개한 BERT 모델 코드에서 BPE로 학습한 어휘 집합으로 토큰을 분리하는 클래스를 실행 1234567891011121314151617import sentencepiece as spmtrain =\"\"\"--input=input_file_path \\ --model_prefix=sentence \\ --vocab_size=32000 \\ --model_type=bpe --character_coverage=0.9995\"\"\"spm.SentencePieceTrainer.Train(train)from bert.tokenization import FullTokenizervocab_fname = \"vocabulary_file_path.vocab\"tokenizer = FullTokenizer(vocab_file=vocab_fname, do_lower_case=False)tokenizer.tokenize(\"집에좀 가자\")# 결과['집에', '##좀', '가자'] soynlp 형태소 분석이나 BPE 방식의 토크나이즈 기법은 띄어쓰기에 따라 분석 결과가 크게 달라지므로 이들 모델을 학습하기 전 띄어쓰기 교정을 먼저 적용하면 그 분석 품질이 개선될 수 있다.띄어쓰기 교정 soynlp에서는 띄어쓰기 교정 모듈도 제공한다. Corpus에서 띄어쓰기 패턴을 학습한 뒤 해당 패턴대로 교정을 수행한다. 예를 들어, 학습 데이터에서 ‘하자고’라는 문자 앞뒤로 다수의 공백이 발견됐다면 예측단계에서 ‘하자고’가 출현한다면 앞뒤를 띄어서 교정하는 방식이다. 123456789101112131415from soyspacing.countbase importCountSpace# corpus가 띄어쓰기가 이미 올바로 되어있어야 품질이 높아질 것이다.corpus_fname = 'corpus_path'model_fname = '저장할때 사용할 모델 path'model = CountSpace()model.train(corpus_fname)model.save(model_fname, json_format=False)model.load_model(model_fname, json_format=False)model.correct(\"어릴때보고 지금다시봐도 재밌어요\")# 결과[어릴때 보고 지금 다시봐도 재밌어요]","categories":[{"name":"NLP","slug":"NLP","permalink":"https://heung-bae-lee.github.io/categories/NLP/"}],"tags":[]},{"title":"임베딩이란?","slug":"NLP_01","date":"2020-01-16T08:29:53.000Z","updated":"2020-01-19T06:28:11.192Z","comments":true,"path":"2020/01/16/NLP_01/","link":"","permalink":"https://heung-bae-lee.github.io/2020/01/16/NLP_01/","excerpt":"","text":"임베딩(Embedding)이란? 자연어 처리(Natural Language Processing)분야에서 임베딩(Embedding)은 사람이 쓰는 자연어를 기계가 이해할 수 있는 숫자형태인 vector로 바꾼 결과 혹은 그 일련의 과정 전체를 의미한다. 가장 간단한 형태의 임베딩은 단어의 빈도를 그대로 벡터로 사용하는 것이다. 단어-문서 행렬(Term-Document Matrix)는 row는 단어 column은 문서에 대응한다. 구분 메밀꽃 필 무렵 운수 좋은 날 사랑 손님과 어머니 삼포 가는 길 기차 0 2 10 7 막걸리 0 1 0 0 선술집 0 1 0 0 위의 표에서 운수좋은 날이라는 문서의 임베딩은 [2, 1, 1]이다. 막걸리라는 단어의 임베딩은 [0, 1, 0, 0]이다. 또한 사랑 손님과 어머니, 삼포 가는 길이 사용하는 단어 목록이 상대적으로 많이 겹치고 있는 것을 알 수 있다. 위의 Matrix를 바탕으로 우리는 사랑 손님과 어머니는 삼포 가는 길과 기차라는 소재를 공유한다는 점에서 비슷한 작품일 것이라는 추정을 해볼 수 있다. 또 막걸리라는 단어와 선술집이라는 단어가 운수 좋은 날이라는 작품에만 등장하는 것을 알 수 있다. 막걸리-선술집 간 의미 차이가 막걸리 기차 보다 작을 것이라고 추정해 볼 수 있다. 임베딩의 역할 1) 단어/문장 간 관련도 계산 단어-문서 행렬은 가장 단순한 형태의 임베딩이다. 현업에서는 이보다 복잡한 형태의 임베딩을 사용한다. 대표적인 임베딩 기법은 Word2Vec을 뽑을 수 있을 것이다. 이렇듯 컴퓨터가 계산하기 쉽도록 단어를 전체 단어들간의 관계에 맞춰 해당 단어의 특성을 갖는 벡터로 바꾸면 단어들 사이의 유사도를 계산하는 일이 가능해진다. 자연어일 때 불가능했던 유사도를 계산할 수코사인 유사도 계산이 임베딩 덕분에 가능하다는 것이다. 또한 임베딩을 수행하면 벡터 공간을 기하학적으로 나타낸 시각화 역시 가능하다. 2) 의미적/문법적 정보 함축 임베딩은 벡터인 만큼 사칙 연산이 가능하다. 단어 벡터 간 덧셈/뺄셈을 통해 단어들 사이의 의미적, 문법적 관계를 도출해낼 수 있다. 예를들면, 아들 - 딸 + 소녀 = 소년이 성립하면 성공적인 임베딩이라고 볼 수 있다. 아들 - 딸 사이의 관계와 소년 - 소녀 사이의 의미 차이가 임베딩에 함축돼 있으면 품질이 좋은 임베딩이라 말할 수 있다는 이야기이다. 이렇게 단어 임베딩을 평가하는 방법을 단어 유추 평가(word analogy test)라고 부른다. 3) 전이학습(Transfer learning) 품질 좋은 임베딩은 모형의 성능과 모형의 수렴속도가 빨라지는데 이런 품질 좋은 임베딩을 다른 딥러닝 모델의 입력값으로 사용하는 것을 transfer learning이라 한다. 예를 들면, 대규모 Corpus를 활용해 임베딩을 미리 만들어 놓는다. 임베딩에는 의미적, 문법적 정보 등이 녹아 있다. 이 임베딩을 입력값으로 쓰는 전이 학습 모델은 문서 분류라는 업무를 빠르게 잘 할 수 있게 되는 것이다. 임베딩 기법의 역사와 종류 통계 기반 -&gt; 뉴럴 네트워크 기반 통계 기반 기법 잠재 의미 분석(Latent Semantic Analysis) : 단어 사용 빈도 등 Corpus의 통계량 정보가 들어 있는 행렬에 특이값 분해등 수학적 기법을 적용해 행렬에 속한 벡터들의 차원을 축소하는 방법이다. 차원을 축소하는 이유는 예를 들어 Term-Document matrix 같은 경우는 row가 더 큰 sparse matrix일 확률이 높기 때문에 쓸데 없이 계산량과 메모리자원을 낭비하는 것을 예방하기 위해서이다. 여기서 차원 축소를 통해 얻은 행렬을 기존의 행렬과 비교했을 때 단어를 기준으로 했다면 단어 수준 임베딩, 문서를 기준으로 했다면 문서 임베딩이된다. 잠재 의미 분석 수행 대상 행렬은 여러 종류가 될 수 있으며, Term-Document Matrix, TF-IDF Matrix, Word-Context Matrix, PMI Matrix등이 있다. Neural Network 기반 기법 Neural Probabilistic Language Model이 발표된 이후 부터 Neural Network기반의 임베딩 기법들이 주목 받고 있다. Neural Network는 구조가 유연하고 표현력이 풍부하기 때문에 자연어의 무한한 문맥을 상당 부분 학습할 수 있다. 단어 수준 -&gt; 문장 수준 단어 수준 임베딩 기법 : 각각의 벡터에 해당 단어의 문맥적 의미를 함축하지만, 단어의 형태가 동일하다면 동일단어로 인식하고, 모든 문맥 정보를 해당 단어 벡터 투영하므로 동음이의어를 분간하기 어렵다는 단점이 있다. ex) NPLM, Word2Vec, GloVe, FastText, Swivel 등 문장 수준 임베딩 기법 : 2018년 초에 ELMo(Embedding from Language Models)가 발표된 이후 주목 받기 시작했다. 개별 단어가 아닌 단어 Sequence 전체의 문맥적 의미를 함축 하기 때문에 단어 임베딩 기법보다 Transfer learning 효과가 좋은 것으로 알려져 있다. 또한, 단어 수준 임베딩의 단점인 동음이의어도 문장수준 임베딩 기법을 사용하면 분리해서 이해할 수 있다. ex) BERT(Bidirectional Encoder Representations from Transformer), GPT(Generation Pre-Training) 등 Rule based -&gt; End to End -&gt; Pre-training/fine tuning 1990년대에는 자연어 처리 모델 대부분은 우리가 딥러닝과 달리 머신러닝처럼 사람이 Feature를 직접 뽑았다. 그렇기에 Feature를 추출할 때 언어학적인 지식을 활용해야 했다. 허나. 2000년대 중반 이후 NLP 분야에서도 딥러닝 모델이 주목받기 시작하여 Feature를 직접 뽑지 않아도 되었다. 데이터를 넣어주면 사람의 개입없이 모델 스스로 처음부터 끝까지 이해하는 End-to-End Model 기법을 사용하였다. 대표적으로는 기계번역에 널리 사용됐던 Sequence-to-Sequence 모델이 있다. 2018년 ELMo 모델이 제안된 이후 NLP 모델은 pre-training과 fine tuning 방식으로 발전하고 있다. 우선 대규모 Corpus로 임베딩을 만든다.(Pre-train) 이 임베딩에는 Corpus의 의미적, 문법적 맥락이 포함돼 있다. 이후 임베딩을 입력으로 하는 새로운 딥러닝 모델을 만드로 우리가 풀고 싶은 구체적 문제에 맞는 소규모 데이터에 맞게 임베딩을 포함한 모델 전체를 업데이트한다.(fine tuning) ELMo, GPT, BERT등이 이 방식에 해당된다. 우리가 풀고 싶은 자연어 처리의 구체적 문제들(예시 : 품사 판별(Part-Of-Speech tagging), 개체명 인식(Named Entity Recognition), 의미역 분석(Semantic Role Labeling))을 다운 스트림 태스크(DownStream task)라고 한다. 다운스트림에 앞서 해결해야 할 과제라는 뜻의 업스트림 테스크(UpStream task)는 단어/문장 임베딩을 Pre-train하는 작업이 해당된다. 임베딩의 종류와 성능1) 행렬 분해 Corpus 정보가 들어 있는 원래 행렬을 Decomposition을 통해 임베딩하는 기법이다. Decomposition 이후엔 둘 중 하나의 행렬만 사용하거나 둘을 sum하거나 concatenate하는 방식으로 임베딩을 한다. ex) GloVe, Swivel 등 2) 예측 기반 어떤 단어 주변에 특정 단어가 나타날지 예측하거나, 이전 단어들이 주어졌을 때 다음 단어가 무엇일지 예측하거나, 문장 내 일부 단어를 지우고 해당 단어가 무엇일지 맞추는 과정에서 학습하는 방법 Neural Network기반 방법들이 속한다. ex) Word2Vec, FastText, BERT, ELMo, GPT 등 3) 토픽 기반 주어진 문서에 잠재된 주제를 추론하는 방식으로 임베딩을 수행하는 기법이며, 대표적으로 잠재 디리클레 할당(LDA)가 있다. LDA 같은 모델은 학습이 완료되면 각 문서가 어떤 주제 분포를 갖는지 확률 벡터 형태로 반환하기 때문에 임베딩 기법의 일종으로 이해할 수 있다. NLP 용어 정리Corpus(말뭉치) 임베딩 학습이라는 특정한 목적을 가지고 수집한 표본이다. Collection(컬렉션) Corpus에 속한 각가의 집합을 칭한다. 예를 들어, 한국어 위키백과와 네이버 영화 리뷰를 말뭉치로 쓴다면 이들 각각이 컬렉션이 된다. Sentence(문장) 생각이나 감정을 말과 글로 표현할 때 완결된 내용을 나타내는 최소의 독립적인 형식 단위를 가리킨다. 실무에서는 주로 문장을 마침표(.)나 느낌표(!), 물음표(?)와 같은 기호로 구분된 문자열을 문장으로 취급한다. Document(문서) 생각이나 감정, 정보를 공유하는 문장 집합을 의미한다. 문서는 단락(Paragraph)의 집합으로 표현될 수 있다. 별도의 기준이 없다면 줄바꿈(\\n) 문자로 구분된 문자열을 문서로 취급한다. Token(토큰) 문장은 여러개의 토큰으로 구성된다. 토큰은 단어(Word), 형태소(Morpheme), 서브워드(subword)라고도 한다. 문장을 토큰 시퀀스로 분석하는 과정을 토크나이즈(tokenize)라고 한다. Vocabulary(어휘집합) Corpus에 있는 모든 Document를 Sentence로 나누고 여기에 Tokenize를 실행한 후 중복을 제거한 Token들의 집합이다. Vocabulary에 없는 token은 미등록 단어(Unknown word)라고 한다. 벡터가 어떻게 의미를 가지게 되는가 자연어의 의미를 임베딩에 녹여내는 방법은 자연어의 통계적 패턴 정보를 통째로 임베딩에 넣는 것이다. 자연어의 의미(문법적 의미, 단어의 의미등)는 그 언어를 사용하는 사람들의 일상 언어에 정보가 들어있기 때문이다. 임베딩을 만들 때 사용하는 통계 정보는 크게 3가지가 있다. 1) 문장에 어떤 단어가 많이 쓰였는지 -&gt; bag of words(백오브워즈) 가정 2) 단어가 어떤 순서로 등장하는지 -&gt; Language model(언어 모델) 가정 3) 문장에 어떤 단어가 같이 나타났는지 -&gt; distribution hypothesis(분포가정) 1) BOW(Bag-Of-Words) 가정 문서의 저자가 생각한 주제가 문서에서의 단어 사용에 녹아있다는 생각으로부터 단어의 순서 정보는 무시하고 어떤 단어가 많이 쓰였는지 정보를 중시한다. 경우에 따라서는 빈도 역시 단순화해 등장 여부(등장 시 1, 아니면 0)만을 사용하기도 한다. 간단한 아이디어지만 정보 검색(information Retrieval)분야에서 여전히 많이 쓰이고 있다. 사용자 질의에 가장 적절한 문서를 보여줄 때 질의를 BOW 임베딩으로 변환하고 질의와 검색 대상 문서 임베딩 간 코사인 유사도를 구해 가장 높은 문서를 사용자에게 노출 한다. 대표 통계량 : TF-IDF개념을 모른다면 클릭 대표 모델 : Deep Averaging Network 단어의 순서를 고려하지 않고 단어의 임베딩을 평균을 취해 만든다. 간단한 구조임에도 성능이 좋아서 현업에서도 자주 쓰인다. 2) Language model 가정- `시퀀스에 확률을 부여하여 단어 시퀀스를 명시적(순서를 고려)으로 학습하는 모델` 2-1) 통계 기반 언어 모델 단어가 n개 주어진 상황이라면 Language model은 n개 단어가 동시에 나타날 확률을 반환한다. 통계 기반의 언어 모델은 말뭉치에서 해당 단어 시퀀스가 얼마나 자주 등장하는지 빈도를 세어 학습한다. 잘 학습된 언어 모델이 있다면 주어진 단어 시퀀스 다음 단어로 확률이 높은 자연스러운 단어를 선택할 것이다. 구체적인 방법은 한 상태의 확률은 그 직전 상태에만 의존한다는 Markov assumption에 기반하여 n-gram을 통해 확률을 계산할 수 있다. 허나 데이터에 한 번도 등장하지 않는 n-gram이 존재할 때 예측 단계에서는 확률값을 0으로 취하는 문제가 있다. P(w_{n}|w_{n-1} = \\frac{w_{n-1}}{w_{n}}) 위의 문제점들을 해결하기 위해 Back-off, Smoothing 등의 방식이 제안됐다. 1) Back-off n-gram 등장 빈도가 0인 단어들이 있을 수 있으므로 n-gram 등장빈도를 n보다 작은 범위의 단어 시퀀스 빈도로 근사하는 방식이다. n을 크게 하면 할수록 등장하지 않는 케이스가 많아질 가능성이 높기 때문이다. $\\alpha, \\beta$는 실제 빈도와의 차이를 보정해주는 parameter이다. Freq(내 마음 속에 영원히 기억될 최고의 명작이다) \\approx \\alpha Freq(영원히 기억될 최고의 명작이다) + \\beta 2) (Add-k) Smoothing 등장 빈도 표에 모두 k 만큼 더하는 기법이다. 만약 k=1로 설정한다면 특별히 라플라스 스무딩(laplace smoothing)이라고 한다. 스무딩을 시행하면 높은 빈도를 가진 문자열 등장 확률을 일부 깎고 전혀 등장하지 않는 케이스들에는 약간의 확률을 부여하게 된다. 2-2) 뉴럴 네트워크 기반 언어 모델 Neural Network는 입력과 출력 사이의 관계를 유연하게 포착해낼 수 있고, 그 자체로 확률 모델로 기능할 수 있다. 주어진 단어 시퀀스를 가지고 다음 단어를 예측하는 과정에서 학습된다. 학습이 완료되면 이들 모델의 중간 혹은 말단 계산 결과물을 단어나 문자의 임베딩으로 활용한다. Language model 기반 기법은 순차적으로 입력받아 다음 단어를 맞춰야 하기 때문에 일방향(uni-directional)이지만 Masked language model은 문장 전체를 다 보고 중간에 있는 단어를 예측하기 때문에 양방향(bi-directional)학습이 가능하다. 그로인해 Masked Language model 기반의 방법들(예:BERT)은 기존 Language model 기법들 대비 임베딩 품질이 좋다. 대표 모델 : ELMo, GPT 등 3) Distribution hypothesis 자연어 처리에서 분포란 특정 범위, 즉 Window(해당 단어를 중심으로 범위에 포함시킬 앞뒤 단어 수, 예를 들어 윈도우가 2라면 타깃 단어 앞뒤로 2개의 문맥단어의 빈도를 계산) 내에 동시에 등장하는 이웃 단어 또는 문맥(context)의 집합을 가리킨다. 어떤 단어 쌍이 비슷한 문맥 환경에서 자주 등장한다면 그 의미 또한 유사할 것이라는 것이 Distribution hypothesis의 전제이다. 형태소의 경계를 정하거나 품사를 나누는 것과 같은 다양한 언어학적 문제는 말뭉치의 분포 정보와 깊은 관계를 갖고 있다. 이 덕분에 임베딩에 분포 정보를 함축하게 되면 해당 벡터에 해당 단어의 의미를 내제시킬 수 있는 것이다. 대표 통계량 : PMI(Pointwise Mutual Information : 점별 상호 정보량) 두 단어의 등장이 독립일 때 대비해 얼마나 자주 같이 등장하는지를 수치화한 것 PMI(A, B) = log\\frac{P(A,B)}{P(A)P(B)} Term-context matrix는 특정 단어 기준으로 Window에 존재하는 단어들을 count하는 방식으로 만들어지는데, 여기에서 PMI 수식을 적용시키면된다. 이렇게 구축한 PMI 행렬의 행 벡터 자체를 해당 단어의 임베딩으로 사용할 수도 있다. 대표 모델 : Word2Vec CBOW 모델 문맥 단어들을 가지고 타깃 단어 하나를 맞추는 과정에서 학습된다. 1) 각 주변 단어들을 one-hot 벡터로 만들어 입력값으로 사용 (입력층 벡터) 2) 가중치 행렬을 각 one-hot 벡터에 곱해서 n-차원 벡터를 만든다. (N-차원 은닉층) 3) 만들어진 n-차원 벡터를 모두 더한 후 개수로 나눠 평균 n-차원 벡터를 만든다. (출력층 벡터) 4) n-차원 벡터에 다시 가중치 행렬을 곱해서 one-hot 벡터와 같은 차원의 벡터로 만든다. 5) 만들어진 벡터를 실제 예측하려고 하는 단어의 one-hot 벡터와 비교해서 학습한다. Skip-gram 모델 타깃 단어를 가지고 문맥 단어가 무엇일지 예측하는 과정에서 학습된다. 1) 하나의 단어를 one-hot 벡터로 만들어서 입력값으로 사용한다.(입력층 벡터) 2) 가중치 행렬을 one-hot 벡터에 곱해서 n-차원 벡터를 만든다.(N-차원 은닉층) 3) n-차원 벡터에 다시 가중치 행렬을 곱해서 one-hot 벡터와 같은 차원의 벡터로 만든다.(출력층 벡터) 4) 만들어진 벡터를 실제 예측하려는 주변 단어들 각각의 one-hot 벡터와 비교해서 학습한다. 두 모델의 확실한 차이점은 CBOW에서는 입력값으로 여러 개의 단어를 사용하고, 학습을 위해 하나의 단어와 비교하지만, Skip-gram에서는 입력값이 하나의 단어를 사용하고, 학습을 위해 주변의 여러 단어와 비교한다. 위의 학습 과정을 모두 끝낸 후 가중치 행렬의 각 행을 단어 벡터로 사용한다. 카운트 기반 방법(Bag of Words 가정 방법들)로 만든 단어 벡터보다 단어 간의 유사도를 잘 측정하며, 단어들의 복잡한 특징까지도 잘 잡아낸다는 장점이 있다. 보통 CBOW보다 Skip-gram의 성능이 더 좋아 자주 사용된다. 하지만 무조건적으로 좋은 것은 아니다!","categories":[{"name":"NLP","slug":"NLP","permalink":"https://heung-bae-lee.github.io/categories/NLP/"}],"tags":[]},{"title":"Regression(03) - 회귀진단","slug":"machine_learning_04","date":"2020-01-15T09:24:28.000Z","updated":"2020-01-16T08:10:22.954Z","comments":true,"path":"2020/01/15/machine_learning_04/","link":"","permalink":"https://heung-bae-lee.github.io/2020/01/15/machine_learning_04/","excerpt":"","text":"교호작용 성별, 결혼여부, 혹은 소속 정치단체 등과 같은 질적(qualitative) 또는 범주형(categorical)요인들이 회귀분석에서 종속(반응)변수의 변화를 설명하는 데 매우 유용한 독립(설명) 변수 역할을 할 때가 있다. 이런 질적 독립(설명)변수로 이용할 경우 이들은 지시변수(Indicator variable) 또는 가변수(dummy variable)의 형식으로 표현해야한다. 가변수는 다양한 용도를 가지고 있으며, 회귀관계에 영향을 주는 질적 요인을 고려할 때마다 항상 사용할 수 있다. -여러 범주를 표현하기 위하여 가변수를 사용할 경우 필요한 가변수의 개수는 일반적으로 가능한 범주의 수보다 하나 작게 잡으면 된다.왜냐하면, 가변수를 종합하면 교육수준에 관한 3개의 범주를 나타낼 수 있기 때문이다. 게다가, 범주를 모두 다 지시변수로 사용하면 범주화된 변수들끼리 완벽한 선형관계가 성립되어 극단적인 다중공선성을 보일수 있다. 선형대수 측면에서도 각 Column vector들끼리 서로 linearly independent 해야 해를 갖을 수 있으므로 위의 방법으로 만드는 것이 옳은 방법이다. 여기서 지시변수 또는 가변수에 의하여 표현되지 않는 범주는 기저범주(base category) 또는 대조 그룹(control group)이라고 불리는데, 지시변수의 회귀계수가 대조 그룹에 대한 상대적인 값으로 해석되기 때문이다. 아래 표에서 만일, 최종학력이 대학원인 사람과 대학교인 사람의 평균적인 차이가 궁금할 경우는 $B_{2}-B-{1}=2,000$로 구할 수 있다. 또한 아래 해석은 다른 변수들을 고정시켰을 경우에 해당한다. 수입 = ( \\beta_{0} + 대학교 + 대학원 ) 변수 선택법 회귀 분석의 진단 : 모형 위반의 검출 주어진 데이터에 모형을 적합함에 있어서, 한 개 또는 몇 개의 관측 개체들에 의하여 적합이 과도하게 결정되는 것으 바람직 하지 않다. 앞서 말한 가설검정등은 표준적인 회귀의 가정들이 만족될 때만 유의미하다. 이들 가정이 위반된다면, 이전에 언급된 표준적인 결과들은 유효하지 않으며 결과의 응용이 심각한 오류를 야기할 수도 있다. 모형위반을 검토하기 위해 엄격한 수치적 규칙들을 적용하는 것 대신에 주로 그래프적인 방법들을 소개할 것이다. 회귀분석의 표준적인 가정\u001d들 1) 선형성 가정 : 종속(반응)변수 Y와 독립(설명)변수 X들을 관계시키는 모형이 회귀계수 $\\beta$들에 대하여 선형임을 가정한다. 만약, 선형성 가정이 만족되지 않는다면 종종 데이터에 대한 변환을 통해 선형성을 달성할 수 있다. 단순회귀에서는 이 가정을 Y와 X의 산점도를 통해 쉽게 확인 할 수 있으나, 다중회귀에서는 고차원성 때문에 산점도를 통해 확인이 어렵다. Y = \\beta_{0} + \\beta_{1}X_{1} + \\cdots + \\beta_{p}X_{p} + \\epsilon 2) 잔차에 대한가정 : $\\epsilon_{i} \\sim^{i.i.d} N(0, \\sigma^{2})$ 이 가정을 통해 아래의 가정들을 만족해야한다. 1) 잔차의 정규성 : 잔차 $\\epsilon_{i}$는 정규분포를 따른다. 독립(설명)변수들의 값이 반복되어 있지 않다면 쉽게 위반되지 않는다. 2) 잔차의 등분산성 : 동일한 상수분산 $\\sigma^{2}$을 가져야 한다. 이 가정이 만족하지 않을 때 이분산성을 띈다는 문제가 있다고 한다. 3) 잔차의 독립성 : 잔차들이 서로 독립이므로 그들의 공분산은 모두 0이다. 이 가정이 만족되지 않으면 자기상관의 문제가 있다고 한다. 3) 독립(설명)변수들에 대한 가정(1,2는 실제로 평가 불가하므로 3이 중요!!) : 1) 독립(설명)변수들은 확률변수가 아니다. 만약 실험 설계에 의해서 얻어진 데이터 값들에 의한 것이 아닌 비실험 또는 관측의 상황에서는 이것이 만족되지 않을 거이라는 것은 명확하며, 이에 대한 해석도 수정되어야한다. 독립(설명)변수들이 확률변수이면 모든 추론은 관측된 데이터에 의존하여 조건부적이다. 2) 값 $x_{1j}, x_{2j}, \\cdots ,x_{nj}$는 오차 없이 측정된 것으로 가정된다. 허나 이 가정은 만족되기 쉽지 않다. 측정에서의 오차는 잔차의 분산, 다중상관계수, 회귀계수의 개별 추정치들에 영향을 줄 것이다. 추정된 회귀계수로부터 측정오차의 영향을 제거하는 것은 거의 기대하기 힘들다.그러므로 변수들이 오차를 가지고 있어서 회귀계수의 추정에 문제가 있더라도 회귀방정식이 예측을 위해 여전히 사용될 수 있다. 그러나 독립(설명)변수에 존재하는 오차는 예측의 정확도를 감소 시킬 것이다. 3) 독립(설명)변수는 선형종속이 아닌 것으로 가정된다. 즉, 위해서 언급했었던 linearly independent해야 한다는 의미이며 이 가정으로 인해 정규방정식의 해의 유일성을 보장받을 수 있다. 이 가정이 위반 되는 것이 공선성(collinearity)의 문제이다. 4) 관측개체에 대한 가정 : 모든 관측개체들은 동일하게 신뢰할 만하며, 회귀의 결과를 결정하고 결론을 도출함에 있어서 거의 동등한 역할을 한다. 최소제곱버의 특징 중 하나는 기본 가정에 대한 사소한 또는 작은 위반이 분석으로부터 도출된 추론이나 결론을 무효화할 만큼 큰 영향을 주지는 않는다는 것이다. 그러나 모형의 가정에 대한 큰 위반은 결론을 심각하게 왜곡 시키므로 결론적으로, 그래프를 통해서 잔차의 구조와 데이터의 패턴을 조사하는 것은 매우 중요하다. 다양한 유형의 잔차들 회귀분석에 있어서 모형이 가지는 가능한 결함을 찾아내는 데 가장 간단하고 효과적인 방법은 잔차플롯을 살펴보는 것이다. 더욱이, 분석이 요약통계량에만 근거할 경우 간과할지도 모를 데이터의 중요한 구조와 정보들을 잔차분석을 통해 발견할 수도 있다. \\hat{Y} = X\\hat{\\beta} = PYP = X(X^{T}X)X{T} 즉, Y를 $\\hat{Y}$로 만들기 위한 linear transform matrix를 모자(hat) 또는 사영(Projection) matrix P라고 한다. 여기서 $i=j일 때, p_{ii}=p_{ij}=p_{ji}=p_{jj}$는 사영행렬(P)의 i번째 대각원소이다. 이것은 i번째 관측개체에 대한 지레값(Leverage value)으로 불린다. 아래의 식에서 볼 수 있듯이 $\\hat{y}_{i}$은 Y의 모든 관측값들의 가중합이며, $p_{ii}$는 i번째 적합값 $\\hat{y}_{i}$을 결정함에 있어서 $y_{i}$에 부여되는 가중치(지레)이기 때문이다. \\hat{y}_{i} = p_{i1}y_{1} + p_{i2}y_{2} + \\cdots + p_{in}y_{n}, i=1,2,...,n 또한, 잔차($e_{i}$)의 분산은 그의 표준편차로 나누어 표준화하여 다음과 같이 평균 0과 표준편차 1을 가지는 표준화 잔차(standardized residual)을 얻을 수 있다. 자세하게는 $\\sigma$를 어떤 것을 사용하냐에 따라 내적 표준화잔차와 외적 표준화잔차로 나뉘어지지만, 결국 표본크기가 충분히 클때(30이상) 이 잔차들은 근사적으로 표준정규분포를 따른다. 또한 잔차들을 엄밀하게는 서로 독립이 아니지만, 표본크기가 크면 독립성의 문제는 무시 될 수 있다. 따라서, 잔차플롯을 작성함에 있어서 두가지 형태의 잔차 중 어느 것을 사용하는가는 별로 문제가 되지 않는다. z_{i} = \\frac{e_{i}}{\\sigma \\sqrt{1-p_{ii}}}그래프적 방법들 그래프적 방법들은 데이터 분석에서 중요한 역할을 하며, 특히 데이터에 선형모형을 적합할 때 더욱 중요하다. 분석이 수치적 결과에만 의존한다면 잘못된 결론에 도달할 수 있음을 볼 수 있다.그 대표적인 예로는 Anscombe의 데이터를 들 수 있다. 특정 그래프를 탐색하기에 앞서, 어떤 가정이 만족될 때 그 그래프가 어떻게 나타나야 하는지를 알아야 한다. 그러고 나서 그 그래프가 기대와 일치하는지를 살펴보아야 한다. 이렇게 함으로써 가정의 올바름 또는 그릇됨을 확인할 수 있을 것이다. 1) 모형을 적합하기 이전의 그래프 종속(반응)변수와 독립(설명)변수 사이의 관계를 나타내는 모형의 형태는 이론적 배경 또는 검정될 가설에 근거해야 한다. 1) 일차원 그래프 : 개별 변수의 분포를 개략적으로 살펴보기 위해 그린다. 이를 통해 어떤 변수가 매우 치우쳐져 있다면 변환이 수행되어야 한다. 비대칭의 정도가 심한 변수에 대하여 로그 변환이 추천된다. 일변량 그래프는 원래의 변수를 이용해야 할지 아니면 변환된 변수를 가지고 분석을 수행해야 하지에 대하여 정보를 제공한다. 또한 일변량 그래프는 변수에 있는 특이값의 존재 유무를 제시한다. 특이값은 그것이 입력오류 등에 의한 것인지(측정후 잘못 기입된 경우와 같은)를 알아보기 위해 조사되어야한다. 또한 특이값은 이후의 분석에서 문제를 발생시킬 수도 있기 때문에 분석을 수행할 때 주의깊게 다루어져야 한다. ex) histogram, stem-and-leaf display, dot plot, box plot 2) 이차원 그래프 : 변수의 수가 많은 경우 해당 차원과 같은 차원에서 변수들을 볼 수 없으므로, 각 변수들의 쌍에 대한 관계를 탐색하고 일반적인 패턴을 파악하기 위해 산점도를 통해 살펴볼 수 있다. 산점도행렬을 살펴볼때 주의할 점은 상관계수는 오직 선형관계만을 측정하며 robust하지 않으므로 쌍별 상관계수는 대응되는 산점도와 연관하여 해석해야 한다는 점이다. 단순회귀에서는 Y대 X의 산점도가 선형의 형태를 보일 것으로 기대되나, 다중회귀에서는 Y대 각 독립(설명)변수의 산점도가 선형의 형태를 보일 수도 있고 그렇지 않을 수도 있다. 즉, 선형의 형태가 보이지 않는다고 해서 주어진 선형모형이 옳지 않다는 것을 의미하지 않늗다. 또한, 각각의 독립(설명)변수들끼리 선형패턴을 보이지 않아야 한다. 산점도에 선형관계가 보이지 않는다는 것이 전체 독립(설명)변수들의 집합이 선형적으로 독립이라는 것을 의미하지는 않기 때문에 주의가 필요하다. 선형 관계는 두개 이상의 변수들을 포함하고 있을 수 있다. scatter plot을 통해서는 그런 다변량 관계를 검출하는 것이 쉽지 않다. 그러한 다중공선성 문제는 앞서 다룬 방법과 같이 해결하려고 해보아야 한다. 3) 회전도표 4) 동적그래프 2) 모형을 적합한 이후의 그래프 앞에서 소개된 그래프들은 데이터 검토와 모형설정 단계에서 유용하다. 데이터에 모형을 적합한 이후의 그래프들은 가정들을 검토하고 주어진 모형의 적합도를 평가하는 데 도움을 준다. 1) 선형성과 정규성 가정을 검토하기 위한 그래프표준화잔차의 정규확률 plot (Q-Q plot) 표준화 잔차의 분위수와 표준정규분포의 분위수의 scatter plot이라고 보면된다. 만약 잔차가 정규성을 띈다면 대각선과 최대한 비슷하게 그려져야한다. (Standardized) Residual vs Predictor(독립변수) 산점도 표준적인 가정 하에서 표준화잔차는 각 독립(설명)변수들과 상관되어 있지 않다. 이 가정이 만족된다면 이 플롯은 랜덤하게 흩어진 점들이 나타나야 한다. 이 plot에서 특정한 패턴이 발견된다면 어떤 가정들이 위반되었음을 의미한다. 아래 그림에\u001d서 (a)는 선형성 가정이 만족되지 않았을 때 나타나느 플롯 중 하나이며, 이 경우에는 Y 또는 특정 예측 변수에 대한 변환이 선형석을 위하여 필요할 수 있다. 그림 (b)는 이분산성을 의미하며 분산의 안정화를 위하여 데이터 변환이 필요할 것이다. (Standardized) Residual vs fitted-value plot 표준적인 가정 하에서 표준화잔차는 적합값과도 상관되어 있지 않다. 따라서 이 가정이 만족된다면 이 plot은 랜덤하게 흩어진 점들을 나타내야 한다. 표준화잔차의 인덱스 plot 표준화잔차 vs 관측개체 번호의 plot이다. 아래와 같이 해석할 수 있으며, 만일 관측개체의 취해진 순서가 중요한 의미를 가진다면, (예컨데, 개체가 시간 또는 공간 상의 순서에 따라 취해졌을 때), 연속적인 순서에 의한 잔차 plot은 오차의 독립성 가정을 검토하기 위해 사용될 수 있다. 독립성 가정 하에서 점들은 0 주위의 수평 띠(밴드) 안에서 랜덤하게 흩어져 있어야 한다. 2) 특이값과 영향력 있는 개체를 검출하기 위한 그래프지레점, 영햘력, 특이값 주어진 데이터에 모형을 적합함에 있어서 한두 개의 관측값들에 의해 적합이 과도하게 결정되면 분석이 제대로 이루어지지 않은 것이므로 이런 관측값들은 보통 잔차가 0에 가깝거나 0이기 때문에 특이값이 아니나 영향력있는 개체이다. 이런 상황에서는 잔차를 살펴보는 것은 거의 도움이 되지 않는다. 어떤 점이 제외되었을 때 혼자서 또는 다른 점들과 결합하여 적합모형(추정된 회귀계수, 적합값, t-통계량 등)에 큰 변화를 준다면 그 점을 영향력 있는 점이라고 한다. 일반적으로 어떤 점을 제외하면 약간이라도 적합에 변화가 있을 것이다. 여기에서의 관심은 그 점이 과도한 영향력이 있는가이다.따라서, 영향력이 있는 관측개체가 데이터에 존재한다면 그것을 파악하는 것이 중요하다. 영향력 있는 개체는 일반적으로 종속(반응)변수 Y 또는 독립(설명)변수 X 공간에 대하여 특이값이다. 반응(종속) 변수에 대한 특이값 : 잔차 plot을 통해 파악될 수 있으며, 잔차 plot은 존재하는 총체적인 모형위반들을 나타낼 것이며, 잔차 plot의 탐색은 분석에서 주요 도구 중 하나이다. 독립(설명) 변수에 대한 특이값 : 앞에서 설명한 지레값($p_{ii}$)는 X-공간에서 특이성을 측정하는 데 이용될 수 있다. 큰 지레값을 가지는 관측개체는 X-공간에서 특이값이기 때문이다. 반응변수에 대한 특이값(큰 표준화잔차를 가진 점)과 구별하기 위하여 높은 지레점(high leverage point)라고 한다. 위의 반응 변수에 대한 특이값은 잔차 plot을 통해 충분히 살펴 볼 수 있지만, 독립(설명)변수에 대한 특이값은 잔차 plot으로는 찾아보기 힘들다. 그 이유는 아래 잔차와 지레값의 관계에 대한 식을 살펴보면 높은 지레값을 갖는 점들은 잔차가 낮기 때문이다. 그러므로, 잔차 plot을 살펴보는 것만으로는 충분하지 않으므로 종속변수와 독립변수의 산점도에 회귀식을 그려보거나 지레값의 index plot을 그려 살펴 봐야 한다. 통상적으로 사용되는 $p_{ii}$에 대한 임계값은 $2(p+1)/n=0.2$이다. p_{ii} + \\frac{e^2_{i}}{SSE} \\leq 1영향력의 측도 Cook&#39;s distance : 전체 데이터로부터 얻은 회귀계수들과 i번째 개체를 제거하고 얻은 회귀계수(또는 적합값)들의 차이를 측정한다. C값에 대한 index plot을 그려 C값들이 비슷한 값을 가지지 않다면 돋보이는 C값들을 갖는 데이터들을 제외하고 모형을 적합에 보는 등의 방법을 검토해 봐야할 것이다 C_{i} = \\frac{sum^{n}_{j=1} (\\hat{y_{j}} - \\hat{y_{j}}_{i})^2}{\\hat{\\sigma^}^{2} (p+1)} , i=1,2, \\cdots ,n 이외의 Welsch &amp; Kuh의 측도(DFITS)와 Hadi의 영향력 측도가 있으나, Cook’s distance를 통해 충분히 검사가능하므로 생략하도록 한다. 다만, Welsh &amp; Kuh와 Cook’s distance는 잔차와 지레값에 대한 승법적(곱하는)함수인 반면에 Haid의 측도는 가법적(종속변수와 독립변수 각각에 대한 영향력의 수치를 더하는)함수이다. 특이값은 언제나 조심스럽게 조사되어야 되며 실무에서 분석시 함부로 제거해서는 안된다. 그 데이터 자체도 의미가 있을 수 있기 때문(예를 들면, 데이터가 모집단으로 부터 추출되지 않았다든가 또는 모형이 선형이 아니라는 것을 의미할 수 있기 때문)이다. 지레대 효과는 높으나 영향력이 작은 경우는 큰 문제를 일으키지는 않는다. 그러나 높은 지레값을 가지며 영향력이 큰 점들은 예측변수들의 공간에서 보통의 것들에 비해 멀리 떨어져 있으며 적합에 유의적인 영향을 끼치기 때문에 잘 검토할 필요가 있다. 즉, P값들의 index plot과 Cook&#39;s distance의 index plot과 종속변수와 독립변수 plot을 종합해서 비교해 보면서 각각의 지렛값이 높은 데이터와 영향력이 있는 값을 찾아야 할 것이다. criterion에는 cooks 와 DFITS를 사용할 수 있다. 아래 그래프의 해석은 몇가지 주의해야할 관측치들이 있는데, contractor와 reporter는 낮은 Leverage를 갖지\u001d만 큰 잔차를 갖는것을 볼 수 있다. RR.engineer는 작은 잔차와 낮은 Leverage를 갖는다. Conductor와 minister는 둘다 모두 높은 Leverage와 높은 잔차를 갖으므로 영향력있는 관측치이다. 특이값(잔차가 큰 관측치)과 영향력있는 관측개체(high leverage high residual)를 식별하는 데 유용한 다른 접근방법은 로버스트 회귀(robust regression)이다. 높은 지레값을 가지는 관측개체에 상대적으로 낮은 가중치를 주고 회귀직선을 적합시킨다. 다음에 더 자세한 설명을 할 것이다. 3) 변수들의 효과에 대한 진단플롯 회귀방정식의 어떤 변수를 보유해야 할 것인지 아니면 제거해야 할 것이지를 각각의 t-검정에 대한 보조도구로 사용될 수 있다. 첨가변수 plot 또는 편회귀 plot(added-variable plot 또는 partial regression plot) 회귀 모형에 대한 특정 독립(설명)변수를 포함시킬 것인지의 여부를 검토할 때, 그 대상이 되는 예측 변수에 대한 회귀계수의 크기를 그래프를 통하여 표현한다. plot에 나타나는 점들의 기울기는 곧 해당 독립(설명)변수에 대한 회귀계수를 나타낸다. 따라서 이 plot에 나타난 점들이 뚜렷한 기울기를 보이지 않는다면 이는 그 변수가 모형에서 별로 유용하지 않음을 의미한다. X축이 해당 예측변수 그 자체가 아니므로 비선형성의 여부를 나타내주지는 않는 점을 주의해야 한다. 또한 이 plot은 그 계수의 크기를 결정하는 데 중요한 역할을 하는 데이터 점을 제시해 주기도 한다. 첨가변수 plot은 Y-잔차$(X_{j}를 제외한 나머지 변수들로 설명되지 않은 Y의 부분) vs X_{j}-잔차(X_{j}를 종속변수로하여 나머지 변수들로 설명되지 않은 X_{j}의 부분)$을 그리는 plot이다. 이 두개의 잔차들을 최소 제곱벙으로 적합시켰을 때, 적합된 회귀직선의 기울기는 Xj를 포함한 모든 독립(설명)변수 얻은 회귀계수($\\hat{\\beta}_{j}$)와 같다. 개별로 그리는 것은 index로 식별을 할 수 있지만 아래에 여러가지를 한 꺼번에 그리는 방법은 인덱스를 볼 수 없으므로 처음에는 여러개를 다 같이 그린 후에 자세히 살펴봐야할 변수에 대해서만 개별로 그리는 방법을 사용하는 것이 좋을 것이다. 성분잔차 plot(component plus residual plot) 회귀 분석에서 가장 오래된 그래프적 기법 중의 하나이다. $(e + \\hat{\\beta}_{j} X_{j} VS X_{j})$에 대한 산점도이다. $\\hat{\\beta}_{j} X_{j}$은 j번째 독립(설명)변수가 적합값에 기여하는 공헌도(성분)임을 주목하자. 이 plot에서 기울기는 해당 독립변수에 대한 추정 회귀계수를 의미하며, 해당 예측변수의 기울기를 보여 줄 뿐 아니라 종속변수와 해당 독립변수사이의 비선형성의 존재도 알려줌으로써 필요할 경우 독립변수에 관한 구체적인 선형변환의 내용까지도 제시한다는 것이다. 이 또한, added-variable plot처럼 여러개를 그려본 뒤 필요한 변수에 대해서만 살펴보는 것을 추천. component plus residual plot vs added-variable plot 두 그래프 모두 회귀계수에 대한 추정치를 기울기로 보여주지만, added-variable plot은 어떤 데이터가 회귀계수를 추정하는데 많은 영향을 주었는지를 알 수 있게 도와준다. 반면에, component plus residual plot은 added-variable plot보다 특정 독립변수를 회귀모형에 도입해야 하느냐 하는 문제에 대한 답이나 그 독립변수가 가지는 비선형성의 여부를 탐색하는 데 더 민감한 것으로 알려져 있다. 추가적인 예측변수의 효과 회귀식에 새로운 변수를 도입하는 것의 효과에 대하여 다음의 두가지 질문을 고려해야할 것이다. (a) 새로운 변수의 회귀계수가 유의한가? (b)새로운 변수를 도입함으로써 회귀식에 이미 포함되어 있는 변수들의 회귀계수를 유의하게 변화시키는가? 이 두가지 질문에 대한 답으로 크게 4가지 유형이 있을 수 있다. 1) 새로운 변수가 유의하지 않은 회귀계수를 가지며, 다른 회귀계수들은 이전의 값에 비해 거의 변화가 없다. 어떤 다른 외부적인 조건(예컨대, 이론 또는 주제에 대한 고려)에 의하여 필요성이 있지 않다면, 새로운 변수는 회귀식에 포함되지 않아야 한다. 2) 새로운 변수가 유의한 회귀계수를 가지며, 이전에 도입된 다른 변수들의 회귀계수에 큰 변화가 있다. 이 경우 새로운 변수가 유지되어야 하며, 그러나 공선성에 대한 탐색이 필요하다. 공선성의 증거가 없다면, 그 변수는 방정식에 포함되어야 하며 다른 추가적인 변수의 도입에 대한 탐색이 수행되어야 한다. 3) 새로운 변수가 유의한 회귀계수를 가지며, 다른 회귀계수들은 이전의 값에 비하여 큰 변화가 없다. 이것은 이상적인 상황이며 새로운 변수가 이전에 도입된 변수들과 상관되어 있지 않을 때 발생한다. 이 경우 새로운 변수는 방정식에 포함되어야한다. 4) 새로운 변수가 유의하지 않은 회귀계수를 가지며, 이전에 도입된 다른 회귀계수에 큰 변화가 있다. 이것은 명백한 공선성의 증거이며, 회귀식에 새로운 변수를 포함시킬 것인지 아니면 제 제외시킬 것인지를 결정하기 전에 수정작업이 취해져야 한다.","categories":[{"name":"machine learning","slug":"machine-learning","permalink":"https://heung-bae-lee.github.io/categories/machine-learning/"}],"tags":[]},{"title":"순환 신경망(RNN) - 순차 데이터의 이해","slug":"deep_learning_08","date":"2020-01-12T06:25:39.000Z","updated":"2020-01-14T14:30:37.547Z","comments":true,"path":"2020/01/12/deep_learning_08/","link":"","permalink":"https://heung-bae-lee.github.io/2020/01/12/deep_learning_08/","excerpt":"","text":"순차 데이터의 이해 우리가 순환 신경망을 사용하는 이유는 입력을 순환 신경망으로 받거나 출력을 순환 신경망으로 내기 위해서이다. 일정한 시간차을 갖는 Time Series라면, x축이 특정 시간을 의미하는 Temporal Sequence와는 다르게 하나하나의 Step으로 간주한다. 일반적으로는 위에서 보는 것과 같이 Temporal Sequence를 보간하여 Time Series로 변환해 준 뒤에 사용한다. 개인 비서 서비스는 예를 들어, siri나 구글의 okay google 같은 서비스이다. 기본 적인 순환 신경망(Vanilla RNN) 앞서 말한 순차데이터를 입력받아 원하는 출력을 하려면, 기억시스템이 전제되어야 한다. CNN이나 Deep Neural Network, shallow NN은 Memoryless System이다. 다음 그림에서 볼 수 있듯이, RNN은 이전의 Network 구조와는 다르게 입력층에 n-1번째 step의 hidden layer를 n번째 데이터와 concatenation을 하여 사용하는 것이다. 이렇게 함으로써 이전의 모든 입력에 영향을 받는다. shallow Neural Network를 Deep Neural Network로 만들어 주었듯이, 동일하게 하여 Multi-Layer RNN을 만들 수 있다. 왼쪽의 노드들만 본다면 다음 Layer들의 이전 step의 hidden Layer를 가져온 것을 확인 할 수 있다. 하지만, 이런 구조는 Vanilla RNN과 다르게 Hidden Layer의 길이도 2배이상으로 늘어나기 때문에, 복잡도가 높아지게 되며, 현실적으로 학습이 잘 되지 않아 권장되지 않는다. 그 이유는 간단하게만 말하자면, 일반적인 Neural Network는 depth 방향으로만 gradient가 잘 학습되면 되지만, 이 구조는 input까지 Gradient의 영향을 주도록 해야하기 때문이다. 심화 순환 신경망 그렇다면 &#39;Vanilla RNN이 왜 잘 쓰이지 않는가?&#39;에 대한 가장 큰 이유를 앞서 언급했던 것과 같이 Gradient가 Input까지 타고 가서 학습을 잘 못하기 때문이라고 언급했다. 즉, Gradient Vanishing 문제라는 것이다. 검정색 선이 Input Gated이다. 빨간색 선은 Vanilla RNN에서의 Hidden State와 동일하다. 입력이 들어오고 이전 Hidden State를 받아서 같이 tanh activation function을 FC(Fully connected) Layer를 통과시켜 출력을 내주면 RNN의 Hidden Layer이기 때문이다. 해당 Layer에서 필요한 정보만을 출력층으로 내주고, 필요하지 않은 정보는 기억하는 것이며, 필요없는 것을 빼주지만, 다음 time step으로 넘겨주어서 이전에 어떤 출력을 내주었었나를 Cell State와는 별개로 또 넘겨주게된다. 아래 그림에서 출력을 내보내기위해 Cell State에서 tanh를 거쳐 주는데 이 작업은 다른 activation function들이 존재하는 노드들과 달리 FC layer로 이루어져 있지 않고 그냥 activation function만 거치게 된다. 그 이유는 Cell State가 Forget gate를 지나면서는 0~1사이의 값이 곱해지므로 크게 문제가 없지\u001d만 Input Gate를 지나면서 Feature가 추가적으로 더해질때 tanh를 지나면 -1~1사이의 값이 되므로 범위 -2~2로 늘어나게 되어 추후에 Gradient Explode가 일어날 수 있어 예방차원에서 tanh을 사용해주는 것이다. 아래 그림에서 $1 - Forget Gate$를 Input Gate로 사용하는 것은 Forget Gate에서 잊어버린 만큼만 Input Gate를 통해 채워 주는 의미로 해석할 수 있다. Input Gate를 통해 새로운 Feature가 추가되기에 앞서서 이전 Hidden State 정보를 얼마나 잊게 하느냐의 의미인데, 예를 들어 앞의 문장이 .을 통해 마쳐졌다면, 그 뒤의 문장은 다른 문장 구조를 띄게 되므로 0에 가깝게 하여 Reset을 시켜줄 것이다. 시간펼침 역전파 학습법(BPTT: Back Propagation Through Time) 순환신경망은 기존의 기본적인 역전파 학습법으로는 학습할 수 없다. 그렇다면, 어떻게 해야할까? 물론, 모델이 학습할때 언제 입력이 끝날지 모르기에 마지막 입력 같은 경우는 EOS(End Of Sequence)라는 특별한 미리정해준 하나의 토큰을 날려주는 경우가 많다. 아래의 그림은 Input의 시점에 따라 펼쳐져있다는 것을 이해하기 쉽게 펼쳐 놓은 것인데, 여기서 주의할 점은 아래의 RNN안의 Hyper parameter들은 모두 동일하다는 것이다. 즉 아래의 그림은 재귀적형태를 시간의 흐름상으로 나열해 놓은 것이라고 생각하면 된다. 위에서 언급했던 것과 같이 출력(또는 입력)의 길이가 정해져있지 않은 RNN의 경우, 아래는 마지막 출력에 EOS\u001d 출력을 내게끔 학습시켜야 모든 출력이 나왔다는 것을 알 수가 있다. 또한, Back propagation도 마찬가지로 각각의 출력에 대한 Loss값 부터 시작해서 Input지점까지 해주면 된다. 실제 모델에서는 다른 층에서는 0을 입력하거나 미리 정해놓은 입력을 넣어주어 학습을 시키는 것이 일반적이다. 다중 입력에 대해서 다중 출력이 나오려면 2가지 상황이 있을 수 있다. 하나는 아래 그림에서와 같이 입력에 대해서 출력이 나오고 입력이 끝나면 출력도 끝나는 것이 있을 수 있다.이런 경우는 대표적으로, 동영상의 프레임 분류가 있다. 예를 들면, CF의 한 프레임이 입력으로 들어와 각 장면이 어떤 장면인지 서술하는 식으로의 분류를 들 수 있을 것이다. 또 다른 한 상황은 모든 입력을 받고 그 다음에 출력이 나오는 경우가 있다. 이 경우도 마찬가지로 입력의 길이가 언제 끝날지 모르므로 마지막 입력에 EOS를 날려 주어야 한다. 심화 순환 신경망의 수식적 이해 Vanilla RNN의 수식은 이전에 간단히 다루었다. 이제 LSTM과 GRU도 수식으로 접근해 보자. 특징이 여러차원으로 되어있는데, 이 Forget gate 또한 여러 차원으로 되어있어 특징별로 기억할지 말지를 결정할 수 있다. Reset gate는 Hidden state에서 바로 잊는 Forget gate와는 다르게 현재 Feature를 뽑을 때 얼만큼 잊어줄 것인가를 결정하는 부분이다. 큰 맥락에서는 기억하고 있어야 하지만, 현재 Feature를 뽑을 때는 방해가 될 수 있는 정보를 잊게하는 역할이다. 예를 들어 아래와 같은 상황일때, 마지막 박 아무개의 답을 추론하고자 한다면, 먼저 “나는 사과가 좋다.”, “너는 과일을 싫어한다.”라는 문장 2개는 \u001c분리가 된 문장이지만 “나는 사과가 좋다” 내에서는 ‘나’하고 ‘사과’는 잘 기억이 되어야 하지만 “너는 과일을 싫어한다”라는 문장은 다른 문장이므로 기억이 안되어야 할 것이다. 하지만, “나는 어떤 과일이 먹고 싶을까?”에 답을 하려면, 최근에 문장인 “너는 과일을 싫어한다”에서는 추론할 때 필요한 정보가 없기 때문에 그 이전 문장인 “나는 사과가 좋다.”는 context를 계속해서 가지고 있어야한다. 이 정보가 Hidden state를 타고 움직여야 하는 정보이\u001d고, 여기서 “나는 사과가 좋다.”와 “너는 과일을 싫어한다.”라는 문장을 구분하여 단계적으로 활용하지 않기 위한 작업이 Reset gate이다. Reset gate와 다르게 Hidden state에 직접적으로 곱해져서 이전 time step Hidden State에서 기억을 잊어버리게 하는 역할을 한다. 잊어버린 부분만큼을 다시 새로운 정보로 보충하기 위해 1에서 뺀 만큼을 새로운 입력의 결과에 곱해준다. 이전 time step의 Hidden state가 들어왔을 때 reset gate를 통해 제어가 된 것을 가지고 현재 Feature들을 뽑아주게 되고, Forget gate에서 의해서 제어가 된 만큼 넘어오고 Forget gate에 의해서 상보적인 만큼 다시 새로 뽑은 Feature를 입력을 받아서 다음 출력으로 나가게 된다. 그렇기에 값이 -1~1로 bound되어있어 LSTM과 다르게 tanh함수가 필요하지 않다. 순차 신경망에서 Tensor의 이해 데이터가 Feature같은 경우에는 항상 꽉차게 되는데, 순차데이터 같은 경우에는 길이가 L보다 짧을 수 있다. 그런 경우에는 앞을 0으로 채워준다.(pre-padding) 출력이 나오는 시점은 고정되므로 일관되게 앞쪽으로 정렬된 출력이 나올 수 있게 하기 위해서 뒷부분을 0으로 채운다. 순환 신경망의 학습법 시간에 대해서 펼쳐있고, 추가적으로 Batch로도 펼쳐 주어야 하는데, 즉, 아래와 같은 구조가 Bath size만큼 더 있어주어야 한다는 의미이다. 그래서 시간적으로 펼칠 때 역전파를 위한 추가적인 메모리가 필요하다. 일반적인 CNN이나 DNN은 시간적으로 펼치는 것이 없기 때문에 Batch에 대해서 크게 엄격하지 않다. 하지만 RNN은 아래와 같이 시간적으로 펼치기 때문에 Batch size를 늘리는데 엄격하다. 순차 데이터의 길이 L이 매우 클 경우, 시간 펼침이 늘어나면서 필요 메모리가 L배 증가한다. 그 이유는 길이가 1개 씩 늘어날 때마\u001c다 펼침을 하나씩 더 해야하기 때문이다. 이 때 B(Batch)를 한번에 계산하므로, 얕은 신경망에 비해 훨씬 큰 메모리가 필요. 길이 L의 입력을 길이 T로 쪼개어 순서대로 학습한다. 즉, Time step이 T 이상 떨어진 입-출력 관계는 학습되지 않는다. Hidden state와 Cell state를 통해 Forward propagation에서는 잘 추론 할 수 있도록 넘겨 주지만, Back propagation에서는 그 관계를 서로 넘겨주지 못한다. 만약 전부다 연결시킨 관계를 학습시켜야 한다면 Truncated BPTT가 아닌 길이가 L인 모든 데이터를 학습시켜야 한다. 그러므로 Truncated BPTT를 사용할 시 반드시 영향을 주는 데이터 사이의 관계를 침해하지 않게 T로 적절하게 나누어졌는지, 우리가 학습하고자 하\b는 것이 어느 정도의 시간차이까지 우리가 연관성을 봐야 하는지를 염두해 두고 학습을 시켜야 한다. 만약 연관성이 있는 데이터의 주기(데이터간의 시점 차이)가 크고 Gradient가 끊기지 않고 연결되어 업데이트가 이루어져야 한다면, 최대한 Batch Size를 극단적 낮추고, 최대한 Memory가 큰 GPU를 사용해서 최대한 긴 길이를 학습해 주는 방법을 사용해야 할 것이다.","categories":[{"name":"deep learning","slug":"deep-learning","permalink":"https://heung-bae-lee.github.io/categories/deep-learning/"}],"tags":[]},{"title":"DenseNet 구현 및 학습","slug":"deep_learning_07","date":"2020-01-12T06:23:36.000Z","updated":"2020-01-12T06:25:30.364Z","comments":true,"path":"2020/01/12/deep_learning_07/","link":"","permalink":"https://heung-bae-lee.github.io/2020/01/12/deep_learning_07/","excerpt":"","text":"DenseNet","categories":[{"name":"deep learning","slug":"deep-learning","permalink":"https://heung-bae-lee.github.io/categories/deep-learning/"}],"tags":[]},{"title":"Residual Network 구현 및 학습","slug":"deep_learning_06","date":"2020-01-12T06:17:16.000Z","updated":"2020-01-12T06:24:38.480Z","comments":true,"path":"2020/01/12/deep_learning_06/","link":"","permalink":"https://heung-bae-lee.github.io/2020/01/12/deep_learning_06/","excerpt":"","text":"Residual Network","categories":[{"name":"deep learning","slug":"deep-learning","permalink":"https://heung-bae-lee.github.io/categories/deep-learning/"}],"tags":[]},{"title":"Scrapy 웹 크롤링 02 - Spider, Scrapy selectors, Items","slug":"Crawling_01","date":"2020-01-10T18:39:47.000Z","updated":"2020-01-16T13:46:09.623Z","comments":true,"path":"2020/01/11/Crawling_01/","link":"","permalink":"https://heung-bae-lee.github.io/2020/01/11/Crawling_01/","excerpt":"","text":"Spider Spider의 종류 (참고로, 아래 3가지 종류의 Spider는 잘 사용되지 않는다.) CrawlSpider XMLFeedSpider CSVFeedSpider SitemapSpider 12# 여러사이트를 크롤링하기 위한 spider를 생성scrapy genspider many_site hub.scraping.com spider 폴더의 many_site.py파일에서 코드를 작성하기에 앞서 settings.py에서 naver와 daum은 robots.txt에서 크롤링을 불허하기에 다음과 같은 수정작업을 해주어야 크롤링이 가능하다. 아래의 코드처럼 여러 도메인을 크롤링할 수 있는 방법은 크게 3가지 정도가 있다. 다음과 같이 1번째 방법을 사용해서 로깅 및 분기처리로 여러 사이트를 크롤링할 수 있게끔 코드를 수정해 주었다. Selectorxpath selector 도움 사이트 https://docs.scrapy.org/en/latest/topics/selectors.html#working-with-xpath www.nextree.co.kr/p6278 css selector 도움 사이트 https://docs.scrapy.org/en/latest/topics/selectors.html#extension-to-css-selectors crawling시 활용 tip 타겟 데이터는 크롬 개발자 도구 사용 선택자 연습 팁 : scrapy shell 에서 테스트(효율성) scrapy shell 도메인 중요(완전 동치는 아니다!) get() == extract_first() getall() == extract() CSS 선택자 div#chan div : (자손) chan이라는 class속성값으로 갖는 div tag의 아래에 존재하는 모든 div div#chan &gt; div : (자식) chan이라는 class속성값으로 갖는 div tag의 직계자식 div들 ::text -&gt; 노드의 텍스트만 추출 ::attr(name) -&gt; 노드 속성값 추출 get(default=’’) : get으로 추출할 때 해당사항이 없다면 공백으로 출력 예시) response.css(‘title::text’).get() : title tag의 텍스트만 추출 response.css(‘div &gt; a::attr(href)’).getall() : div tag의 자식 a tag의 href속성값 전부 추출 Xpath 선택자 nodename : 이름이 nodename 선택 text() -&gt; 노드 텍스트만 추출 / : 루트부터 시작 // : 현재 node 부터 문서상의 모든 노드 조회 . : 현재 node .. : 현재 node의 부모노드 @ : 속성 선택자 예시) response.xpath(‘/div’) : 루트노드부터 모든 div tag 선택 response.xpath(‘//div[@id=”id”]/a/text()’).get() : div tag 중 id가 ‘id’인 자식 a tag의 텍스트 하나만 추출 혼합 사용 가능!! response.css(‘img’).xpath(‘@src’).getall() 실습) w3school(웹에 관한 정보들이 있는 사이트) 실습 목표 : nav 메뉴 이름 크롤링 실습 과정 : shell 실행 -&gt; 선택자 확인 -&gt; 코딩 -&gt; 데이터 저장(프로그램 테스트) Items 구조적으로 데이터를 크롤링할 수 있게 해주는 역할을 한다. 예를 들면 내가 크롤링할 데이터를 정확하게 구분(신문기사의 이름, 본문, 이미지 이렇게 구조적으로 구분)하게 구조적으로 규칙을 정하고 그 규칙들을 Items라는 파일안에 작성하여 나중에 Items를 return하\u001d면 명확하게 구분된 우리가 원하는 여러가지 형식으로 저장할 수 있다. spider는 직접 크롤링을 하는 역할, Items는 크롤링 될 타겟 데이터를 명확히 해주는 역할이라고 생각하면 될 것이다. Scrapy Item장점 1) 수집 데이터를 일관성있게 관리 가능 2) 데이터를 사전형(Dict)로 관리, 오타 방지 3) 추후 가공 및 DB 저장 용이 Items를 사용한 scrapy는 새로운 사이트를 크롤링할 것이므로 새로운 spider를 만들어준다. 1scrapy genspider using_items itnews.com items.py 파일에서 우리의 타켓 데이터를 정의해준다. items.py를 활용기 위해 import를 할 경우 다음과 같이 절대경로를 사용한 path 추가 방법을 사용해야한다. 다음과 같이 items의 ItArticle class를 활용하여 spider를 좀 더 깔끔하게 작성할 수 있다.","categories":[{"name":"crawling","slug":"crawling","permalink":"https://heung-bae-lee.github.io/categories/crawling/"}],"tags":[]},{"title":"Scrapy 웹 크롤링 01 - 환경설정 및 기초","slug":"Crawling_00","date":"2020-01-09T12:08:12.000Z","updated":"2020-01-10T20:01:51.393Z","comments":true,"path":"2020/01/09/Crawling_00/","link":"","permalink":"https://heung-bae-lee.github.io/2020/01/09/Crawling_00/","excerpt":"","text":"Scrapy VS Beautiful SoupBeautiful Soup Beautiful Soup는 웹 상의 정보를 빠르게 크롤링 하기위한 도구이며, 정적인 정보를 가져 올 수 있다. 즉, 해당 API(URL)에 요청했을때 바로 가져올수 있는 정보들만 가져올 수 있다. 시간이 좀 더 걸린 후에 나오는 정보들은 가져올 수 없다는 것이다. 진입 장벽이 매우 낮고 간결해서, 입문 개발자에게 안성맞춤이다. 그리고 이 라이브러리는 스스로 크롤링을 하는 것이 아니라 urlib2 또는 requests 모듈을 통해 HTML 소스를 가져와야 한다. Scrapy Scrapy는 Python으로 작성된 Framework이며, spider(bot)을 작성해서 크롤링을 한다. Scrapy에서는 직접 Beautiful Soup 이나 lxml을 사용할 수 있다. 하지만 Beautiful Soup에서는 지원하지 않는 Xpath를 사용할 수 있다. 또한, Xpath를 사용함으롴써 복잡한 HTML소스를 쉽게 크롤링 할 수 있게 해준다. 또한 Xpath를 통한 crawling이 가능한 모듈로는 selenium도 존재한다. selenium도 Scrapy와 연동해서 가능하다. Anaconda env 먼저 사전에 anaconda를 통해 가상환경을을 만들어준다. 1234567891011121314# env 생성conda create -n env_name python=3.5# env 리스트 보기conda env list# env 활성화conda activate env_name# env 비활성화conda deavtivate# env 삭제conda env remove -n env_name Scrapy 환경설정 먼저 가상환경을 활성화시켜준 후에, spider bot을 만들 폴더의 상위 폴더에서 다음의 명령어를 실행시켜준다. 12345conda activate env_namecd ..scrapy startproject project_name 다음과 같이 설정한 project명을 갖는 폴더가 만들어지며, 필자는 section01_2라고 명명했다. 위의 단계까지 실행했다면, 다음과 같은 출력이 보일 것이다. 빨간줄 아래에 나와있는 예시 명령어를 따라서 실행시키면 spider bot을 만들수 있다. 또한, 모든 앞으로의 모든 명령어는 scrapy.cfg라는 파일이 존재하는 directory path에서 해야한다. genspider scrapy에서 가장 중요한 spider class를 만들어준다. 123456789# spider를 만들기 위해 명령어를 실행하려면 scrapy.cfg파일의 경로로 이동해야하기 때문에cd section01_2# scrapy.cfg파일이 존재하는지 다시 한번 확인ls# https://blog.scrapinghub.com/은 crawling 테스트를 위한 사이트로 유명하다.# https://blog.scrapinghub.com/이라는 사이트를 크롤링할 testspider라는 이름으로 spider 을 만들어라는 명령어scrapy genspider testspider blog.scrapinghub.com 다음과 같은 출력결과를 볼 수 있으며, section01_2에 spiders라는 폴더의 testspider라고 만들어졌다는 것을 의미한다. 12345678# 만들어진 spider 파일 확일을 위해 이동cd section01_2/spiders# 위에서 만들어 놓았던 testspider라는 spider가 있는지 확인ls# testspider.py 확인vim testspider.py 먼저 straturl과 우리가 크롤링하려는 URL endpoint가 https인지 확인한 후 고쳐준다.(여기서 필자는 vim으로 수정하였기에 pep8에 의거하여 space 4번으로 indent를 사용하였다. space와 tap을 번갈아가며 사용하면 python interpreter가 다르게 인식하므로 에러를 발생시킨다!) 앞으로의 실습에 헷갈림을 방지하기 위해서 name을 test1으로 변동해주었고, allowed_domains과 start_urls를 보면 설정해 놓은 대로 들어가 있는 것을 알 수 있다. 여기서 scrapy는 allowed_domains과 start_urls가 리스트 구조로 되어있는데 다른 URL과 도메인들을 추가하면 해당 사이트들을 돌아가며 크롤링을 할 수 있는 병렬처리가 가능하다는 것이 가장 큰 장점이다. 추후에 설명하겠지만, 눈치 빠르신 분들은 아래 parse함수에서 response를 parameter로 받는 함수이므로 이 함수에 크롤링하고 싶은 부분에 대한 코드를 만들면 크롤링이 가능하다는 것을 알 것이다!! 혹시 response에서 어떤 명령어가 사용가능한지 보고 싶다면 runspider vs crawl runspider와 crawl의 차이점은 runspider는 spiders폴더에서 실행할 수 있고, crawl은 scrapy.cfg파일이 존재하는 폴더에서 실행하여햐 한다는 점이 차이점이다!! genspider 명령어를 통해 spider bot spider는 단위 테스트라고 소위 불리는 방식을 할 때 유용하고 crawl은 우리가 원하는 구조를 다 만들어 놓은 후 테스트를 할 때나 실제로 크롤링을 할 경우 사용하는 것이 유용하다. 12345# runspider는 spiders 폴더에서 실행하여야한다.scrapy runspider testspider.py# crawl은 scrapy.cfg파일이 존재하는 path에서 실행시켜주어야한다.scrapy crawl test1 --nolog settings.py spider의 속성에 관련된 parameter들이 있는 파일이라고 생각하면 된다. 예를 들면, 아래의 그림에서 볼 수 있듯이 SPIDER MODULES는 현재 SPIDER의 위치를 의미하고, NEWSPIDER MODULE은 Spider를 새로 생성시 어느 위치에 추가되는지를 의미한다. ROBOTSTXT_OBEY는 robots.txt의 규칙에 의거하여 crawling을 하겠다는 의미이며, DOWNLOAD_DELAY는 몇초간격으로 서버에 요청을 할지에 대한 수치이다. 필자는 1로 정했는데 여기서는 1초마다라는 의미이다. 만약에 0.2라고 하게 되면 0.2초마다 서버에 요청하게 되어 서버에 부하를 일으키게 되면 심할경우 영구 van을 당할 수도 있기에 간격을 1초이상으로 하는 것을 권장한다. 실습)blog.scrapinghub.com에서 기사 제목들만 크롤링 하기! 위의 실습주제로 실습을 진행하기 위해서는 앞서 만들어본 spider 파일에서 parse함수를 수정해야할 것이다. 그에 앞서 크롤링할 blog.scrapinghub.com의 제목에 해당하는 css path를 보면 전체 html의 body 부분에서 div element 중 class의 이름이 post-header인 부분에만 존재하는 것을 개발자 도구를 통해 알아내었다. 다른 부분에 동일한 element나 class명을 가질 수도 있으므로 find를 해보아야한다! 다음과 같이 제목을 크롤링하기 위해 testspider.py을 수정해 주었다. 참고로 결과를 파일로 저장할때 scrapy가 지원하는 파일 형식은 json, jsonlines, jl, csv, xml, marshal, pickle이다. 결과를 저장할때 동일한 파일명과 확장자명을 가진 파일이 이미 존재한다면 그 파일에 데이터를 추가해주므로 주의하자! 12345# 필자는 spider 폴더에서 실행함.scrapy runspider testspider.py -o result.csv -t csv# result 파일인 result.csv가 만들어진 것을 확인할 수 있다.ls Requests를 사용하여 페이지 순회하며 크롤링 우리가 예를 들어 어떤 페이지내에서 여러 항목에 대해 해당 url로 이동 후 크롤링하고 다시 그 전 페이지로 돌아가서 다음 항목의 url로 이동 후 크롤링하는 이런 순회를 거쳐야하는 작업은 request나 selenium으로 하게되면 iterable한 코드를 통해 가능하게 되며, 그렇지 않다면, 동일한 구성을 지닌 페이지들이라면 함수를 여러번 실행하는 등의 multiprocessing을 통해 병렬처리를 따로 해주어여하는 불편함이 있다. 허나, scrapy는 코드 몇 줄로 가능하다. 먼저 앞의 spider말고 새로운 spider를 만들어 사용할 것이다. spider를 만든 설정은 위에서 만든 것과 동일하다. spider 이름만 pagerutine이라고 명명했을 뿐이다. 이전에 blog.scrapinghub.com의 페이지에 해당 10개의 기사들에 대한 path가 “div.post-header h2 &gt; a” 이며, a tag의 href 속성 값들을 통해 각각의 기사에 해당 페이지로 이동이 가능할 수 있다는 사실을 확인 할 수 있다. 첫번째 parse 함수에서 미리 추출한 url을 request하여 얻은 response를 다른 함수로 전달해주기 위해 Request 명령어를 사용하였으며, urljoin을 사용한 이유는 절대주소가 아닌 상대주소로 되어있는 경우 위\u001d의 start_urls에 설정해 놓은 주소를 앞에 붙여 절대 주소로 바꿔주는 기능이다. 물론 절대주소인 경우는 이런 작업을 생략한다. Scrapy Shell 사용법 쉽게 말해 이전에 크롤링을 할때 Spider 폴더에서 파일을 수정하고 테스트해보는 방식으로는 작업의 효율성이 떨어지므로 그 전에 css나 xpath selector를 테스트해볼 수 있는 것이 Shell mode이다. 123456789101112131415161718192021222324252627282930313233343536# shell 모드 접속scrapy shell################ shell 모드 접속했다고 가정 ################ url 설정(request하는 대상을 바꾸는 역할)fetch('url')quit################# 다른 방법 ############################# 위의 단계를 한번에 하는 방법scrapy shell https://blog.scrapinghub.com# response data가 무엇이 있는지 확인 할 수 있다. 소스페이지를 현재 내 컴퓨저에 가져와서 보여주는 방식view(response)# 예시fetch(https://daum.net)view(response)# response가 사용할수있는 method 확인dir(response)# 현재 reponse의 url 확인response.url# 현재 response의 body정보 확인response.body# 현재 reponse의 status 확인response.status# robot.txt\u001d에 크롤링이 허용되지 않았으면 shell script가 실행되지 않는다.# settings 파일에서의 설정 파라미터들을 동적으로 설정하며 실행 가능!scrapy shell https://daum.net --set=\"ROBOTSTXT_OBEY=False\"","categories":[{"name":"crawling","slug":"crawling","permalink":"https://heung-bae-lee.github.io/categories/crawling/"}],"tags":[]},{"title":"모형 성능 평가 지표","slug":"machine_learning_03","date":"2020-01-09T06:12:42.000Z","updated":"2020-01-15T09:24:04.397Z","comments":true,"path":"2020/01/09/machine_learning_03/","link":"","permalink":"https://heung-bae-lee.github.io/2020/01/09/machine_learning_03/","excerpt":"","text":"회귀(regression) 평가 지표 회귀의 평가를 위한 지표는 실제 값과 회귀 예측값의 차이 값을 기반으로 한 지표가 중심이다. 실제값과 예측값의 차이를 그냥 더하면 잔차의 합은 0이므로 지표로 쓸 수 없다. 이 때문에 잔차의 절대값 평균이나 제곱, 또는 제곱한 뒤 다시 루트를 씌운 평균값을 성능 지표로 사용한다. 평가 지표 수식 MAE(Mean Absolute Error) $MAE = \\frac{1}{n} \\sum_{i=1}^{n} \\lvert Y_{i} - \\hat{Y_{i}} \\rvert$ MSE(Mean Squared Error) $MSE = \\frac{1}{n} \\sum_{i=1}^{n} (Y_{i} - \\hat{Y_{i}})$ RMSE(Root Mean Squared Error) $RMSE = $\\sqrt{\\frac{1}{n} \\sum_{i=1}^{n} (Y_{i} - \\hat{Y_{i}})^{2}}$ $R^{2}$ $R^{2} = \\frac{예측값의 Variance}{실제값 Variance} = \\frac{SSR}{SST}$ 이전에도 언급했던 것처럼 변수가 추가된다면 당연히 SSR의 수치가 높아지기 때문에 $R^{2}$값은 올라갈 수 밖에 없다. 그러므로 변수 수에 영향을 받지 않고 서로 비교할 수 있게끔 만들어 준 것이 수정된 결정계수이다. 분류(classification) 성능 지표 특히 imbalanced data에서 모형의 성능을 정확도 하나만을 가지고 성능을 평가한다면, 예를 들어, 100개중 90개는 세모고 10개는 네모라고 할 때 100개 모두 세모라고 예측해버리게 되면 정확도는 90%이므로 좋은 성능 지표라고 할 수 없다. 그러므로 imbalanced data에서의 성능 지표는 정확도(accuarcy) 보다는 정밀도(precision), 재현율(Recall)를 더 선호한다. 정밀도(precision)와 재현율(recall) 지표 중에 분류 모델의 업무 특성에 따라서 특정 평가 지표가 더 중요한 지표로 간주 될 수 있다. 재현율(recall)이 중요 지표인 경우는 실제 Positive 양성 데이터를 Negative로 잘못 판단하게 되면 업무상 큰 영향이 발생하는 경우(FN이 Critical한 경우)이다. 예를 들어 암 판단 모형은 재현율(recall)이 훨씬 중요한 지표이다. 왜냐하면 실제 Positive인 암 환자를 Positive 양성이 아닌 Negative 음성으로 잘못 판단했을 경우 오류의 대가가 생명을 앗아갈 정도로 심각하기 때문이다. 반면에 실제 Negative인 건강한 환자를 암 환자인 Positive로 예측한 경우면 다시 한번 재검사를 하는 수준의 비용이 소모될 것이다. 또 다른 예로는, 금융 사기 적발 모델을 들 수 있다. 물론 고객에게 금융 사기 혐의를 잘못 씌우면 문제가 될 수 있기에 정밀도(Precision)도 중요 평가 지표지만, 업무적인 특성을 고려하면 재현율(Recall)이 상대적으로 더 중요한 지표입니다. 보통은 재현율(Recall)이 정밀도(Precision)보다 상대적으로 중요한 업무가 많지만, 정밀도가 더 중요한 지표인 경우도 있다. 예를 들어, 스팸메일 여부를 판단하는 모형의 경우 실제 Positive인 스팸 메일을 Negative인 일반 메일로 분류하더라도 사용자가 불편함을 느끼는 정도이지만, 실제 Negative인 일반 메일을 Positive인 스팸메일로 분류할 경우에는 메일을 아예 받지 못하게 돼 업무에 차질이 생긴다. 정밀도(Precision)이 상대적으로 더 중요한 지표인 경우는 실제 Negative 음성인 데이터 예측을 Positive 양성으로 잘못 판단하게 되면 업무상 큰 영향이 발생하는 경우(FP가 Critical한 경우)이다. 재현율(Recall)과 정밀도(Precision) 모두 TP를 높이는 데 동일하게 초점을 맞추지만, 재현율(Recall)은 FN를 낮추는데, 정밀도(Precision)는 FP를 낮추는데 초점을 맞춘다. 이 같은 특성 때문에 재현율(Recall)과 정밀도(Precision)은 서로 보완적인 지표로 분류의 성능을 평가하는데 적용된다. 가장 좋은 성능 평가는 재현율(Recall)과 정밀도(Precision) 모두 높은 수치를 얻는 것이다. 반면에 둘 중 어느 한 평가 지표만 매우 높고, 다른 수치는 매우 낮은 결과를 나타내는 경우에는 바람직하지 않다. 정밀도(Precision)/ 재현율(Recall) Trade-off 분류하려는 업무의 특성상 정밀도(Precision) 또는 재현율(Recall)이 특별히 강조돼야 할 경우 분류의 결정 임계값(Threshold)을 조정해 정밀도(Precision) 또는 재현율(Recall)의 수치를 높일 수 있다. 하지만 정밀도(Precision)와 재현율(Recall)은 상호 보완적인 평가 지표이기 때문에 어느 한쪽을 강제로 높이면 다른 하나의 수치는 떨어지기 쉽다. 이를 정밀도(Precision)/재현율(Recall)의 Trade-off라고 부른다. scikit-learn에서 각각의 분류모델들은 predict_proba의 결과를 Threshold(보통은 0.5)보다 같거나 작으면 0값으로, 크면 1값으로 변환해 반환하는 Binarizer 클래스를 사용하여 predict의 결과를 계산하여 반환해 준다. 만약 임계값을 낮추면 재현율(Recall)값이 올라가고 정밀도(Precision)가 떨어질 것이다. 그 이유는 임계값은 Positive 예측값을 결정하는 확률의 기준이 되는데 임계값을 0.5에서 0.4로 낮추면 그만큼 Positive 예측을 더 너그럽게 하기 떄문에 True로 예측하는 값이 많아지게 된다. Positive 예측을 많이 하다보니 실제 양성을 음성으로 예측하는 횟수가 상대적으로 줄어들기 때문이다. 정밀도(Precision)과 재현율(Recall)의 맹점 Positive 예측의 임계값을 변경함에 따라 정밀도(Precision)와 재현율(Recall)의 수치가 변경된다. 임계값의 이러한 변경은 업무 환경에 맞게 두 개의 수치를 상호 보완할 수 있는 수준에서 적용돼야 한다. 그렇지 않고 단 하나의 성능 지표 수치를 높이기 위한 수단으로 사용돼서는 안된다. 각각의 지표를 극단적으로 높일 수는 있고, 정밀도(Precision) 또는 재현율(Recall) 중 하나에 상대적인 중요도를 부여해 각 예측 상황에 맞는 분류 알고리즘을 튜닝할 수 있지만, 그렇다고 정밀도(Precision)/재현율(Recall) 중 하나에 상대적인 중요도를 부여해 각 예측 상황에 맞는 분류 알고리즘을 튜닝할 수 있지만, 그렇다고 정밀도(Precision)/재현율(Recall) 하나만 강조하는 상황이 돼서는 안된다. F1-score는 정밀도(Precision)와 재현율(Recall)을 결합한 지표로 어느 한쪽으로 치우치지 않는 수치를 나타낼 때 상대적으로 높은 값을 가진다. 여기서 또 한가지 주의할 점은 정밀도(Precision)와 재현율(Recall)의 조화평균값이라 해서 무조건 F1-score가 높은 것이 좋은 모형은 아니라는 점이다. 정밀도(Precision)과 재현율(Recall) 그리고 F1-score 모두 구한 후 비교하여 적합한 모형을 선정하는 것이 중요하다! F1 = \\frac{2}{\\frac{1}{Recall} + \\frac{1}{Precision}} ROC Curve와 이에 기반한 AUC score는 이진 분류의 예측 성능 측정에서 중요하게 사용되는 지표이다. ROC Curve(Receiver Operation Characteristic Curve)는 일반적으로 의학분야에서 많이 사용되지만, 머신 러닝의 이진 분류 모델의 예측 성능을 판단하는 중요한 지표이다. ROC Curve는 FRR(False Positive Rate)이 변할 때 TPR(True Positive Rate)이 어떻게 변하는지를 나타내는 곡선이다. FPR을 X축으로 하고 FPR을 0부터 1까지 변경하면서, TPR을 Y축으로 잡아 FPR에 변화에 따른 TPR의 변화가 곡선 형태로 나타난다. 분류결정 임계값은 Positive 에측값을 결정하는 값이므로 FPR을 0으로 만들려면 1로 지정하면 된다. TPR은 재현율(Recall)과 동일하며, 민감도라고도 불린다. 가운데 직선은 ROC Curve의 최저값(AUC는 0.5)이다. ROC 곡선이 가운데 직선에 가까울수록 성능이 떨어지는 것이며, 멀어질수록 성능이 뛰어나다는 것이다. 일반적으로 ROC Curve 자체는 FPR과 TPR의 변화값을 보는 데 이용하며 분류의 성능 지표로 사용되는 것은 ROC Curve 면적에 기반한 AUC 값으로 결정한다. AUC(Area Under Curve)값은 ROC Curve 밑의 면적을 구한 것으로서 일반적으로 1에 가까울수록 좋은 수치이다. AUC 수치가 커지려면 FPR이 작음 상태에서 얼마나 큰 TPR을 얻을 수 있느냐가 관건이다. 가운데 직선을 랜덤 수준의(동전 던지기 수준) 이진 분류 AUC 값으로 0.5이다. 따라서 보통의 분류는 0.5이상의 AUC값을 가지낟. TPR(민감도) = \\frac{TP}{TP+FN}TNR(특이성) = \\frac{TN}{FP+TN})FPR = 1 - TNR = \\frac{FP}{FP+TN}","categories":[{"name":"machine learning","slug":"machine-learning","permalink":"https://heung-bae-lee.github.io/categories/machine-learning/"}],"tags":[]},{"title":"Regression(02) - 다중선형회귀 및 다중공선성","slug":"machine_learning_02","date":"2020-01-08T14:22:36.000Z","updated":"2020-01-15T13:27:04.785Z","comments":true,"path":"2020/01/08/machine_learning_02/","link":"","permalink":"https://heung-bae-lee.github.io/2020/01/08/machine_learning_02/","excerpt":"","text":"다중 선형 회귀 다중회귀방정식에서 회귀계수에 대한 해석은 자주 혼동되는 것 중 하나이다. 단순회귀방정식은 직선을 표현하지만 다중회귀방정식은 평면(독립(설명)변수가 두개인 경우) 혹은 초평면(독립(설명)변수가 두개보다 많은 경우)을 표현한다. 위의 예에서 회귀계수의 해석은 다른 변수들이 고정되어 있을때 TV가 1단위 증가할 때 매출액은 0.046단위 증가한다고 해석할 수 있다. 회귀 계수 $\\beta_{j}$는 $X_{j}$를 제외한 나머지 모든 예측 변수들을 상수로 고정시킨 상태에서 $X_{j}$의 한 단위 증가에 따른 Y의 증분으로 해석될 수 있다. 변화의 크기는 다른 예측 변수들이 어떤 값으로 고정되어 있는지에 의존하지 않는다. 또 다른 해석은 $\\beta_{j}$가 다른 독립(설명)변수들에 의하여 종속(반응)변수 Y가 조정된 후에 Y에 대한 $X_{j}$의 공헌도를 의미한다. 이는 예를 들어 $Y = \\beta{0} + \\beta_{1}X_{1} + \\beta_{2}X_{2} + \\epsilon $일 때, $[Y~X_{1}로 얻은 잔차] ~ [X_{2}~X_{1}]$에서의 계수와 동일하다. Y와 $X_{2}$ 각각으로부터 $X_{1}$의 선형효과를 제거한 후 Y에 미치는 $X_{2}$의 효과를 나타내기 때문이다.다중 선형 회귀 계수 검정 단순 선형 회귀와 동일하게 각각의 회귀계수가 통계적으로 유의미한지를 검정하는 것은 동일하다. 하지만, 다중 선형 회귀는 다음과 같이 전체 회귀계수가 의미있는지에 대한 검정도 하게 된다. 여기서 회귀계수가 0에 가깝고 standard error를 더하고 뺀 범위내에 0이 포함된다면 그 변수 또한 유의미하더라도 제거해야할 것이다. 또한 여기서 잔차의 정규성이라는 가정을 만족할 때 t 통계량의 절대값이 크거나 대응되는 p-value가 더 작다면 독립(설명)변수와 종속(반응)변수 사이의 선형관계가 더 강함을 의미한다. 위에서 언급하고 있는 개별적인 회귀계수 $\\beta$에 대한 검정 이외에, 여러 가지 다른 형태의 가설들이 선형모형의 분석과 관련하여 고려될 수 있다. 통상적으로 고려될 수 있는 가설들은 다음과 같다. 1) 독립 변수의 모든 회귀 계수들이 0이다. 2) 독립 변수의 회귀 계수들 중 일부분이 0이다. 3) 회귀계수들 중 일부분이 서로 같은 값을 가진다. 4) 회귀모수들이 특정한 제약조건을 만족한다. 이런 가설들은 하나의 통합된 접근방법을 통해 동일한 방식으로 검정될 수 있다. 먼저, 모든 독립변수를 포함한 모형을 완전모형(FM)이라고 하자. 그리고 귀무가설에 가정된 내용들을 완전모형에 대입해서 얻은 모형을 축소모형(RM)이라고 하자. 완전모형의 변수들이 상대적으로 축소모형에 비해 많으므로 SSR값이 커져 잔차제곱합(SSE)을 감소시킬 것이므로 $SSE(RM) \\geq SSE(FM)$이 된다. 따라서 차이 $SSE(RM) - SSE(FM)$은 축소모형을 적합함으로써 증가하는 잔차제곱합(SSE)을 의미한다. 만약 이 차이가 크다면 축소모형은 적절하지 않다. F = \\frac{[SSE(RM) - SSE(FM) ]/(p + 1 - k)}{SSE(FM)/(n-p-1)} 위의 식을 통해 다 위에서 언급했던 가설들을 모두 검정할 수 있다. 가설 1)독립 변수의 모든 회귀 계수들이 0이다.의 귀무가설은 $H_{0}:\\beta_{1} = \\beta_{2} = \\cdots = \\beta_{p} = 0$이며 대립가설은 $H_{1}: 최소한 하나의 계수는 0이 아니다. $이다. 이 가설은 축소모형의 변수는 1개이므로 해당 모형을 fitting한 후에 나오는 분산분석표에서의 F 통계량 값을 보고 검정 할 수 있다. 가설 2)독립 변수의 회귀 계수들 중 일부분이 0이다.의 귀무가설은 $H_{0}:\\beta_{1} = \\beta_{3} = \\beta_{5} = 0 $ 이고, 대립가설은 $H_{1}:\\beta_{1}, \\beta_{3}, \\beta_{5} 중 최소한 하나는 0이 아니다. $ 이다. 이 가설은 위에서 F 통계량을 구하는 방식에 변형을 주어 생각해보면 $R^{2}$값을 통해 구할 수 있음을 알 수 있다. F = \\frac{({R_{p}}^{2}-{R_{q}}^{2})/(p-q)}{(1 - {R_{p}}^{2})/(n-p-q)}, df=(p-q,n-p-1) 여기서 주목할 점은 SST는 정해져 있어 고정되어 있는데, SSR은 변수를 추가할수록 점점 더 커지므로 귀무가설을 기각하기 더 쉬워진다는 것이며, 우리가 추후에 말할$R^{2}$값도 변수를 추가할수록 높아지므로 이값으로 모형의 성능을 평가할때 무조건 이값이 높다고 좋은 모형이라고 생각하지 않아야 한다. 또한 수정결정계수(adjusted R-squared) ${R_{adj}}^{2}$도 적합도를 평가하기 위해 사용될 수 있다. ${R_{adj}}^{2}$은 모형안에 있는 독립(설명)변수들의 수가 다르다는 것을 조정하므로 F값과 같이 서로 다른 모형들(포함된 독립변수가 다르거나 갯수가 다른)을 비교하기 위해 사용된다. 이 값은 결정계수 값과 다르게 Y의 전체 변이 중에서 독립변수들에 의하여 설명되는 비율로 해석 될 수 없다! {R_{adj}}^{2} = 1 - \\frac{SSE/(n-p-1)}{SST/(n-1)}원점을 통과하는 회귀선 일반적으로 고려되는 단순선형회귀모형은 $ Y = \\beta_{0} + \\beta_{1}X + \\epsilon $과 같이 절편항을 가지고 있다. 그러나 원점을 통과하는 다음과 같은 모형 $ Y = \\beta_{1}X + \\epsilon $ 에 데이터를 적합시킬 필요가 있을 때도 있다. 이 모형은 절편항이 없는 모형으로 불린다. 문제의 성격이나 외적 상황에 의해 회귀선이 원점을 지나야만하는 경우가 있다. 예를 들어, 시간(X)의 함수로서 여행 거리(Y)는 상수항을 가지지 않아야 한다. 이때는 SSE의 자유도가 확률 변수인 절편항이 하나 빠지므로 N-p(전체 확률변수가 설명변수p개 절편항 1개 이었던 N-p-1에서)로 바뀌게 된다. 또한 이때는 우리가 알고 있는 SST=SSR+SSE라는 공식이 더 이상 성립되지 않는다. 그러므로 $R^{2}$와 같은 절편항을 갖는 모형에 대한 몇몇 성능 평가 지표들은 절편항이 없는 모형에 대해서는 더 이상 적절하지 않다. 절편항이 없는 모형에 대한 적절한 항등식은 y의 평균을 0으로 대체함으로써 얻어진다. \\sum_{i = 1}^{n} y_{i}^{2} = \\sum_{i = 1}^{n} \\hat{y_{i}^{2}} + \\sum_{i = 1}^{n} e_{i}^{2} 그러므로 $R^{2}$ 또한 재정의 된다. R^{2} = \\frac{\\sum \\hat{ y_{i}^{2} }}{\\sum {y_{i}^{2}} = 1 - \\frac{\\sum e_{i}^{2}}{\\sum y_{i}^{2}} 절편항을 가진 모형의 경우 $R^{2}$가 Y를 그의 평균으로 조정한 후에 Y의 전체 변동성 중에서 독립(설명)변수 X에 의하여 설명되는 비율로 해석될 수 있다. 절편항이 없는 모형의 경우에는 Y에 대한 조정이 없다. 이 처럼 절편항이 없는 모형은 풀고자하는 문제와 관련된 이론 혹은 물리적 상황에 부합되는 경우에만 사용되어야만 한다! 그러나 몇몇 응용에서는 어떤 모형을 사용해야 할지가 분명하지 않을 수 있다. 이러한 경우 1) 관측값과 예측값의 가까운 정도를 측정하는 것이 잔차제곱평균이므로 두 모형에 의해 산출되는 잔차평균제곱(SSE를 각각의 모형에 대한자유도로 나눈 값)을 비교하여 평가한다. 2) 데이터 모형을 적합하고 절편항의 유의성을 검정하여(t통계량을 바탕으로) 검정이 유의하다면 절편항을 가진 모형을 사용하고 그렇지 않으면 절편항이 없는 모형을 사용한다. 그러나, 일반적으로 회귀모형에서는 상수항이 통계적으로 유의하지 않더라도, 강한 이론적 근거가 존재하지 않는다면, 상수항은 모형에 포함되어야 한다. 특히 분석에 사용되는 데이터가 원점을 포함하지 않는 경우 더욱 강조되는데 그 이유는 상수항이 종속(반응)변수의 기본적인 수준(평균)을을 나타내기 때문이다. 참고로 필자는 ANCOVA 분석 즉, 회귀식에서 설명변수들 중 질적인 변수(혹은 더미변수)가 포함되어 있어 그런 질적인 변수와 더미변수가 절편항(상수항)을 대신해줄 것이라고 착각하여 상수항을 생성하지 않고, 모형을 적합시켰던 경험이 있다. 프로젝트였는데 멘토분께서 왜 절편항을 포함하지 않았냐고 물어보보셨는데 위와 같은 답변을 했었는데 잘못된 접근법이라고 조언을 해주셨었다. 그 당시에는 이해가 가지 않았지만 이제는 나의 접근법이 말이 안된다는 것부터 깨달았다. 왜냐하면 SGD 방법으로 확률변수인 절편항과 계수항들을 업데이트해 나가는 방식으로 회귀모형을 짜는데 필자는 이미 상수항 취급을 하는 질적변수나 더미변수 자체를 절편항이라고 생각했으니 말 자체가 안되는 것이다. 모형에서 중심화(centering)와 척도화(scaling) 회귀분석에서는 회귀계수의 크기가 변수의 측정 단위에 영향을 받게 되므로 중심화와 척도화를 해야한다.예를 들어 달러 단위로 측정된 소득의 회귀계수가 5.123이라면, 소득이 1,000달러 단위로 측정 되었을때는 5123으로 바뀌게 된다. 절편항(상수항)이 있는 모형을 다룰 때는 변수에 대한 중심화와 척도화가 필요하지만, 절편이 없는 모형을 다룰 때는 변수의 척도화만 필요하다. 또한 이는 다른 선형성을 가정하는 모델(RBF kernel을 사용하는 SVM, logistic regression)에선 피처를 정규성을 띄게 해주어야하는 모형 뿐만아니라 피처 scaling을 하여 과적합을 방지하는 방법이므로 알고있어야한다. 중심화(centering) 변수는 각 관측값에서 모든 관측값의 평균을 빼는 것으로 얻어진다. 중심화된 변수 척도화 또한 가능하다. 두 가지 형태의 척도화(scaling)가 통상적으로 가능한데, 단위 길이 척도화(unit length scaling or normalization)와 표준화(Standardization)이다. 단위길이 척도화는 피처 벡터의 길이로 나누어주거나 min-max scaling 같은 것을 의미한다. 표준화는 말 그대로 편차를 표준편차로 나누어 표준정규분포를 띄게끔해주는 작업을 의미한다. 다중 공선성(Multi-collinearity) Ordinary Least Squares(OLS) 즉 최소 제곱법 기반의 회귀 계수 계산은 독립 변수(입력 피처)의 독립성에 많은 영향을 받는다. 피처간의 상관관계가 매우 높은 경우 분산이 매우 커져서 오류에 매우 민감해지며 선형대수의 관점에서 보면, 모든 컬럼들이 linearly independent해야 최소한 하나 이상의 해가 존재하기 때문이다. 만약 위의 말이 이해가 가지 않는다면, 필자가 추전하는 선형대수학 강의를 듣는 것을 권한다. 다음 페이지를 가면 찾을 수 있다. 선형대수학 강의 추천 위와 같은 다중 공선성 문제가 있을 경우, 일반적으로 상관관계가 높은 독립 변수(입력 피처)가 많은 경우 독립적인 중요한 독립 변수(입력 변수)만을 남기고 제거하거나 규제를 적용한다. 또한 매우 많은 피처가 다중 공선성 문제를 가지고 있다면 PCA를 통해 차원 축소를 수행하는 것도 고려해 볼 수 있다. 다중 공선성 검사하는 방법들 위에서 VIF가 10이상인 경우 다중공선성이 있는 변수라고 판단할 수 있다고 했는데, 그렇다면 다중공선성이 있다고 판단되는 변수를 무조건적으로 제거해야 하나라는 의문이 들 수 있을 것이다. 그에 대한 답은 무조건적으로 제거하면 안된다라는 것이다. VIF가 높더라도 통계적으로 유의미한 변수(p-value가 유의수준 보다 낮은 변수)라면 제거하지 않는 것이 적절하다. 추가적으로 다른 변수들 중에 VIF가 높고, 유의미하지 않은 변수가 있다면 그 변수들을 제거해 본 뒤 VIF를 계산해 보아야 할 것이다. 이 과정을 거쳐서도 아마도 VIF는 높은 수치이겠지만, 제거를 해서는 안된다. 다중 공선성을 검사하는 방법에는 VIF외에도 상관계수 행렬을 구해서 위와 같이 산점도와 같이 그려서 보아야한다. 상관계수는 공분산을 각각의 표준편차로 나누어준 수치인데, 공분산은 예를 들어 두 변수 X와 Y가 있다면, Y와 X 사이의 선형 관계에 대한 방향을 나타낸다. Cov(X, Y)는 측정단위의 변화에 영향을 받기 때문에 우리에게 관계의 강도가 얼마나 되는 지를 알려주지는 않고 방향만을 알려준다. 이러한 문제를 해결하기 위해 표준편차로 나누어 Standardization을 해주어 단위에 대한 영향을 없애준 것이 상관계수이다. 참고로 여기서 Corr(X, Y)=0 가 반드시 Y와 X 사이에 관계가 없음을 의미하는 것이 아님을 주의하자! 상관계수는 오직 선형 관계를 측정하기에 선형적으로 관계가 없음을 의미한다. 즉, X와 Y가 비선형적으로 관련되어 있을 때에도 Corr(X, Y)가 0이 될 수 있다.또한 상관계수도 평균과 분산과 마찬가지로 극단값에 민감하다. 그러므로 이러한 요약 통계량에만 의존하는 분석으로는 전체적인 패턴을 보는데에 있어서 차이를 발견할 수 없게 할 것이다. 따라서 필자는 개인적으로 데이터 EDA 과정에서 독립(설명)변수들과 반응 변수 사이의 관계를 꼭 산점도로 그려 확인한 뒤, 상관계수와 의미가 일치하는지 확인해보는 작업이 필수라고 여긴다. 통계를 공부하는 Beginner들이 많이들 오해할 만한 사실은 Corr(X, Y)는 한 변수의 값이 주어졌을 때 다른 변수의 값을 예측하기 위해서 사용할 수 없다. 단지 대응(pairwise)관계만 측정한다. 예측을 하고 관계를 설명하기 위해서 우리는 회귀분석을 하는 것!!!!","categories":[{"name":"machine learning","slug":"machine-learning","permalink":"https://heung-bae-lee.github.io/categories/machine-learning/"}],"tags":[]},{"title":"NLP를 공부하는데 도움되는 사이트 모음","slug":"NLP_00","date":"2020-01-07T11:57:26.000Z","updated":"2020-01-18T07:37:27.407Z","comments":true,"path":"2020/01/07/NLP_00/","link":"","permalink":"https://heung-bae-lee.github.io/2020/01/07/NLP_00/","excerpt":"","text":"자연어 처리 관련 자료 자연어 처리에 대해 공부할 수 있게 도움이 될 만한 사이트 자연어 처리 강의 딥러닝을 이용한 자연어 처리:https://www.edwith.org/deepnlp 자연어 처리 오프라인 스터디 모임 DeepNLP(모두의연구소 자연어 처리 스터디):http://www.modulabs.co.kr/information 바벨피쉬(싸이그래머 스터디) : https://www.facebook.com/groups/babelPish/ 온라인 참고 자료 스탠퍼드 자연어 처리 강의 : http://web.stanford.edu/class/cs224n Jacob Eisenstein 교수님의 자연어 처리 강의 : https://github.com/jacobeisenstein/gt-nlp-class/blob/master/notes/eisenstein-nlp-notes.pdf YSDA 자연어 처리 : https://github.com/yandexdataschool/nlp_course 조경현 교수님의 자연어 처리 강의 노트 : https://github.com/nyu-dl/NLP_DL_Lecture_Note/blob/master/lecture_note.pdf 파이썬 정규 표현식 라이브러리 re파이썬 정규 표현식 . 줄 바꿈을 제외한 모든 문자 ^ 문자열의 시작 $ 문자열의 끝 * 앞에 있는 문자가 0회 이상 반복된 문자열 + 앞에 있는 문자가 1회 이상 반복된 문자열 {m} 앞 문자를 m회 반복하는 문자열 {m, n} 앞 문자를 m~n회 반복하는 문자열 ? 앞 문자가 나오거나 나오지 않는 문자열 ({0, 1}와 동일) \\d 숫자 \\D 숫자가 아닌 문자 \\w 문자 혹은 숫자 \\W 문자 혹은 숫자가 아닌것 (…) 괄호 안의 모든 정규 표현식을 만족하는 문자 [abc] a, b, c 중 한 개의 문자와 일치 re 함수 re 라이브러리의 가장 기본적인 함수 4가지를 살펴 볼 것이다. 이 밖에도 re 라이브러리는 여러 가지 정규 표현식을 이용해 문자열을 다룰 수 있는 기능을 제공한다. re.compile(pattern) compile 함수는 특정 기호를 정규표현식 객체로 만들어준다. re 라이브러리를 사용하려면 정규표현식 패턴을 매번 작성해야하는데, 이 함수를 사용해 패턴을 컴파일하면 필요할 때마다 사용할 수 있다. 123#숫자나 문자가 아닌 것이 1회이상 반복되는 문자열pattern = ' \\W+'re_pattern = re.compile(pattern) re.search(pattern, string) search 함수는 해당 문자열에서 정규 표현식에 해당하는 첫 부분을 찾는다. 1234567# 문자나 숫자인 것이 1회 이상 반복되는 문자열# 즉, 탭, 줄바꿈, 공백이 아닌 문자를 모두 찾는 과정re.search(\"(\\w+)\"), \"wow, it is awesome\")# 결과# 범위가 (0,3), 찾은 문자는 'wow'로 그 뒤에 ,와 공백이 있으므로 그전까지의 문자를 출력&lt;_sre.SRE_Match object; span=(0,3), match='wow'&gt; re.split(pattern, string) split 함수는 해당 문자열에서 특정 패턴으로 문자열을 나눠서 리스트로 만든다. 12345# 문자 혹은 숫자가 아닌 것으로 문자열을 나눠서 리스트로 출력re.split('\\W', \"wow, it is world of word\")# 결과['wow', '', 'it', 'is', 'world', 'of', 'word'] re.sub(pattern, repl, string) 문자열에서 특정 패턴을 만족시키는 문자를 사용자가 정의한 문자(repl)로 치환한다. 12345# 숫자인 것을 number로 치환한 문자열 반환re.sub('\\d', 'number', '7 candy')# 결과'number candy' Kaggle Kaggle에서 API를 활용해서 데이터를 다운받는 방법을 소개하려고 한다. 캐글 API 연동을 위해서는 두가지 단계가 필요하다. 단 이 방법은 Local PC 환경에서의 방법이므로 Colab과 연동해서 사용하는 방법은 추가적인 작업들이 필요하다. 1conda install kaggle API가 성공적으로 설치되면 계정을 연동해야 한다. 캐글 홈페이지에서 회원가입 후 Account 탭으로 가서 ‘Create API Token’을 선택한 후 kaggle.json 파일을 내려받는다. 이 파일에는 본인의 인증서가 있고 이 파일을 다음의 위치로 이동시킨다. 12345# 윈도웅C:\\Users\\&lt;사용자명&gt;\\.kaggle# macOS, Linux$ /&lt;사용자 홈 디렉토리&gt;/.kaggle 이제 API를 활용해 데이터를 내려 받을 수 있다. 데이터를 내려받는 방법은 Data(데이터) 탭의 API 명령어를 복사한 후 커맨드 라인에서 다음과 같이 실행하면 된다. 1$ kaggle competitions download -c &lt;competition-name&gt; 데이터 목록 확인 1$ kaggle competitions files -c &lt;competition-name&gt; 데이터 제출 1kaggle competions submit &lt;competition-name&gt; -f &lt;file-name&gt; -m &lt;message&gt; 대회 목록 확인 1kaggle competition list 보다 더 자세한 기능은 캐글문서에서 확인해 보자.","categories":[{"name":"NLP","slug":"NLP","permalink":"https://heung-bae-lee.github.io/categories/NLP/"}],"tags":[]},{"title":"Regression(01) - 회귀의 종류 및 회귀계수","slug":"machine_learning_01","date":"2020-01-04T02:44:20.000Z","updated":"2020-01-15T13:15:06.113Z","comments":true,"path":"2020/01/04/machine_learning_01/","link":"","permalink":"https://heung-bae-lee.github.io/2020/01/04/machine_learning_01/","excerpt":"","text":"회귀분석이란? 지도 학습은 두 가지 유형으로 나뉘는데, 바로 분류(classification)와 회귀(regression)이다. 이 두 가지 기법의 가장 큰 차이는 분류는 예측값이 카테고리와 같은 이산형 클래스 값이고, 회귀는 연속형 숫자 값이라는 것이다. 회귀(regression)은 현대 통계학을 떠받치고 있는 주요 기중 중 하나이다. 여러분이 회귀분석시에 많이 들어봤을 예시는 부모의 키와 자식의 키에대한 예시가 있을 것이다. 부모의 키가 아주 크더라도 자식의 키가 부모보다 더 커서 세대를 이어가면서 무한정 커지는 것은 아니며, 부모의 키가 아주 작더라도 자식의 키가 부모보다 더 작아서 세대를 이어가며 무한정 작아지는 것이 아니라는 것이다. 즉, 사람의 키는 평균 키로 회귀하려는 경향을 가진다는 자연의 법칙이라는 의미이며, 회귀분석은 이처럼 데이터 값이 평균과 같은 일정한 값으로 돌아가려는 경향을 이용한 통계학 기법이다. 머신러닝 관점에서 보면 독립변수는 피처에 해당되며, 종속변수는 결정 값이다. 머신러닝 회귀 예측의 핵심은 주어진 피처와 결정 값 데이터 기반에서 학습을 통해 최적의 회귀 계수를 찾아내는 것이다. 회귀에서 가장 중요한 것은 바로 회귀 계수이다. 이 회귀 계수가 선형이나 아니냐에 따라 선형회귀와 비선형 회귀로 나눌수 있으며, 독립변수의 개수가 한개 인지 여러개인지에 따라 단일 회귀, 다중 회귀로 나뉜다. 선형(비선형)이라는 용어는 Y와 $X_{1},X_{2},…,X_{p}의 관계를 묘사하는 것이 아니라는 것에 주목하여라! 회귀계수가 방정식에 선형적(비선형적)으로 삽입되어 있다는 것과 관련이 있다. 선형 함수의 예 Y = \\beta_{0} + \\beta_{1}X_{1} + \\epsilon- `Y와 X 사이의 관계는 비선형이지만, 모수들이 선형적으로 삽입되어 있기 때문에 선형 함수` Y = \\beta_{0} + \\beta_{1}X_{1} + \\beta_{2}{X_{2}}^{2} + \\epsilonY = \\beta_{0} + \\beta_{1}\\log X_{1} + \\epsilon 비선형 함수의 예 Y = \\beta_{0} + e^{\\beta_{1}X_{1}} + \\epsilon 각 독립변수들은 양적(quantitative) 혹은 질적(qualitative)으로 분류 될 수 있다. 양적 변수의 예) : 주택 가격, 침실의 개수, 연수, 세금 등 질적 변수의 예) : 이웃의 형태(좋은 혹은 나쁜 이웃), 집의 형태(정원이있는, 고풍스러운 등) 독립변수들은 양적 질적 변수 모두 취할 수 있는데, 질적 변수들이 있다면, 계산상의 이유로 더미 변수(dummy variable)로 코딩을 해주어야 한다. 단, 질적인 변수들도 예를 들어 전문가들에 의해 이미 규정되어 신뢰성 있는 공식이나 규칙을 통해 연속적인 수치로 변환될 수 있다면 더미 변수로 만들어 주지 않고 사용해도 된다. 모든 독립변수들이 질적인 경우 분산 분석(ANOVA : analysis of variance)기법이라고 한다. 분산 분석은 그 자신의 고유한 방법으로써 소개되고 통계학부생들이 통계적 자료분석이라는 주제로 수업을 수강할때 나오는 개념으로써 설명되고 있는데 회귀분석의 특별한 경우임을 알고있어라!!!! 또한, 어떤 예측변수들이 양적이고 반면에 다른 변수들이 질적이라면, 이러한 경우의 회귀분석을 공분산분석(ANCOVA : analysis of covariance)이라고 한다. 회귀의 유형 조건 - 일변량(Univariate) - 오직 하나의 양적 독립변수(설명변수) - 다변량(Multivariate) - 두 개 이상의 양적 독립변수(설명변수) - 단순(Simple) - 오직 하나의 종속변수(반응변수) - 다중(Multiple) - 두 개 이상의 종속변수(반응변수) - 선형(Linear) - 데이터에 대하여 가능한 변환을 취한 후, 모든 계수들이 방정식에 선형적으로 삽입되어 있음. - 비선형(Nonlinear) - 종속변수(반응변수)와 일부 독립변수들의 관계가 비선형이거나 일부 계수들이 비선형적으로 나타남. 계수들을 선형적으로 나타나게 하는 어떤 변환도 가능하지 않음. - 분산분석(ANOVA) - 모든 독립변수들이 질적 변수임. - 공분산분석(ANCOVA) - 어떤 독립변수들은 양적변수이고 다른 독립변수들은 질적변수임. - 로지스틱(Logistic) - 종속변수(반응변수)가 질적변수임. 대표적인 선형 회귀 모형은 다음과 같다.일반 선형 회귀 예측값과 실제값의 잔차 제곱합을 최소화할 수 있도록 회귀 계수를 최적화하며, 규제(Regularization)를 적용하지 않은 모델이다. 릿지(Ridge) Ridge 회귀는 선형 회귀에 L2 Regularization을 추가한 모형이다. Ridge 회귀는 L2 Regularization을 적용하는데, L2 Regularization은 상대적으로 큰 회귀 계수 값의 예측 영향도를 감소 시키기 위해서 회귀 계수값을 더 작게 만드는 Regularization 모형이다. 라쏘(Lasso) Lasso 회귀는 선형 회귀에 L1 Regularization을 적용한 방식이다. L2 Regularization이 회귀 계수 값의 크기를 줄이는 데 반해, L1 Regularization은 예측 영향력이 작은 피처의 회귀계수를 0으로 만들어 회귀 예측 시 피처가 선택되지 않게 하는 것이다. 이러한 특성 때문에 L1 Regularization은 피처 선택 기능으로도 불린다. 엘라스틱넷(ElasticNet) L2, L1 Regularization을 함께 결합한 모형이다. 주로 피처가 많은 데이터 세트에서 적용되며, L1 Regularization으로 피처의 개수를 줄임과 동시에 L2 Regularization으로 계수의 값의 크기를 조정한다. 로지스틱(Logistic) 로지스틱 회귀는 회귀라는 이름이 붙어 있지만, 사실은 분류에 사용되는 선형 모형이다. 로지스틱 회귀는 매우 강력한 분류 알고리즘이다. 일반적으로 이진 분류 뿐만아니라 희소 영역의 분류, 예를 들어 텍스트 분류와 같은 영역에서 뛰어난 예측 성능을 보인다. 가정에서 잔차( $\\epsilon_{i}$ )와 target 값인 Y가 정규분포를 따른다는 것이 중요하다. 회귀 계수 추정 회귀 계수의 의미 회귀 계수의 검정","categories":[{"name":"machine learning","slug":"machine-learning","permalink":"https://heung-bae-lee.github.io/categories/machine-learning/"}],"tags":[]},{"title":"머신러닝의 개요","slug":"machine_learning_00","date":"2019-12-30T08:20:19.000Z","updated":"2020-01-08T07:45:51.536Z","comments":true,"path":"2019/12/30/machine_learning_00/","link":"","permalink":"https://heung-bae-lee.github.io/2019/12/30/machine_learning_00/","excerpt":"","text":"Machine learning Machine Learning으로 할 수 있는 것들 독립변수 반응변수 모형 고객들의 개인 정보 및 금융 관련 정보 대출 연체 여부 대출 연체자 예측 탐지 모델, 대출 연체 관련 주요 feature 추출 게임 유저들의 게임 내 활동 정보 게임 이탈 여부. 어뷰징 여부 이상 탐지 모델(anomaly detection model) 숫자 손 글씨 데이터 숫자 라벨(0~9) 숫자 이미지 분류 모델 상품 구매 고객 특성 정보 군집화를 통한 고객 특성에 따른 Segmentation Segmentation 모델 고객들의 상품 구매내역 매장내 상품 진열 위치 리뉴얼을 통한 매출 증대 쇼핑몰 페이지 검색 및 클릭 로그 기록 맞춤 상품 추천 시스템 recommendation system SNS 데이터 및 뉴스 데이터 소셜 및 사회 이슈 파악 Supervised Learning VS Unspervised Learning 머신러닝과 딥러닝이 실무에서 사용되어지는 경우에 팀의 구분을 두고 회사에서 운영하는 경우가 많지만, 서로 구분해서 공부하거나 이해하진 않았으면 좋겠다는것이 필자의 바람이다. 물론, 최근에는 딥러닝의 유행으로 대부분의 분석직군에서 딥러닝을 위한 인원을 채용하고 있긴 하지만 머신러닝또한 중요하지 않은 것이 아니면, 아직도 많은 곳에서 머신러닝 엔지니어들을 뽑고 있다. 모형의 적합성 평가 및 실험 설계 전체적인 머신러닝의 작업과정은 다음과 같다. 전처리 Raw 데이터를 모델링 할 수 있도록 데이터를 병합 및 파생 변수 생성 실험 설계 위에서 실제로 우리가 모델을 적용을 한다는 것은 예를 들어 기업에서 상용화를 한다는 가정이라는 의미이다. test정보가 Train과 validation 데이터에 없어야 한다는 점은 쉽게 비유하면 시험을 보는데 우리가 이미 학습한 내용(training data)이 시험에 똑같이 나온다면 시험을 잘 볼 확률이 높아지기 때문이다. 우리가 data를 나누었던 이유는 training data를 통해 학습된 알고리즘 모형이 학습하지 않은 새로운 데이터에서도 잘 예측할 수 있도록 하기 위한 작업이었다는 것을 잊지 말아라! 또한, validation data는 parameter들을 조절하면서 최적의 모형을 선택하기 위한 데이터셋이라고 생각하면된다. 데이터가 잘 나누어졌는지 어느 한 쪽으로 치우쳐져 있는지 확인하는 방법으로 위의 오른쪽 그래프처럼 확인 할 수도 있을 것 같다! 무조건 위에서 언급했던 k-hold cross validation으로 training data set과 validation set을 나눠서 진행하는 것이 아니고 데이터의 성격에 따라 다르게 설계를 해야한다. 예를 들면 위의 반도체 두께를 예측하는 문제에 있어서는 반도체 두께가 각 개체가 만들어지는 순서에 의해 영향을 받는다. 즉 Y2는 Y1에 의해 영향을 받고 Y3는 Y1,Y2에 의해 영향을 받는다. 그러므로 이러한 데이터의 경우에는 무작정 k-hold cross validation으로 나누어주면 안된다. Y2를 예측하는데 Y3에 관한 정보를 사용하게 되기 때문이다. 또 다른 예로는 Imbalanced data에 대해 말할 수 있을 것이다. Imbalanced data는 target variable이 말 그대로 불균형한 데이터를 의미한다. 조금이라도 불균형하면 Imbalanced datas냐는 의문이 들겠지만 그런의미가 아니라 예를들면 보험회사의 보험사기라던지, 금융사기 같이 전체 데이터에서 target variable에 해당하는 데이터가 10% 정도로 희박하게 나타나는 데이터를 의미한다. 이런 데이터에서는 먼저 처음의 비율대로 train과 validation set으로 나누어준다. 그 다음 train data에서만 resampling을 하여 model을 학습시킨후에 추후에 validation data로 예측해보는 것이다. 그러므로 그냥 k-hold가 아닌 stratified k-Fold를 통해 데이터를 train과 validation set으로 나누어 주어야한다. 모형 학습 및 선택 과적합(Overfitting) 위의 편향과 분산의 트레이드 오프 관계에 의해 우리는 둘 중 하나를 좀더 생각해야만하는 상황에 놓이게될 것이다. 그렇다면 위의 4가지 그래프 중 어떤 모형을 선택하는 것이 좋은 것인가? 나의 개인적인 생각은 모형의 분산은 적고 편향이 높은 모형 같은 경우는 치우쳐 있는 데이터에 대한 예측성능만 높고 여러 다양한 데이터에 대한 예측 성능은 낮아지기 때문에 궁극적으로 목표해야할 모형은 분산은 높지만 편향이 낮은 모형이다.","categories":[{"name":"machine learning","slug":"machine-learning","permalink":"https://heung-bae-lee.github.io/categories/machine-learning/"}],"tags":[]},{"title":"data engineering (DB에 table 만들기)","slug":"data_engineering_05","date":"2019-12-17T08:30:11.000Z","updated":"2019-12-19T05:53:45.875Z","comments":true,"path":"2019/12/17/data_engineering_05/","link":"","permalink":"https://heung-bae-lee.github.io/2019/12/17/data_engineering_05/","excerpt":"","text":"DB Table 생성123456789101112## artists에 관한 table# 이모지까지 커버 하고 싶은 경우mysql&gt; create table artists (id VARCHAR(255), name VARCHAR(255), followers INTEGER, popularity INTEGER, url VARCHAR(255), image_url VARCHAR(255), PRIMARY KEY(id)) ENGINE=InnoDB DEFAULT CHARSET='utf8mb4' COLLATE 'utfmb4_unicode_ci'# 이모지는 제외하고 문자만 커버하는 경우mysql&gt; create table artists (id VARCHAR(255), name VARCHAR(255), followers INTEGER, popularity INTEGER, url VARCHAR(255), image_url VARCHAR(255), PRIMARY KEY(id)) ENGINE=InnoDB DEFAULT CHARSET='utf8'## artist_genres에 관한 테이블mysql&gt; create table artist_genres (artist_id VARCHAR(255), genre VARCHAR(255)) ENGINE=InnoDB DEFAULT CHARSET='utf8';# 위에서 만든 artists table에 대한 info를 보고 싶은 경우mysql&gt; show create table artists; 앞으로 artist_genres 테이블에 어떤 artist의 장르가 추가된다면, 데이터를 추가해주어야 하는데 지속적으로 추가해주어야하므로 자동화를 할 것이다. 추가해 주는 값이 테이블에 이미 있는 값을 갖는 데이터가 들어온다면 무의미할 것이다. 아무런 column에 제약을 주지 않았기에 insert를 통한 데이터 추가 방식은 무의미하다. 123456789101112131415161718# 데이터 추가mysql&gt; insert into artist_genres (artist_id, genre) values ('1234', 'pop');# 테이블 확인mysql&gt; select * from artist_genre;# 데이터 추가mysql&gt; insert into artist_genres (artist_id, genre) values ('1234', 'pop');# 테이블 확인mysql&gt; select * from artist_genre;# 테이블 값만 삭제mysql&gt; delete from artist_genres;# 테이블 자체를 삭제# 실무에서는 drop은 잘 사용하지 않고, Alter를 사용한다.mysql&gt; drop table artist_genres; 앞에서 말한 추후에 데이터 입력시 동일한 데이터를 계속 추가하는 문제를 방지하기 위해 column에 unique key 속성을 추가해 주었다. 이전의 방법과 동일하게 추가했을 경우 insert into구문은 오류를 발생하여서 추가 데이터를 저장하진 않지만, Python script가 도중에 멈추게 되는 문제가 생긴다는 점을 확인 할 수 있다. 12345678910111213141516# Unique key 속성 부여mysql&gt; create table artist_genres (artist_id VARCHAR(255), genre VARCHAR(255), unique key(artist_id, genre)) ENGINE=InnoDB DEFAULT CHARSET='utf8';# 속성 추가 확인mysql&gt; show create table artist_genres;# 데이터 추가mysql&gt; insert into artist_genres (artist_id, genre) values ('1234', 'pop');# 데이터 확인mysql&gt; select * from artist_genres;# 데이터 추가mysql&gt; insert into artist_genres (artist_id, genre) values ('1234', 'pop');ERROR 1062 (23000): Duplicate entry '1234-pop' for key 'artist_id' insert into 구문 대신 update set 구문을 사용해보았다. 우선 키값이 있기 때문에 중복되는 값이 저장되지는 않는다. update set 구문은 NULL데이터를 가지고 있었다면 변경되지 않는다는 문제점이 있다. replace into 구문을 통해 값이 변경되기 했지만 성능적인 측면에서, 데이터가 많을땐 먼저 키값이 있는지 찾고, 존재한다면 지금처럼 그 행을 지우고 새로운 행으로 바꿔준다. 또한, primary_key auto_increment를 통해 설정되어있던 테이블이라면 원래 primary_key로 인해 부여 받은 값이 아닌 새로운 값을 부여받게된다는 문제점이 있다. on duplicate key update를 통해 문제점을 해결 할 수 있다! 123456789101112131415161718192021222324252627282930313233343536# 데이터 추가mysql&gt; update artist_genres set genre='pop' where artist_id='1234';# columns 추가mysql&gt; alter table artist_genres add column country VARCHAR(255);# update 되는 시점을 갖는 column 추가# 자동적으로 데이터가 추가 될때마다 그 시점이 저장됨mysql&gt; alter table artist_genres add column updated_at timestamp default current_timestamp on update current_timestamp;# 동일한 키값을 갖는 데이터가 이미 존재하므로 오류를 방생시킴.mysql&gt; INSERT INTO artist_genres (artist_id, genre, country) VALUES ('1234', 'pop', 'UK');# replace into 구문을 통해 값이 변경되기 했지만 성능적인 측면에서, 데이터가 많을땐 먼저 키값이 있는지 찾고, 존재한다면 지금처럼 그 행을 지우고 새로운 행으로 바꿔준다.mysql&gt; REPLACE INTO artist_genres (artist_id, genre, country) VALUES ('1234', 'pop', 'UK');Query OK, 2 rows affected (0.28 sec)# 위에서 replace into 구문을 통해 값이 변경되었음을 확인 할 수 있다.mysql&gt; select * from artist_genres;# artist_id, genre가 Unique key인데 두 컬럼을 동시에 동일한 값을 갖는 row가 없으므로 새로 추가 해준다.mysql&gt; REPLACE INTO artist_genres (artist_id, genre, country) VALUES ('1234', 'rock', 'UK');mysql&gt; select * from artist_genres;# 말 그대로 동일한 키값이 있으면 그냥 insert into 구문은 오류를 발생시켰지만, insert ignore into 구문은 오류를 발생시키지 않고 무시한다.mysql&gt; insert ignore into artist_genres (artist_id, genre, country) VALUES ('1234', 'rock', 'FR');mysql&gt; select * from artist_genres;# on duplicate key updatemysql&gt; insert into artist_genres (artist_id, genre, country) values ('1234', 'rock', 'FR') on duplicate key update artist_id='1234', genre='rock', country='FR'# 우리가 입의로 넣어 주었던 country는 지워줄 것이다.mysql&gt; alter table artist_genres drop column country; 결론은 다음 구문을 query문으로 사용하겠다는 것이다.1mysql&gt; insert into artist_genres (artist_id, genre, country) values ('1234', 'rock', 'FR') on duplicate key update artist_id='1234', genre='rock', country='FR' 결과 이미지 python script를 짜고 추후에 script를 실행하여 바로 RDS에 저장하고 table이 제대로 생성됬는지 확인하였다.","categories":[{"name":"data engineering","slug":"data-engineering","permalink":"https://heung-bae-lee.github.io/categories/data-engineering/"}],"tags":[]},{"title":"data engineering (AWS로 DB 만들기)","slug":"data_engineering_04","date":"2019-12-15T06:16:36.000Z","updated":"2019-12-30T08:20:06.924Z","comments":true,"path":"2019/12/15/data_engineering_04/","link":"","permalink":"https://heung-bae-lee.github.io/2019/12/15/data_engineering_04/","excerpt":"","text":"AWS RDB 만들기 Spotify data를 크롤링 하고난 후에 AWS RDB에 저장하기 위해서 먼저 DB를 만들어 줄 것이다.Youtube 초보자를 위한 AWS 시작하기! AWS RDS 생성 개발자나 필자 처럼 데이터를 분석하는 분들을 제외한 아마 Amazon이라는 단어를 듣게 된다면, 물건을 사고파는 뭐 그런 웹사이트 페이지를 떠올리는 분들이 많을 것이다. 허나, Amazon Web Service(AWS)는 Amazon의 그런 이미지와는 다르다. Cloud Service를 제공해주는 것이다. 우선 가입을 해야한다. 참고로 대학생인 분들은 AWS educate로 가입하면 Credit을 받는 방법이 있는데, 뭐 꼭 현재 재학중이지 않아도 자신의 대학교 이메일로 인증이 가능하다면 AWS Educate에 Student신분으로 가입이 가능하다. 만약 대학생이 아닌 분들은 그냥 AWS(AWS와 AWS educate는 다르다.)를 가입해서 사용하면 된다. 참고로 1년 동안은 어느정도 free tier를 주어서 몇몇 서비스들은 무료로 오래 이용가능할 것이다. 필자도 작년 이용했었는데 기간이 만료되어 이번에 다시 다른 계정을 만들었는데, 새로운 계정을 만들면 또 free tier 이용이 가능한 것 같다.(개인적인 생각이지만 아마도 가입시에 적는 신용카드 번호가 다른 것이면 가능한듯 하다.) 또한, 가입시에 적는 신용카드는 결제 카드로 설정되며 free tier로 이용하는 것을 제외한 다른 이용료를 결제할 수 있다. 물론, 자동결제는 아니고 자신이 결제해줘야 하며, 결제를 해주지 않는다면 휴면 계정으로 전환시켜 서비스 이용이 불가능하다.(처음 결제되는 $1는 결제가 되는 카드인지 확인하는 확인용으로 알고있는데 나중에 결제 취소 해주므로 걱정하지 않아도 된다.) 다음의 서비스 중에 우선 RDM을 생성해 줄 것이다. step 1) Create database를 클릭, method에서 직접 Customize하려면 Standard를 체크!(easy 방법은 이미 Instancd Size와 ram 등 사양들을 AWS Image처럼 만들어 놓은 형태로 되어있다.) 또한, Python을 통해 사용할 것이므로 MySQL로 만들 것이다. version은 제일 stable한 5.7.22 version을 선택! Templete은 Free-Tier를 선택! 만약 바로 실무에서 사용해야 한다면 Production을 사용하면 된다. 필자는 연습용으로 만드는 것이므로 Free를 선택 !!! DB instance identifier는 DB의 이름이고, 그 아래 Credentials Settings의 Master username은 DB 접속시 Master 권한을 인증할 ID와 password이다. 아래로 내려 갈수록 저사양 DB이며, 아마 필자와 동일하게 Free-Tier를 선택했다면, 이미 맨 아래 단계로 설정 되어있을 것이다. Free-Tier의 경우에는 다른 사양을 선택할 수 없다. Storage type General Purpose : 주로 저장할 때 사용 Provisioned IOPS(Input Output Per Second): 데이터의 입출력을 빠르게 접근할 수 있게 해야할 경우 사용 Storage autoscaling Enable storage autoscaling은 할당한 자원이 초과되어 다른 여유자원이 있다면, 자동으로 여유자원을 가져와 사용할 수 있게끔해주는 설정이다. 아래에 있는 설정 사항들은 모두 기본값을 설정했다. 이제 맨 아래로 가서 생성을 클릭하면 된다. 참고) Multi-AZ deployment 접속하는 User의 지역에 상관없이 동일하게 Performance를 내도록 할 때 사용 왼쪽의 Database 탭을 클릭하면, 다음과 같이 본인의 DB에 대한 창이 나올 것이다. 아직 생성중일 것이다. 우선, 본인의 DB명을 클릭하자. Connectivity &amp; Security 탭을 살펴보면 Public accessibility가 No로 되어있을 텐데 이것을 Yes로 설정을 바꿔주어야 접속이 가능하다. 아래 Connectivity &amp; Security 탭에서 Security의 빨간네모칸 부분을 누르면 앞으로 DB에 접속이 가능한 프로토콜 설정하거나 관리할 수 있는 페이지로 이동한다. edit 버튼을 눌러 DB에 connect 할 때 접속가능한 프로토콜을 설정해준다. MySQL로 접속이 가능하게끔 설정을 추가해주고 저장한다. 다시 Database 탭으로 돌아가면, 아마도 여러분의 DB가 만들어졌을 것이다. Command Line으로 DB 접속하기command 도움말을 먼저 확인하여 접속시 필요한 옵션들을 알아보자.1mysql --help 접속시에 필요한 간단한 옵션들은 다음과 같다. -h, —host=name =&gt; Connect to host. -p,—password[=name] =&gt; Password to use when connecting to server. If password is not given it’s asked from the tty. -P, —port=# =&gt; Port number to use for connection or 0 for default to, in order of preference, my.cnf, $MYSQL_TCP_PORT, /etc/services, built-in default (3306). -u, —user=name =&gt; User for login if not current user. 접속!! -p 옵션까지만 치면 password를 입력하라고 할 텐데, 입력하면 접속이 된다. 123mysql -h end-point -P 3306 -u userId -pshow databases;","categories":[{"name":"data engineering","slug":"data-engineering","permalink":"https://heung-bae-lee.github.io/categories/data-engineering/"}],"tags":[]},{"title":"선형 대수 공부할 때 도움되는 사이트","slug":"linear_algebra_00","date":"2019-12-14T07:24:18.000Z","updated":"2019-12-17T01:20:31.153Z","comments":true,"path":"2019/12/14/linear_algebra_00/","link":"","permalink":"https://heung-bae-lee.github.io/2019/12/14/linear_algebra_00/","excerpt":"","text":"기초 선형 대수 공부할 때 도움되는 사이트 아래의 설명들은 사이트들에 대한 주관적인 의견이므로, 개인마다 차이가 있을 것이다. 선형대수 cheat sheet 엄청 기본적인 개념들을 모르는 분들께만 추천 칸 아카데미 기본적인 개념부터 시작해서 그래프를 통해 기하학적인 부분을 많이 보여주는 강의. Gilbert Strang 교수님 강의 기본적인 개념부터 차근차근 그리고 조금은 직관적으로 선형대수를 공부하고 싶다면 추천 한양대 이상화 교수님 선형대수 강의(Kocw) 개인적으로 이 강의를 제일 먼저 접하게 되었었고, 추후에 길버트 교수님의 강의와 비교하면 개념에 대한 설명이 좀 더 공학적이지만, 예시를 통한 설명으로 극복이 가능하다. 필자는 머리가 뛰어난 편은 아니어서 처음 들었을 땐 솔직히 노트에 적으면서 공부했어도 이해를 하지 못했으나, 두번째 들으면서 각 개념들의 연결고리를 생각하고 이해하며 듣게되어 훨씬 좋았다. CS231n Numpy tutorial 기본 개념을 조금은 익힌 후 Python을 통해 실습해 보고 싶은 분들께 추천 인공지능을 위한 선형대수 in edwith 위의 개념을 위주로 한 강의를 들은 후에 복습차원에서 빠르게 듣는 것을 추천한다. 개념에 대한 설명이 부족한 강의는 절대적으로 아니지만 위의 개념적인 강의를 들으면서 스스로 먼저 생각하고 고민한 뒤에 이 강의를 수강하면 더 효과적일 것 이다. 또한 중간 중간 Python에 의한 실습도 제공한다.","categories":[{"name":"linear algebra","slug":"linear-algebra","permalink":"https://heung-bae-lee.github.io/categories/linear-algebra/"}],"tags":[]},{"title":"추천시스템(Recommendation System)","slug":"Recommendation_System_00","date":"2019-12-14T02:34:02.000Z","updated":"2019-12-15T05:43:25.915Z","comments":true,"path":"2019/12/14/Recommendation_System_00/","link":"","permalink":"https://heung-bae-lee.github.io/2019/12/14/Recommendation_System_00/","excerpt":"","text":"1) 추천 시스템(Recommendation System)이란?위키백과의 정의를 통해 먼저 정리해보자! 정보 필터링 (IF) 기술의 일종 특정 사용자가 관심을 가질만한 정보 (영화, 음악, 책, 뉴스, 이미지, 웹 페이지 등)를 추천하는 것 ㄴ.종류(Different Types of Recommendation Engines) :1) 협업 필터링 기법(Collaborative filtering) 기본적인 가정이 과거에 동의한 사람들이 미래에도 동의하고 그들이 과거에 좋아했던 것들을 좋아할 것이라는 가정을 바탕으로 다른 사용자와의 비슷함에 기초를 두고 사용자들이 무엇을 좋아할 지를 예측하는 것에 기초에 두고 있다. Linkedin, facebook과 같은 SNS는 collaboprative filtering을 친구 추천 등에 사용한다. 가장 큰 장점인 machine analyzable content에 의존하고 있지 않다는 점으로 인해 정확하게 item 그 자체를 이해하지 않고도 영화와 같은 복잡한 item들을 추천 할 수 있다. 주로 사용되는 알고리즘 : KNN, Pearson Correlation 모델을 만들 때, feature는 Explicit하거나 Implicit한 data collection 사이에서 만들어진다. Explicit data collection의 예 사용자에게 item을 평가하게하기, 검색하게 하기, 가장 선호하는 것과 가장 덜 선호하는 것을 순위매기게 하기 등 Implicit data collection의 예 사용자가 본 item을 관찰하고 분석하기, 사용자가 구매한 item을 기록하기, 사용자의 SNS를 분석하고 비슷한 likes와 dislike를 찾아내기! 2) 컨텐츠 기반 필터링(Content-based filtering) Keyword(item을 설명(describe)하는데 사용함.), Profile(사용자가 좋아하는 type의 item을 가리키게(indicate) 만들어짐.)을 통해 과거에 사용자자가 좋아했던 것들 (또는 현재 보고 있는 것들)과 비슷한 items을 추천하려고 한다. 다양한 후보 items는 사용자에 의해 평가되는(rated) items와 비교되고 그 중 best-matching items를 추천한다. Pandora Radio는 첫 seed와 같이 사용자에 의해 제공된 노래와 비슷한 특징의 음악을 재생해 주는 content-based recommendation System이다. 이 접근법은 집합적 정보로부터 원하는 내용이나 관련된 내용을 가져오는 Inforamtion retrieval과 필요없는 정보를 제거하는 Information filtering에 뿌리를 두고 있다. Items의 특징(Keyword)을 끌어내기 위해 TF-IDF(Term frequency-inverse document frequency)를 사용한다 User의 profil을 만들기 위해서, 그 시스템은 대게 두가지 정보에 집중한다. 1) 사용자의 선호의 model 2) 추천시스템과 사용자의 상호작용 정보(history) 기본적으로 이런 방법들은 시스템 안에서 item에 특성을 부여하면서 item profile(이산적 feature와 attributes)을 사용한다. 그 시스템은 item 특성의 weighted vector을 기반으로 한 사용자의 content-based profile을 만든다. Weights는 사용자에게 각각의 feature의 중요도를 나타내고 개별적으로 점수 매겨진(rated) content vector로 부터 다양한 방법으로 계산될 수 있다. 사용자가 좋아할 것 같 확률을 계산하기 위해 복잡한 방법들(베이지안 분류, 클러스터 분석, 결정트리, 그리고 인공 신경망 네트워크왁 같은 머신러닝 기술을 사용하는 반면에, 간단한 접근법들은 그 점수 매겨진 item vector의 평균 값을 사용한다. 보통 ‘좋아요’와 ‘싫어요’와 같은 형태로 사용자로부터 직접적인 피드백은 특정한 속성(attribute)의 중요도에 대한 더 높거나 낮은 weight를 할당하는데 사용될 수 있다. Content-based filtering의 중요한 문제점은, 하나의 content source에 관련된 사용자들 행동으로부터 사용자 선호도를 배울 수 있고 다른 content 종류(type)에 대해서도 배운 사용자 선호도들을 적용시킬 수 있는지에 대한 여부이다. 그 시스템이 다른 서비스의 다른 종류의 content를 추천할 수 있는 것보다 사용자가 이미 사용한 것과 같은 종류의 content를 추천하는 것에 한정돼 있다면 해당 추천 시스템의 가치는 상당히 낮을 것이다. 예를 들어, news browsing에 기반한 추천 뉴스 기사는 유용하지만, news browsing에 기반해 추천될 수 있는 다른 서비스의 음악, 비디오, 제품 토론에서 더 유용하다. 참고) TF-IDF 정보검색과 텍스트 마이닝에서 이용하는 가중치로, 여러 문서로 이루어진 문서군이 있을 때 어떤 단어가 특정 문서 내에서 얼마나 중요한 것인지를 나타내는 통계적 수치이다. 문서의 핵심어를 추출하거나 검색엔진에서 검색 결과의 순위를 결정하거나,문서들 사이의 비슷한 정도를 구하는 등의 용도로 사용할 수 있다. IDF 값은 문서군의 성격에 따라 결정된다. 예를 들어, ‘원자’라는 낱말은 일반적으로 문서들 사이에서는 잘 나오지 않기 때문에 IDF 값이 높아지고 문서의 핵심어가 될 수 있지만, 원자에 대한 문서를 모아놓은 문서군의 경우 이 낱말은 상투어가 되어 각 문서들을 세분화하여 구분할 수 있는 다른 낱말들이 높은 가중치를 얻게 된다. 특정 문서 내에서 단어 빈도가 높을수록, 그리고 전체 문서들 중 그 단어를 포함한 문서가 적을수록 TF-IDF값이 높아진다. 따라서 이 값을 이용하면 모든 문서에 흔하게 나타나는 단어를 걸러내는 효과를 얻을 수 있다. IDF의 로그 함수값은 항상 1이상이므로, IDF값과 TF-IDF값을 항상 0 이상이 된다. 특정 단어를 포함하는 문서들이 많을 수록 로그 함수 안의 값이 1에 가까워지게 되고, 이 경우 IDF값과 TF-ID값은 0에 가까워지게 된다. TF-IDF = TF \\times IDF TF(Term Frequency, 단어 빈도) 특정한 단어가 문서 내에 얼마나 자주 등장하는지를 나타내는 값 산출 방식 ㄴ. TF :tf(t, d) = f(t, d) (f(t, d) : 문서 d 내에서 단어 t의 총 빈도) ㄴ. Boolean TF :tf(t, d) = t가 d에 한 번이라도 나타나면 1, 아니명 0 ㄴ. log scale TF :tf(t, d) = \\log(f(t, d) +1) ㄴ. 증가 빈도 TF : 일반적으로는 문서의 길이가 상대적으로 길 경우, 단어 빈도값을 조정하기 위해 사용 tf(t, d) = 0.5 + \\frac{0.5 \\times f(t, d)}{max{f(w, d) : w \\in d}} = 0.5 + \\frac{0.5 \\times target 단어에 대한 TF}{동일 문서(문장)내에서의 최빈단어의 빈도수} IDF(Inverse Document Frequency, 역문서 빈도) TF 값이 높을 수록 문서에서 중요하다고 생각될 수도 있지만 단순히 흔하게 등장하는 것일 수도 있다. 이값을 DF(Document Frequency, 문서 빈도)라고한다. 영어문장에서 예를 들자면 가령 I, you 같은 단어들을 예로 들 수 있을 것이다. DF의 역수를 IDF(Inverse Document Frequency, 역문서 빈도)라고 한다. 한 단어가 문서 집합 전체에서 얼마나 공통적으로 나타나는지를 나타내는 값 IDF 값은 문서군의 성격에 따라 결정된다. 예를 들어, ‘원자’라는 낱말은 일반적으로 문서들 사이에서는 잘 나오지 않기 때문에 IDF 값이 높아지고 문서의 핵심어가 될 수 있지만, 원자에 대한 문서를 모아놓은 문서군의 경우 이 낱말은 상투어가 되어 각 문서들을 세분화하여 구분할 수 있는 다른 낱말들이 높은 가중치를 얻게 된다. 산출 방식 $ \\mid D \\mid$ : 문서 집합 D의 크기, 또는 전체 문서의 수 $ \\mid d \\in D : t \\in d \\mid$ : 단어 t가 포함된 문서의 수(즉, $tf(t,0) \\neq 0$). 단어가 전체 말뭉치(Corpus)안에 존재하지 않을 경우 이는 분모가 0이 되는 결과를 가져온다. 이를 방지하기 위해 $1 + \\mid d \\in D : t \\in d \\mid $로 쓰는 것이 일반적이다. idf(t, D) = \\log \\frac{ \\mid D \\mid}{ \\mid d \\in D : t \\in d \\mid} = \\log \\frac{전체 문서의 수}{해당 Target단어를 포함한 문서의 수}3) Hybrid Recommendation Systems 위의 2가지 Recommendation System들은 각각의 장점과 단점이 존재함을 살펴보았다. 그래서 최근 연구는 Collaborative filtering과 content-based filtering을 섞은 Hybrid 접근법이 몇몇의 상황(Cold start(충분한 정보가 없어서 필요한 정보를 얻지 못하는 것)) Sparsity)에서 더 효과적일 수 있다고 설명한다. Hybrid 추천 시스템이란 용어는 아래의 각 시스템별 단점들을 보완하기 위해 다중의 추천 기술을 함께 섞는 어떠한 추천 시스템을 의미하며 다중의 추천 기술이 내포하고 있는 의미는 동일한 기술을 여러개 겹치는 것도 포함된다. Collaborative 이 시스템은 다른 사용자들과 items에 대한 profiles을 평가하는 정보만 사용하면서 추천을 한다. 이 시스템은 현재의 사용자나 items과 비슷한 평가 기록(history)와 함께 비슷한(peer) 사용자 또는 items을 배치하고, 이 근접이웃(neighborhood)를 이요해서 추천을 만든다. 사용자 기반과 item기반의 가장 가까운 이웃 알고리즘은 cold-start문제를 해결하기 위해 합쳐질 수 있고 추천 결과를 향상시킬 수 있다. Content-based 이 시스템은 사용자가 그들에게 준 평가와 제품들과 관련된 특징이라는 두가지 Sources로부터 추천을 만든다. Content-based 추천자는 추천을 user-specific 분류 문제처럼 다루고 제품의 특징에 기반한 사용자의 좋아요와 싫어요의 분류자를 학습한다. Demographic Demographic(인구 통계학적) 추천은 사용자의 인구통계학적 정보(profile)를 기반으로 추천을 제공한다. 추천된 제품은 그 영역의 사용자들의 평가들을 합침으로써 다른 인구통계학적 영역을 위해 만들어 질 수 있다. Knowledge-based 이 추천자는 사용자의 선호와 요구(needs)에 대한 추론을 기반으로 한 제품을 제안한다. 이 지식(knowledge)는 때때로 얼마나 특정한 제품 특징이 사용자의 요구를 충족시키는 지에 대한 뚜렷한 기능적(functional) 지식을 포함한다. Netflix는 Hybrid 추천 시스템의 좋은 예이다. 사용자가 높게 평가했던(Content-based)영화와 비슷한 feature를 띄는 영화를 추천하고, 비슷한 사용자(collaborate)들의 검색 습관과 시청을 비교함으로서 추천을 한다. 정확도를 넘어서전형적으로, 추천 시스템에 대한 연구는 가장 정확한 추천 알고리즘을 찾는 것에 관심을 둔다. 하지만, 많은 중요한 요소들이 있다. Diversity 사용자들은 자신이 선택한 Item과 유사성이 높은 intra-list에 포함된 다른 아티스들을 보이는 다양성을 갖춘 추천 시스템에 더 만족하는 경향을 보인다. Recommender persistence 어떤 상황에서, 추천시스템이 그 이전의 추천과 동일한 추천을 다시 보여주거나 사용자가 다시 items을 평가하게 하는 것이 더 효과적이다. Privacy 추천 시스템은 대게 privacy 문제를 해결해야 한다. 왜냐하면 사용자들은 민감한 정보를 공개해야하기 때문이다. Collaborative filtering을 사용해 사용자의 Profiles을 만드는 것은 privacy의 관점에서 문제가 될 수 있다. 많은 유럽 국가들은 data privacy에 대한 강한 문화를 가지고 있고, 사용자의 profile을 만드는 어떠한 단계를 소개하려는 시도는 부정적인 사용자 반응을 초래할 수 있다. 실제로 Netflix는 데이터 대회를 통해 데이터를 공개했다가 비식별화된 데이터와 다른 데이터를 연결함을써 개인을 식별할 수 있게 됨을 확인했고, 고소까지 당했었다. 그 이외의 주의사항 참고 문헌 및 사이트 웹 사이트 잔재미 코딩 leebaro blog svd의 활용에 관한 darkpgmr님의 블로그 NMF 알고리즘을 이용한 유사한 문서검색과 구현 Python을 이용한 행렬의 분해 예제 naver 검색엔진 추천시스템 airs개발기(2017 Deview) Movie recommendation system 예시 sanghyukchun님의 github blog(Recommendation System) 추천시스템을 위한 Deep learning 문헌 Building Recommendation Engines Recommender Systems in E-CommerceJ. Ben Schafer, Joseph Konstan, John Riedl State of the Art Recommender System. Laurent Candillier, Kris Jack Recommender Systems in E-Commerce. Sanjeevan Sivapalan, Alireza Sadeghian A Survey of e-Commerce Recommender Systems Farida Karimova, PhD Low-Rank Matrix Completion (2013) by Ryan Kennedy Exact Matrix Completion via Convex Optimization Emmanuel J. Cand`es","categories":[{"name":"Recommendation System","slug":"Recommendation-System","permalink":"https://heung-bae-lee.github.io/categories/Recommendation-System/"}],"tags":[]},{"title":"data engineering (API는 무엇인가?!?)","slug":"data_engineering_03","date":"2019-12-13T04:25:42.000Z","updated":"2019-12-17T07:06:18.224Z","comments":true,"path":"2019/12/13/data_engineering_03/","link":"","permalink":"https://heung-bae-lee.github.io/2019/12/13/data_engineering_03/","excerpt":"","text":"REST API의 정의와 예제들API(Application Programming Interface) 두 개의 시스템이 서로 상호 작용하기 위한 인터페이스 데이터를 주고 받는 인터페이스 API라고 하면 보통 REST API를 지칭 웹사이트는 HTTP(S)프로토콜을 사용하는 REST API 기반으로 구축 API 접근 권한Authentication VS Authorization Authentication : Identity(정체)가 맞다는 증명 Authorization : API를 통한 어떠한 액션을 허용 API가 Authentication으로 하여도 어떠한 액션에 대해서는 Authorization을 혀용하지 않을 수 있음API의 필수는 첫째도 둘째도 Security 어떠한 Security 방안이 없을 경우 DELETE request를 통해서 다른 이용자의 정보를 지울 수도 있음 제 3자에게 데이터 유출로 이어질 수 있음 누가 API를 사용하는지, 어떤 정보를 가져가는지 트래킹 할 수가 없음 API Key란 무엇인가? API Key란 보통 Request URL혹은 Request 헤더에 포함되는 긴 String Basic Auth OAuth 2.0 설명하자면 Web API는 우리가 직접 어떤 Action을 하는 것이기 때문에 해당 Web에만 접근 권한을 받으면 되지만, 그와는 다르게 어떤 Action을 취할 Web을 다른 앱에게 접근 권한을 주어 End User인 우리 대신 정보를 제공하게 해주는 방식이다. 예를 듬면 우리가 어떤 서비스를 가입하려고 할때 SNS로 가입이 가능하게 할 수 있는 접근 권한 방식이라고 할 수 있다. Endpoints &amp; Methods Resource는 API를 통해 리턴된 정보이며, 하나의 Resource 안에 여러개의 Endpoints가 존재한다. Parameters Parameters는 Endpoint를 통해 Requests 할때 같이 전달하는 옵션들 Request Body안에 포함되는 Parameter들은 post 방식에서 주로 많이 사용한다. Spotify 필자의 프로젝트의 주된 data를 제공받을 Spotify를 먼저 소개하기 전에, 왜 국내의 Melon과 Genie를 택하지 않았는지를 말하려고 한다. SK플래닛이 2012년부터 운영하던 개발자센터 내 오픈 API 서비스를 2018년 3월부터 중단한다고 발표함으로써 Melon의 API 서비스를 시기적으로 사용하지 못하게 되었으며, Genie 또한 API 서비스를 더 이상 제공하지 않고 있다. 단순히 곡명과 아티스트명, 해당 곡에 대한 댓글등 이런 것들은 Selenium이나 그냥 기본적인 requests 모듈을 통해 가능하지만, 이번 토이 프로젝트의 목표는 Spotify API를 통하여 엔터티간의 관계를 내가 직접 설계해 보고 이미 만들어 있긴 하지만 각 곡들의 특징을 수치적으로 분류해 놓은 특징들로 유사도를 계산하여 User에게 추천하는 Facebook 앱을 만들어 보고 싶어서이다. 그렇다면, Spotify는 무엇인가? 스포티파이는 프리웨어이다. 본래에는 무료로 이용하면 시간 제한이 있었으나, 2014년 폐지되었다. 스포티파이는 Spotify 웹사이트에서 바로 다운받을 수 있다. 제공되는 곡들은 음반사들이 라이선스하여 합법적으로 제공한 것이다. 하지만, 사용자가 한 달 9.99 유로의 서비스 사용료를 내지 않는다면, 소프트웨어 상에 광고가 표시되며, 곡과 곡 사이에 광고가 삽입된다. 가입자가 서비스 사용료를 냈다면, 가입자는 자동적으로 “프리미엄 사용자” 상태가 된다. 프리미엄 사용자들은 특별히 뉴스나 프리뷰를 들을 수 있다. 또한 developer API를 제공함으로써, API 사용법에 대한 상세한 설명이 있다.Spotify developer앞으로 이 사이트에 있는 API 사용법을 활용하여 데이터를 crawling한 후에 RDS에 저장할 것이다. Spotify for Developers API를 사용하기 위해서는 접근 권한이 있는 Access ID와 password를 발급받아야 하므로 먼저, APP을 만들것이다. 위의 탭란에서 DashBoard를 클릭해보면 다음과 같은 페이지로 이동할 것이다. login이 필요하므로 먼저 가입을 해야 할 것이다. 옆에 있는 Sign up for free Spotify account here 버튼을 눌러 필자가 사용할 Access 방법은 위에서 언급했던 Oauth 2.0을 활용한 방식은 아니고, 그냥 Access ID와 Password를 발급받은 후 Access하는 방식을 택했다. 약간의 주의사항은 발급받은 후 1시간 경과 후에는 Password를 재발급받은 후 사용하여야 한다. 여기서 문제가 생겼다. 국제적인 서비스여서 국내에서도 이용 제한이 없을 것이라고 생각했지만, 국내에서는 서비스를 아직 하지 않고 있다한다……. 결국 방법을 찾아보다 VPN을 사용하여 우회한 후에 가입을 하면 서비스 이용이 가능하다는 사실을 알게 되었고, VPN을 이용하여 가입하였다. 가입한 후에 Application을 등록해보자. App의 이름과 설명 개발 용도를 입력해주는데, App 개발 용도는 미정이므로 모른다고 설정했다. 다 만들어 졌다면, 다음과 같이 새로운 앱이 생성되었음을 확인 할 수 있다. 우리가 API에 접근할 때 필요한 ID와 password 정보를 보려면 앱을 클릭하면 확인 할 수 있다. password는 hide되어있는데 hide를 풀면 볼 수 있다. 1시간 마다 password는 reset해서 사용해야한다. API를 사용법을 통해 결과적으로 만들 ERD(Entity Relationship Diagram)는 다음과 같다.","categories":[{"name":"data engineering","slug":"data-engineering","permalink":"https://heung-bae-lee.github.io/categories/data-engineering/"}],"tags":[]},{"title":"Basic ConvNN(VGG-16모방한 기본)구현","slug":"deep_learning_05","date":"2019-12-13T03:58:02.000Z","updated":"2020-01-12T16:26:13.503Z","comments":true,"path":"2019/12/13/deep_learning_05/","link":"","permalink":"https://heung-bae-lee.github.io/2019/12/13/deep_learning_05/","excerpt":"","text":"Basic ConvNN 구현 참고로 저는 mac을 사용하기에 local에서말고 GPU를 사용하게끔 Google Colab을 사용하였다. 제가 구현한 방식은 tensorflow 2.0 version이므로(tf.function을 사용하느라) colab의 tensorflow의 version이 뭔지 먼저 확인했습니다. 1.15 version이어서 2.0으로 설치를 진행한 후 코드를 실행하였습니다. 참고로 2.0으로 설치하고 난 후에는 꼭 반드시 런타임을 재시작 해주셔야 업데이트 한 2.0 version으로 사용하실 수 있습니다. 123import tensorflow as tfimport numpy as npprint(tf.__version__) 런타임 재시작 후1!pip install tensorflow==2.0.0-beta1 기본 합성곱 신경망 구현12import tensorflow as tfimport numpy as np 하이퍼 파라미터1EPOCHS = 10 참고로 conv layer을 통과한 출력의 dimension을 계산하는 것은 다음과 같다.padding : 2N+1 = kernel_size(Filter_size)로 N을 구한다.output dimension :\\frac{input\\hspace{0.1cm} size + (padding\\hspace{0.1cm} size * 2) - filter\\hspace{0.1cm}size}{strid} + 1모델 정의123456789101112131415161718192021222324252627282930313233class ConvNet(tf.keras.Model): def __init__(self): super(ConvNet, self).__init__() self.sequence = [] conv2d = tf.keras.layers.Conv2D max_pool = tf.keras.layers.MaxPool2D flatten = tf.keras.layers.Flatten # filters = 16 (출력되는 channel의 수) # kernel_size = 3 * 3 # padding의 default값인 'valid'는 zero-padding을 해주지 않음으로써 영상의 크기가 Conv layer를 통과함으로써 줄어들 수 있다. # 'same'은 zero-padding을 의미 여기서는 동일한 크기를 유지하기 위해 # input data는 (28x28x1)을 갖는 MNIST이다. # VGG-16의 가장 큰 특징은 Pooling을 하기 전에 동일한 Conv Layer를 반복해서 사용하는 것이다. self.sequence.append(conv2d(16, (3,3), padding='same', activation='relu')) # output dimension (28x28x16) self.sequence.append(conv2d(16, (3,3), padding='same', activation='relu')) # output dimension (28x28x16) # 2x2 pooling을 한다. maxpooling을 이용하여 영상의 크기를 줄여준다. self.sequence.append(max_pool((2,2))) # output dimension (14x14x16) self.sequence.append(conv2d(32, (3,3), padding='same', activation='relu')) # output dimension (14x14x32) self.sequence.append(conv2d(32, (3,3), padding='same', activation='relu')) # output dimension (14x14x32) self.sequence.append(max_pool((2,2))) # output dimension (7x7x32) self.sequence.append(conv2d(64, (3,3), padding='same', activation='relu')) # output dimension (7x7x64) self.sequence.append(conv2d(64, (3,3), padding='same', activation='relu')) # output dimension (7x7x64) self.sequence.append(flatten()) # 1568x1 self.sequence.append(tf.keras.layers.Dense(2028, activation='relu')) self.sequence.append(tf.keras.layers.Dense(10, activation='softmax')) def call(self, x, training=False, mask=None): for layer in self.sequence: x = layer(x) return x 학습, 테스트 루프 정의1234567891011121314151617181920# Implement training loop@tf.functiondef train_step(model, images, labels, loss_object, optimizer, train_loss, train_accuracy): with tf.GradientTape() as tape: predictions = model(images) loss = loss_object(labels, predictions) gradients = tape.gradient(loss, model.trainable_variables) optimizer.apply_gradients(zip(gradients, model.trainable_variables)) train_loss(loss) train_accuracy(labels, predictions)# Implement algorithm test@tf.functiondef test_step(model, images, labels, loss_object, test_loss, test_accuracy): predictions = model(images) t_loss = loss_object(labels, predictions) test_loss(t_loss) test_accuracy(labels, predictions) 데이터셋 준비1234567891011121314151617181920212223mnist = tf.keras.datasets.mnist# 입력 영상이 총 8bit 즉, 0~255 사이의 값들로 이루어져 있으므로(x_train, y_train), (x_test, y_test) = mnist.load_data()# 0~1표현으로 바꿔준다.x_train, x_test = x_train / 255.0, x_test / 255.0# 입력 영상 하나의 사이즈는 28x28이므로 channel을 하나 더 늘려 주어야한다.print(x_train.shape)print(x_train[0].shape)# x_train : (NUM_SAMPLE, 28, 28) -&gt; (NUM_SAMPLE, 28, 28 , 1)# ...은 해당 데이터 객체의 모든 axis를 표현하는 것이다.# 위에서 255.0으로 나누어주게 되면 float64로 되므로 자료형을 float32로 해야 error가 없다.## x_train[:,:,:, tf.newaxis]x_train = x_train[..., tf.newaxis].astype(np.float32)x_test = x_test[..., tf.newaxis].astype(np.float32)# Numpy object나 Tensor로 부터 데이터셋을 구축할 수 있다.train_ds = tf.data.Dataset.from_tensor_slices((x_train, y_train)).shuffle(10000).batch(32)# test data는 suffle할 필요없다.test_ds = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(32) 학습 환경 정의모델 생성, 손실함수, 최적화 알고리즘, 평가지표 정의12345678910111213# Create modelmodel = ConvNet()# Define loss and optimizerloss_object = tf.keras.losses.SparseCategoricalCrossentropy()optimizer = tf.keras.optimizers.Adam()# Define performance metricstrain_loss = tf.keras.metrics.Mean(name='train_loss')train_accuracy = tf.keras.metrics.SparseCategoricalAccuracy(name='train_accuracy')test_loss = tf.keras.metrics.Mean(name='test_loss')test_accuracy = tf.keras.metrics.SparseCategoricalAccuracy(name='test_accuracy') 학습 루프 동작123456789101112131415161718for epoch in range(EPOCHS): for images, labels in train_ds: train_step(model, images, labels, loss_object, optimizer, train_loss, train_accuracy) for test_images, test_labels in test_ds: test_step(model, test_images, test_labels, loss_object, test_loss, test_accuracy) template = 'Epoch &#123;&#125;, Loss: &#123;&#125;, Accuracy: &#123;&#125;, Test Loss: &#123;&#125;, Test Accuracy: &#123;&#125;' print(template.format(epoch + 1, train_loss.result(), train_accuracy.result() * 100, test_loss.result(), test_accuracy.result() * 100)) # reset_state는 새로운 값들을 받기 위해 하는 건가? train_loss.reset_states() train_accuracy.reset_states() test_loss.reset_states() test_accuracy.reset_states()","categories":[{"name":"deep learning","slug":"deep-learning","permalink":"https://heung-bae-lee.github.io/categories/deep-learning/"}],"tags":[]},{"title":"Convolution Neural Network(1)","slug":"deep_learning_04","date":"2019-12-10T04:50:24.000Z","updated":"2019-12-13T03:47:57.795Z","comments":true,"path":"2019/12/10/deep_learning_04/","link":"","permalink":"https://heung-bae-lee.github.io/2019/12/10/deep_learning_04/","excerpt":"","text":"합성곱 연산과 이미지 필터 아날로그 신호처리는 선형이고 시불변인 시스템에 의존해서 개발이 되게 되는데, Noise가 있는 입력이 들어왔을 때 넣어주면 Noise가 제거된 출력이 나오는 이런 시스템을 모두 LTI system이라고 부른다. 디지털 신호가 아닌 아날로그 신호로부터 LTI system이 정의되어있다. 선형이라는 것은 대부분 알고 있듯이 선형대수에서 나오는 linearity를 만족시키면 되는 것이고, 시불변이라는 의미는 시간이 지나도 동일한 결과를 내보내준다는 의미이다. 확률과정에서 step에 영향을 받지 않는다라고 보면 좋을 것 같다. 사람은 대표적으로 LTI 시스템이 아닌 시스템이다. 수학적으로는 엄밀하진 않지만, 공학에선 많이 사용한다. 왼쪽의 삼각형을 모든 구간에 대해 전부해준다면 값은 1이 될 것이다. 여기서 $h\\to\\infty$가 되면, Dirac 델타 함수가 된다. 시간 t=0만 임의의 값을 갖고, 나머지 구간은 0을 갖는다. 모든 구간에서 적분한 값이 1 convolution을 한다는 것은 임의의 두 함수 중 한 함수를 좌우로 뒤집고 이동시키면서 두함수의 곱을 적분하여 계산한다. 합성곱 계산 animation vertical Sobel Filter가 왜 미분 필터이냐고 의문이 든다면, 1차원 신호를 data로 생각하고 앞서 했었던 수치 미분을 떠올려 보자. 그렇다면, 단숨에 이해가 갔을 것이다. 지금은 vertical Sobel Filter이므로 가로의 Edge는 추출하지 못한 것을 확인할 수 있다. 그에 반해 세로 성분들은 잘 검출된 것을 확인 할 수 있다. 만일 위의 필터를 90도 rotate해주게되면 가로로 미분하는 horizonal Sobel Filter가 되어 위의 결과와는 반대의 결과를 보여줄 것이다. 합성곱 계층 입력이 이제는 영상으로 여러개 들어오게 되어 각각의 입력층의 뉴런 하나 하나가 channel이라고 불린다. 필터 가중치는 보통 3x3, 5x5, 7x7등을 주로 사용한다. 2D signal과 2D signal을 곱(element-wise product or Hadamard product)해야하므로 합성곱을 사용한다. $kernel_{Height} \\times kernel_{Width} \\times channel_{in} \\times channel_{out}$ 만큼의 parameter가 필요하다. filter는 $Channel_{in} \\times Chaeel_{out}$개 만큼 있을 것이다. kernel(Filter)에 나타나는 모양과 유사한 모양을 한 위치가 높은 값으로 나타나게 된다. 기본적인 합성곱 신경망 stride요소를 넣지 않으면, 합성곱 계층에서는 영상의 크기는 그대로이며, 영상의 채널 수가 달라진다. kernel(filter)가 돌아다니면서 포착하는 형태이기 때문에 공간적인 특징이 있고, 따라서 Feature Map이라고 한다. classification에서는 Max Pooling이 주로 잘 먹힌다! -Convolutional Layer와 FC Layer를 연결해주기 위해 필요하다 먼저, 맨 처음 언급했던 머신러닝과 딥러닝의 가장 큰 차이는 사람이 feature를 넣어주느냐 그렇지 않느냐의 차이라고 했다. 크게 보면 위의 그래프에서 합성곱 계층과 활성함수의 과정을 N번 반복하는 것은 shallowNN의 input으로 넣어 줄 Feature를 뽑는 과정이라고 직관적으로 이해할 수 있다. 앞의 합성곱 계층에서 activation function 까지를 계속해서 진행 할수록 Feature Map의 크기(width와 height)는 Kernel과 Pooling에 의해서 줄어들고 channel(depth)는 늘어나게 될 것이다. 또한 처음부터 끝까지 동일한 크기의 kernel(Filter)을 사용한다고 가정한다면, 영상에서 더 넓은 영역을 커버하는 효과를 주는 것과 동일하다. 그래\u001d서 Feature Map을 한번 뽑을 때마다 Pooling을 해주면\u001c서 처음에는 좁은 영역을 점점 더 넓은 영역을 본다. 점점 더 넓은 영역을 본다는 의미는 Pooling을 함으로써 결국에는 더 넓은 범위를 대표하는 값들을 가진 2-D Matrix인 Feature Map이 될 것이기 때문이다. 98년도의 르쿤 교수님의 LeNet-5는 pooling 대신 subsampling을 사용하여 같은 Feature Map의 크기를 줄여주었다. 합성곱 신경망의 심화 이해 간단히 생각하면 $kernel_{height} \\times kernel_{width} \\times Channel_{in} \\times Channel_{out}$ 만큼 어마어마하게 많은 Parameter가 필요하므로 계산해야 할 Para\u001cmeter가 상대적으로 적은 FC Layer로 하는 것이 더 좋은 방법이지 않을까라고 생각하시는 분들이 있을 것이다. 허나, 그것은 잘못된 생각이다. Convolutional Layer를 사용하기 때문에 우리가 Image를 처리할 수 있는 것이다. FC Layer를 사용하게 되면 오히려 계산해야 할 Parameter의 개수가 어마어마하게 늘어난다.$(Height_{in} \\times Width_{in} \\times Channel_{in}) \\times (Height_{out} \\times Width_{out} \\times C_{out})$ 얼핏 보기엔 비슷해보이겠지만, 예를 들어보자. 입력으로 RGB channel을 갖는 1024 * 1024 image를 받는다면, FC Layer를 사용한다면, $(1024 \\times 1024 \\times 16) \\times (1024 \\times 1024 \\times 32)$이지만 Convolutional Layer를 사용하고 $3 \\times 3$ kernel을 사용한다면 $(3 \\times 3 \\times 16 \\times 32)$로 훨씬 적은 연산을 한다. 이러한 이유로 우리가 영상을 입력으로 하는 것은 절대로 FC Layer를 통해 해결할 수 없다. 위에서 W는 kernel들을 $C_{in} \\times C_{out}$ Matrix로 이루어진 tensor이다. 즉, $W_{i,j}$들이 각각의 kernel을 나타내고 $X_{i}$와 convolution operation을 해주므로 편향은 FC Layer와 동일하게 channel 1개마다 1개씩 존재한다. 위의 그림의 예를 보면 kernel size가 $3 = 2N+1$이므로 입력에 상하좌우 1개의 Zero-Padding을 해준 것이다. \bStride를 하는 것은 결과를 미리 Convolution을 Full로 다 연산을 한 다음에 하나씩 Subsample하는 것과 동일한 결과를 가져온다. 그러므로 다 연산한 후에 subsampling을 하면 연산은 다하지만 결국엔 버리는 값이 생기기 때문에 Stride를 사용한다. 학습 초반에는 위쪽의 Feature Map들 처럼 좁은 범위의 Feature들을 추출하지만, 학습의 후반 부에는 넓은 범위의 Feature들을 학습한다. Batch Normalization(배치 정규화) 일반 경사 하강법의 경우, Gradient를 한번 업데이트 하기 위해 모든 학습 데이터를 사용한다. 하지만 데이터가 엄청나게 많다면?? 그렇다면 Gradient를 업데이트하는데 오랜시간이 소요될 것이다. 그렇다면 SGD는??!! Stochastic은??? Epoch마다 데이터 순서를 섞어주기도 하는 이유는 random성을 더 강하게 해주기 위해서이다. 이런 현상을 해결하기 위한 것이 batch normalization이다. 또한, 동일한 scale과 동일한 zero-mean을 가지게 되기 때문에 학습률 결정에 유리하다 말의 의미는 학습을 할 때 더 scale이 큰 경우에는 학습이 많이 되고, scale이 작\u001d으면 학습이 적게 되는 문제가 발생할 수 있다. 학습률을 너무 크게 할 경\u001c우 Gradient가 크게 나오는 곳에 Gradient exploding이 발\u001d생할 수가 있고, 반대로 학습률을 너무 작게 할 경우 Gradient Vanishing이 발생되서 학습이 안되는 곳이 발생\u001c되는 문제가 있는데 Normalization을 해주게 되\u001c\u001c면 모든 각각의 계층들이 동일한 scale로 학습되기 때문에 학습률 결정에 유리하다는 것이다.(미분을 할때 입력에 대해서 출력값이 커지게 되면, Gradient값도 커질 것이다.) 각각의 batch를 normalization하면, 말 그대로 normalization이 된 것이므로 모수가 $\\mu=0, \\sigma^2=1$인 gaussian distribution을 갖게 될 것이다. 그런데 activation함수는 LeRu를 사용한다면 0미만인 것들은 모조리 0값으로 반환될것이다. 이미 연산을 해놓은 값들을 연산 하기 전이 아닌 연산후에 0으로 만들어 의미 없게 만드는 것 보다 그렇게 0으로 반환되는 개수를 조절하기 위해 추가 스케일링 계수인 $\\gamma$와 $\\beta$를 만들고, 역전파 알고리즘으로 학습시켜준다. 학습과정에서 이동평균을 구해놓는데, 최근 N개에 대한 이동평\u001c균을 사용한다. 최근 N개만 사용하고 그 전에 것들은 자연스럽게 날라가기 때문\u001c에 최근 N개가 충분한 sample이 아닐 경\u001c우$\\mu$,$\\sigma$가 적절하지 않게 결정되는 문제가 있는\u001c데 이런 상황을 해결하는 것은 지수평균을 사용한다. 심화 합성곱 신경망 GoogLeNet 2014년도에 GoogLeNet과 VGG-19가 나왔는데, GoogLeNet이 에러율이 좀 더 낮고 층이 더 \b깊은 것을 알 수 있다. GoogLeNet이 좀 더 복잡해서 VGG가 더 많이 알려져 있지만, 다양한 스킬들을 공부하려면 GoogLeNet을 조금 살펴보는 것도 좋을 것이다. Let&#39;s Go Deeper and Deeper라는 모토를 가지고 만들어진 것과 같이 좀더 hidden_layer가 깊어진 것을 알 수 있다. 1x1, 3x3, 5x5의 feature들을 다 나누어서 학습\b한다. 즉, 다양한 크기의 Filter들이 잘 학습된다. 또한 3x3 Max pooling 같은 경우는 convolution Layer를 거치지않고도 단순히 max pooling을 통한 후에도 다음 단계에서 의미있는 feature로 작동된다는 것을 보여주었다!! naive 한 Inception 모듈 구조에서 먼저 단순히 1x1 conv를 통과시켜 동일한 channel 영역(Receptive Field)을 가져가면서도 channel을 줄여 연산량을 줄여 주는 구\u001c조인 Bottleneck를 구현하고 있다. 맨 마지막 출력층에서만 inference를 한다면 Input에 가까운 층일수록 점점 더 Vanishing Gradient문제로 인해 학습이 저하 될 것을 우려하여 중간 feature들로도 classification을 하도록 하였다. GoogLeNet 중간 요약 Inception 구조 Battleneck 구조 중간 중간에 inference Residual Network 이제는 거의 일반적이고, 기본구조로 많이 사용하는 구조이다. 왼쪽 구조에서 표현가능한 것은 오른쪽 구조인 Residual 구조에서도 표현 가능함이 증명 되어 있다. 직관적으로 봤을때는 Feature를 뽑아서 이전 Feature와 더한 다는 것이 잘 이해가 안갈 수 도 있겠지만, 이런식으로 했을때도 좌측의 일반적인 Conv Layer의 구조와 수학적으로 동치를 이룬다는 것을 알고 있자. 맨 왼쪽이 Original ResidualNN의 구조이고 가운데가 Pre-Activation을 사용하는 구조이다. Densely Connected ConvNets(DenseNet) 간단히 말하자면, 모든 Layer들이 다 연결되어 있는 구조라고 할 수 있다. 처음에 일반적인 Conv Layer를 통해 Feature Map을 만들고 그런 뒤에 Dense Block을 이용해서 다른 모든 Conv Layer들과 Dense하게 연결시켜준다. 그 다음 Conv Layer를 이용해서 channel 개수를 조정해주고, Max Pooling을 이용해서 영상크기를 줄여준다. 이런 과정을 여러번 반복해서 Feature를 추출한 후, 맨 마지막은 FC Layer로 구성해주었다. 위의 구조에서 Dense Block들이 residual block으로 바뀐다면 ResNet인 것이다. Pre-Activation구조를 사용한다는 것이 ResNet을 계승하고 있는다는 것을 알 수 있는 명확한 내용이다.","categories":[{"name":"deep learning","slug":"deep-learning","permalink":"https://heung-bae-lee.github.io/categories/deep-learning/"}],"tags":[]},{"title":"data engineering basic(SQL Basic)","slug":"data_engineering_02","date":"2019-12-10T02:23:24.000Z","updated":"2019-12-13T06:46:53.388Z","comments":true,"path":"2019/12/10/data_engineering_02/","link":"","permalink":"https://heung-bae-lee.github.io/2019/12/10/data_engineering_02/","excerpt":"","text":"SQL(Structured Query Language)DB (Database) 데이터를 통합하여 관리하는 데이터의 집합 DBMS (Database Management system) DB를 관리하는 미들웨어 시스템을 의미 Database 분류 RDBMS(Relational Database Management System) NoSQL - 데이터 테이블 사이에 키값으로 관계를 가지고 있는 데이터베이스 ex) Oracle, Mysql, Postgresql, Sqlite -데이터 사이의관계 설정으로 최적화된 스키마를 설계 가능 - 데이터 테이블 사이에 관계가 없이 저장하는 데이터베이스 - 데이터 사이의 관계가 없으므로 복잡성이 줄고 많은 데이터를 저장 가능 RDBMS table 행(row)과 열(column)로 이루어져 있는 데이터 베이스를 이루는 기본 단위 Storage Engine MyISAM : full text index 지원, table 단위 lock, select가 빠름, 구조 단순 InnoDB : transaction 지원, row 단위 lock, 자원을 많이 사용, 구조 복잡 Column 테이블의 세로축 데이터 Field, Attribute 라고도 불림 Row 테이블의 가로축 데이터 Tuple, Recode 라고도 불림 Value 행(row)과 열(column)에 포함되어있는 데이터 Key 행(row)의 식별자로 사용 Relationship Schema 스키마(schema)는 데이터 베이스의 구조를 만드는 디자인 NoSQL NoSQL(Not Only SQL) RDBMS의 의존적인 관계가 갖는 한계를 극복하기 위해 만들어진 데이터베이스 확장성이 좋음 데이터 분산처리 용이 데이터 저장이 유연함 RDMBS와 다르게 구조의 변경이 불필요 Schema 및 Join이 없음 Join 기능이 없으므로 각각의 테이블만 사용가능 collection 별로 관계가 없기 때문에 모든 데이터가 들어있어야 하므로 RDBMS보다 저장공간이 더 필요 저장되는 데이터는 Key-value 형태의 JSON 포멧을 사용 select는 RDBMS보다 느리지만 insert가 빨라 대용량 데이터 베이스에 많이 사용 트랜젝션(transaction)이 지원되지 않음(동시수정에 대한 신뢰성이 지원되지 않음) https://db-engines.com/en/ranking_trend Install MySQL(for Mac OS) 주의) 2가지 방법을 소개하지만, Python에서 MySQL을 활용할 User들에게는 1번 방법으로 설치를 해야한다는 것을 알려드립니다!!! brew(1번방법)로 설치해야 python의 mysql client를 사용할수 있습니다. 방법 1) reference https://gist.github.com/operatino/392614486ce4421063b9dece4dfe6c21 Install12345$ brew install mysql@version_num$ brew tap homebrew/services $ brew services start mysql@version_num$ brew services list$ brew link mysql@version_num --force$ mysql -V 앞으로 SQL 접속시 사용할 Password!!1$ mysqladmin -u root password 'yourpassword' Connect mysql server1$ mysql -u root -p 방법 2) dmg 파일 받아서 install step 1) https://dev.mysql.com/downloads/mysql/5.7.html#downloads에서 DMG 파일 다운로드 step 2) 다운 받은 DMG 파일을 실행 설치 중간에 임시 패스워드를 기억 step 3) 시스템 환경설정에 가면 MySQL이 설치 된것을 확인 MySQL 서버의 인스턴스를 정지 및 실행, 초기화, 제거등을 할수 있다. Start MySQL Server 버튼을 클릭하여 실행 아래의 경로로 이동1$ cd /usr/local/mysql/bin Mysql 서버에 접속1$ sudo ./mysql -p Password: (관리자 권한으로 실행을 위한 PC의 패스워드)Enter password: (임시로 발급받은 DB의 패스워드 입력) 아래의 mysql 프롬프트가 나오면 정상!! 설치 완료!!1mysql&gt; 패스워드 변경 ( qwer1234 로 변경할 경우 )12mysql&gt; ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;qwer1234&apos;;mysql&gt; FLUSH PRIVILEGES; mysql&gt; quit; 변경한 패스워드로 다시 로그인Mysql Basic Commandsystem12345678910111213# mysql명령어 리스트 확인mysql&gt; help# 현재 상태 보기mysql&gt; status# mysql 접속 종료mysql&gt; exitmysql&gt; quit# 패스워드 변경 ( qwer1234 로 변경하는 경우 )mysql&gt; ALTER USER 'root'@'localhost' IDENTIFIED BY 'qwer1234'2.2 Database Database1234567891011121314151617# DB 목록 보기mysql&gt; show databases;# DB 만들기 ( DB이름을 test라고 하려면 )mysql&gt; create database test;# DB 접속하기 ( DB 이름 test )mysql&gt; use test;# 현재 접속중인 DB 확인하기mysql&gt; select database();# DB 지우기mysql&gt; drop database test;# DB 삭제 확인mysql&gt; show databases; Table1234567891011121314151617181920212223242526272829# 테이블 만들기# 문자열 name 20자, age 숫자 3자 컬럼이 있는 테이블이 생성mysql&gt; create table user ( name char(20), age int(3) );# 테이블 목록 확인mysql&gt; show tables;# 테이블 구조 확인mysql&gt; desc user;mysql&gt; describe user;mysql&gt; explain user;# 테이블 이름 바꾸기(another로 바꾸기)mysql&gt; rename table user to another;# 테이블 이름 바뀐것 확인 mysql&gt; show tables;# 테이블에 데이터 추가하기mysql&gt; insert into another(name, age) values(\"alice\", 23);mysql&gt; insert into another(name, age) values(\"peter\", 30);# 추가된 데이터 확인하기mysql&gt; select * from anther;# 테이블 지우기mysql&gt; drop table anther;# 테이블 삭제된것 확인mysql&gt; show tables; Database Management Application for Mac OSstep 1) Install Sequel Pro https://www.sequelpro.com/ 경로에서 sequelpro를 다운 받아서 설치 step 2) Connect Database Server 아래와 같이 Host, Username, Password를 설정하여 연결 Sample Database Download https://dev.mysql.com/doc/index-other.html링크에서 Sample database 를 다운 혹시라도 앞으로 저의 블로그를 보시면서 따라해보실 분들은 world database, sakila database 를 다운받아 주세요. sql 파일 추가1234/usr/local/mysql/bin 디렉토리에서 아래와 같이 실행하면 sql 파일을 import - import 하기 전에 world 데이터 베이스가 있어야 함$ sudo ./mysql -p world &lt; (sql 파일 경로)- brew로 설치한 경우 아래와 같이 추가$ mysql -u root -p world &lt; (sql 파일 경로)","categories":[{"name":"data engineering","slug":"data-engineering","permalink":"https://heung-bae-lee.github.io/categories/data-engineering/"}],"tags":[]},{"title":"data engineering basic(Unix환경 및 커맨드)","slug":"data_engineering_01","date":"2019-12-09T08:48:07.000Z","updated":"2019-12-17T04:17:10.108Z","comments":true,"path":"2019/12/09/data_engineering_01/","link":"","permalink":"https://heung-bae-lee.github.io/2019/12/09/data_engineering_01/","excerpt":"","text":"Pipes and Filterscat : 해당 파일 전체를 printhead : 해당 파일 앞의 10줄 정도를 printtail : 해당 파일 뒤의 20줄 정도를 print command &gt; file : 기존의 파일 내용은 지우고 현재 command한 결과 파일에 저장command &gt;&gt; file : 기존의 파일에 덮붙여서 결과를 저장(python append같은 느낌!) 12345# example.py를 python3로 run하고 그 결과를 result.txt파일로 저장python3 example.py &gt; result.txt# example.py를 python3로 run하고 그 결과를 result.txt파일에 덮붙여서 저장python3 example.py &gt;&gt; result.txt Shell script terminal에서 바로 명령어를 여러개 사용하고 싶을때 shell script를 사용하면 된다. 예를들어 아래의 example.py를 실행시켜 위에서 command를 한번에 실행시키고 싶다면 다음과 같이 먼저 example.py를 작성한 후에 command.sh 파일에는 command들을 작성한 후에 shell script 파일을 run하면 된다. example.py12345678import sysdef main(): # command 뒤에 따라오는 첫번째 글자를 print print(sys.argv[1])if __name__==\"__main__\": main() command.sh123456#!/usr/bin/env bashpython3 example.py 1 &gt; result.txtpython3 example.py 2 &gt;&gt; result.txthead result.txtrm -rf result.txt example.py terminal창123#권한을 설정chmod +x command.sh./command.sh 보통은 우리가 deploy.sh라는 파일로 만들어 그 안에서 작업을 한다. 예를 들어서,1234567891011121314# zip형식으로 되어있는 모든(*)파일을 삭제해라rm *.zip# 모든 파일을 lisztfever라는 이름으로 압축해라. -r 옵션은 파일이 있을 수 있으므로 붙여준다.zip lisztfever.zip -r *# aws s3라는 storage에 s3://areha/lisztfever/lisztfever.zip 에 해당 path의 파일을 삭제aws s3 rm s3://areha/lisztfever/lisztfever.zip# s3에게 다시 copy해라aws s3 cp ./listzfever.zip s3://areha/lisztfever/listzfever.zip# aws lambda function을 update해라.aws lambda update-function-code --function-name listzfever --s3-buket areha --s3-key listzfever/listzfever.zip AWS Cloud Service먼저, IAM(Identity and Access Management)에 대해서 설명하겠다. 내가 누구이고 어떤 Access를 가지고 있는지를 관리하는 곳이라고 생각할 수 있다. 여기서 새로운 User를 등록 할 수 있다. 위의 Add User를 통해서 새로운 User를 등록해보자. Access type은 우리가 AWS cli를 통해서도 관리하므로 첫번째인 Programmatic access로 설정한다. Permission을 주는 방식에 대한 설정하는 부분이다. Add user to group : 한 Project를 여러명이 같이 진행하여 여러명이 관리할 경우 사용. Copy permissions from existing user : 말 그대로 이미 존재하는 user의 permission들 중 하나를 선택하여 Copy할 경우 사용 Attach existing policies directly : AWS에 존재하는 정책들 중 하나를 선택하여 바로 사용하는 경우 사용 예전에 있던 계정이 만료된걸 모르고 있다가 결제를 안해버려서…. ㅠㅠㅠ 새롭게 만든 계정으로 하느라 등록된 User들이 없다. 그러므로 3번째 설정으로 들어가서 모든 최상위 permission을 갖는 AdministratorAccess를 주었다. 다음으로 넘어가게 되면, tag를 설정하게 되는데, 우선 넘어가겠다.(이 부분은 나중에 설정할 것이다.) 앞에서 설정한 사항들을 확인하고, Create User를 누르게 되면 설정한대로 User를 생성하게 되는 것이다. Access key ID, Secret access key가 생성되어 나오는데, 이 창이 닫히면, 볼수 없으므로 Download csv를 하는 것을 권장한다. 설치 프로그램을 실행한다. /usr/local/aws에 AWS CLI를 설치하고 /usr/local/bin 디렉터리에 symlink aws를 생성한다. -b 옵션을 사용하여 symlink를 생성하면 사용자의 $PATH 변수에 설치 디렉터리를 지정할 필요가 없다. 이렇게 하면 모든 사용자가 임의 디렉터리에서 aws를 입력하여 AWS CLI를 호출 가능하게 한다. 123curl \"https://s3.amazonaws.com/aws-cli/awscli-bundle.zip\" -o \"awscli-bundle.zip\"unzip awscli-bundle.zipsudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws 위의 설치가 다 끝나면, 이제 aws cli의 configure를 설정해 볼 것이다. 이를 통해 우리가 console에 접속하지 않고도 cli 환경에서도 aws를 조작할 수 있게 된다. 12345aws configureAWS Access Key ID [None]: Access key IDAWS Secret Access Key [None]: Secret access keyDefault region name [None]: ap-northeast-2Default output format [None]:","categories":[{"name":"data engineering","slug":"data-engineering","permalink":"https://heung-bae-lee.github.io/categories/data-engineering/"}],"tags":[]},{"title":"심층 신경망의 구조","slug":"deep_learning_03","date":"2019-12-07T15:00:00.000Z","updated":"2019-12-20T04:38:06.937Z","comments":true,"path":"2019/12/08/deep_learning_03/","link":"","permalink":"https://heung-bae-lee.github.io/2019/12/08/deep_learning_03/","excerpt":"","text":"심층 신경망의 구조 은닉 계층 추가 = 특징의 비선형 변환 추가!!선형 변환의 이해 선형대수의 선형 변환을 함수의 개념에서 보았을때, 입력 차원(n)이 출력 차원(m)보다 크다면 Onto(전사함수: 모든 공역이 치역이 되있는 상태)가 될 수 있지만, 그 반대인 경우는 적은 차원을 갖는 입력벡터의 차원으로 일부분의 출력 벡터의 차원을 커버하는 것이 되는 것이므로, 전사함수가 될 수 없다. 또한, 이런 입력차원(n)이 출력 차원(m)보다 작은 경우의 구조를 우리는 딥러닝 네트워크 구조에서도 볼 수 있다. 예를 들면 GAN이나 Auto Encoder의 decoder구조가 가장 쉬운 예시일 것이다. 여기서의 의문은 그렇다면, 일부분의 차원으로 피처를 잘 배울 수 있는지가 의문일 것이다. 허나, 그 일부의 차원이 원래 갖고 있던 특성에서 나올법한 특성들만을 생성해 주므로 걱정하지 않아도 된다. 또한, 선형시스템의 곱으로 노드들의 연산을 표현할 수 있는데, 여기서, 예를 들어, 특징벡터1과 특징벡터2간의 방향이 비슷한 즉, Orthogonal하지 않고 방향이 비슷한 벡터를 통해 연산을 진행하면 다음 층에서는 노드들 중에 비슷한 특징에 대한 정보를 포함하고 있을 것이다. Inner product를 projection의 개념에서 살펴보면, 어떠한 벡터가 다른 방향의 벡터에 projection을 하는 것은 그 projection한 벡터가 그 방향의 벡터가 어느 정도의 성분을 가지고 있는지를 의미하므로 선형대수 측면에서 위에서 각 피처들간의 곱의 연산들에 의한 새로운 피처들의 생성은 projection된 길이를 비교하는 행위와 동일할 것이다. 역전파 학습법의 개념 y를 구하려면 x와 z를 알아야 하는데, x와 z에는 중복된 연산이 있어서 비효율적이다. 처음 계산할 때 값을 저장해주어서 중복계산이 발생하지 않도록 해준다. 학습을 마친 후 validation set이나 test set에 적용할 때는 더 이상 학습을 하지 않으므로 이 순방향 추론만을 사용한다. 심층 신경망의 수학적 이해 역전파 학습의 필요성 (N+1번) 손실함수를 평가한다고 하는데 그 이유는 기준점이 되는 손실함수를 먼저 한번 계산하고 나머지 편미분시에 가각 N번 평가하기 때문이다. 합성함수와 연쇄 법칙 역전파 학습법의 수식적 이해 미분하고자 하는 경로 사이에 있는 모든 미분값을 알아야 원하는 미분을 구할 수 있다는 의미이다. 수치적 미분에서는 N+1번을 계산하여야 했지만, 역전파 알고리즘으로 인해 단 한번의 손실함수 평가로 미분을 구할 수 있다. 수치 미분을 이용한 심층 신경망 학습123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134## 수치 미분을 이용한 심층 신경망 학습import timeimport numpy as np## 유틸리티 함수epsilon = 0.0001def _t(x): return np.transpose(x)def _m(A, B): return np.matmul(A, B)def sigmoid(x): return 1 / (1 + np.exp(-x))def mean_squared_error(h, y): return 1 / 2 * np.mean(np.square(h - y))## 뉴런 구현class Neuron: def __init__(self, W, b, a): self.W = W self.b = b self.a = a # Gradient self.dW = np.zeros_like(self.W) self.db = np.zeros_like(self.b) def __call__(self, x): return self.a(_m(_t(self.W), x) + self.b) # activation((W^T)x + b)## 심층신경망 구현class DNN: \"\"\" hidden_depth : hidden_layer의 갯수 num_neuron : hidden_layer 하나당 neuron의 갯수 num_input : input_layer의 neuron의 갯수 num_output : output_layer의 neuron의 갯수 activation : activation funtion으로 사용할 함수 \"\"\" def __init__(self, hidden_depth, num_neuron, num_input, num_output, activation=sigmoid): # W, b initialize def init_var(i, o): return np.random.normal(0.0, 0.01, (i, o)), np.zeros((o,)) self.sequence = list() # First hidden layer W, b = init_var(num_input, num_neuron) self.sequence.append(Neuron(W, b, activation)) # Hidden layers for _ in range(hidden_depth - 1): W, b = init_var(num_neuron, num_neuron) self.sequence.append(Neuron(W, b, activation)) # Output layer # 단순히 심층신경망 구현 후에 수치미분을 사용한 역전파학습을 보이기 위한 코드이므로 # Output layer의 activation function을 따로 바꾸지 않고 sigmoid로 사용하겠다. W, b = init_var(num_neuron, num_output) self.sequence.append(Neuron(W, b, activation)) def __call__(self, x): # layer를 call하는 것은 결국 위에서 정의한 Neuron의 call이 될 것이고 # x는 activation((W^T)x + b)이 될 것이다. for layer in self.sequence: x = layer(x) return x def calc_gradient(self, x, y, loss_func): def get_new_sequence(layer_index, new_neuron): # 특정한 변수하나(weight나 bias)만 변화를 줘서 그 때 loss가 얼마나 변하는지를 보고 # numerical gradient를 계산하려하기 때문에 변화된 변수가 있는 새로운 Sequence가 필요하다. new_sequence = list() for i, layer in enumerate(self.sequence): if i == layer_index: new_sequence.append(new_neuron) else: new_sequence.append(layer) return new_sequence def eval_sequence(x, sequence): for layer in sequence: x = layer(x) return x loss = loss_func(self(x), y) for layer_id, layer in enumerate(self.sequence): # iterate layer for w_i, w in enumerate(layer.W): # iterate W (row) for w_j, ww in enumerate(w): # iterate W (col) W = np.copy(layer.W) W[w_i][w_j] = ww + epsilon new_neuron = Neuron(W, layer.b, layer.a) new_seq = get_new_sequence(layer_id, new_neuron) h = eval_sequence(x, new_seq) num_grad = (loss_func(h, y) - loss) / epsilon # (f(x+eps) - f(x)) / epsilon layer.dW[w_i][w_j] = num_grad for b_i, bb in enumerate(layer.b): # iterate b b = np.copy(layer.b) b[b_i] = bb + epsilon new_neuron = Neuron(layer.W, b, layer.a) new_seq = get_new_sequence(layer_id, new_neuron) h = eval_sequence(x, new_seq) num_grad = (loss_func(h, y) - loss) / epsilon # (f(x+eps) - f(x)) / epsilon layer.db[b_i] = num_grad # gradient를 계산할 때 loss를 return해야 학습과정에 loss가 어떻게 되는지를 알 수 있기때문에 return 해준다. return loss## 경사하강법def gradient_descent(network, x, y, loss_obj, alpha=0.01): loss = network.calc_gradient(x, y, loss_obj) for layer in network.sequence: layer.W += -alpha * layer.dW layer.b += -alpha * layer.db return loss## 동작 테스트x = np.random.normal(0.0, 1.0, (10,))y = np.random.normal(0.0, 1.0, (2,))dnn = DNN(hidden_depth=5, num_neuron=32, num_input=10, num_output=2, activation=sigmoid)t = time.time()for epoch in range(100): loss = gradient_descent(dnn, x, y, mean_squared_error, 0.01) print('Epoch &#123;&#125;: Test loss &#123;&#125;'.format(epoch, loss))print('&#123;&#125; seconds elapsed.'.format(time.time() - t)) 역전파 알고리즘을 이용한 심층 신경망 학습123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137## 역전파 학습을 이용한 심층 신경망 학습import timeimport numpy as np## 유틸리티 함수def _t(x): return np.transpose(x)def _m(A, B): return np.matmul(A, B)## Sigmoid 구현class Sigmoid: def __init__(self): # 곱의 형태로 나오게 되므로 처음에 1로해서 추후에 입력될 수치에 영향을 덜 주게 해준다. self.last_o = 1 def __call__(self, x): self.last_o = 1 / (1.0 + np.exp(-x)) return self.last_o def grad(self): # sigmoid(x) * (1- sigmoid(x)) return self.last_o*(1-self.last_o)## Mean Squared Error 구현class MeanSquaredError: def __init__(self): # chain rule을 할 때 MSE로 부터 gradient를 계속해서 가져와야하므로 저장해놓기 위해 self.dh = 1 self.last_diff = 1 def __call__(self, h, y): # 1/2 * mean((h - y)^2) self.last_diff = h - y return 1 / 2 * np.mean(np.square(h - y)) def grad(self): # h - y return self.last_diff## 뉴런 구현class Neuron: def __init__(self, W, b, a_obj): self.W = W self.b = b # activation이 이전과 다르게 class로 작성되었으므로 instanctiation을 해주어야한다. self.a = a_obj() # gradient self.dW = np.zeros_like(self.W) self.db = np.zeros_like(self.b) self.dh = np.zeros_like(_t(self.W)) ## 아래의 grad_W를 위해 저장해놓는다. ## W로 미분했을 경우 이전 입력을 갖고 있어야 바로 사용할 수 있으므로 self.last_x = np.zeros((self.W.shape[0])) self.last_h = np.zeros((self.W.shape[1])) def __call__(self, x): self.last_x = x self.last_h = _m(_t(self.W), x) + self.b return self.a(self.last_h) def grad(self): # dy/dh = W return self.W * self.a.grad() def grad_W(self, dh): grad = np.ones_like(self.W) grad_a = self.a.grad() for j in range(grad.shape[1]): # dy/dw = x grad[:, j] = dh[j] * grad_a[j] * self.last_x return grad def grad_b(self, dh): # dy/db = 1 return dh * self.a.grad() * 1## 심층신경망 구현class DNN: def __init__(self, hidden_depth, num_neuron, input, output, activation=Sigmoid): def init_var(i, o): return np.random.normal(0.0, 0.01, (i, o)), np.zeros((o,)) self.sequence = list() # First hidden layer W, b = init_var(input, num_neuron) self.sequence.append(Neuron(W, b, activation)) # Hidden Layers for index in range(hidden_depth): W, b = init_var(num_neuron, num_neuron) self.sequence.append(Neuron(W, b, activation)) # Output Layer W, b = init_var(num_neuron, output) self.sequence.append(Neuron(W, b, activation)) def __call__(self, x): for layer in self.sequence: x = layer(x) return x def calc_gradient(self, loss_obj): loss_obj.dh = loss_obj.grad() # for문에서 한번에 처리하기 위해서 loss object를 넣어준다. self.sequence.append(loss_obj) # back_propagation loop for i in range(len(self.sequence) -1, 0 , -1): l1 = self.sequence[i] l0 = self.sequence[i - 1] l0.dh = _m(l0.grad(), l1.dh) l0.dw = l0.grad_W(l1.dh) l0.db = l0.grad_b(l1.dh) # loss object가 들어 있으면 출력을 얻지 못하고 loss 만 얻게 될 것이기 때문이다. self.sequence.remove(loss_obj)## 경사하강 학습법def gradient_descent(network, x, y, loss_obj, alpha=0.01): loss = loss_obj(network(x), y) # Forward inference network.calc_gradient(loss_obj) # Back-propagation for layer in network.sequence: layer.W += -alpha * layer.dW layer.b += -alpha * layer.db return loss## 동작 테스트x = np.random.normal(0.0, 1.0, (10,))y = np.random.normal(0.0, 1.0, (2,))t = time.time()dnn = DNN(hidden_depth=5, num_neuron=32, input=10, output=2, activation=Sigmoid)loss_obj = MeanSquaredError()for epoch in range(100): loss = gradient_descent(dnn, x, y, loss_obj, alpha=0.01) print('Epoch &#123;&#125;: Test loss &#123;&#125;'.format(epoch, loss))print('&#123;&#125; seconds elapsed.'.format(time.time() - t))","categories":[{"name":"deep learning","slug":"deep-learning","permalink":"https://heung-bae-lee.github.io/categories/deep-learning/"}],"tags":[]},{"title":"쉽게 배우는 경사하강 학습법","slug":"deep_learning_02","date":"2019-12-07T15:00:00.000Z","updated":"2019-12-13T03:55:29.137Z","comments":true,"path":"2019/12/08/deep_learning_02/","link":"","permalink":"https://heung-bae-lee.github.io/2019/12/08/deep_learning_02/","excerpt":"","text":"쉽게 배우는 경사하강 학습법 어떤 손실 함수를 사용하느냐에 따라서 학습이 어떻게 이루어질 것인지, 그리고 학습을 할 때 정답의 형태를 결정하기 때문에 손실 함수는 중요하다! Traning Data를 Model에 입력해 우리가 학습시키고자 하는 Trainable Parameters를 얻게 되는데 Trainable Parameters들을 inputs으로 보고 outputs을 학습결과인 Loss Function으로 생각하면, 알고리즘 학습은 입력을 바꿔가면서, 출력값이 점점 작아지게 하는 것이라고 볼 수 있다. 결국 알고리즘 학습은 입력을 바꿔가면서, 출력값이 점점 작아지게 하는 것이라는 관점에서 최적화 이론의 목표와 동일하다는 사실을 알 수 있다. 경사 하강 학습법 무차별 대입법은 범위를 알아야하고 범위를 안다해도 step을 촘촘히 조사해야 하므로 계산 복잡도가 높다. 적게 대입해 보고 답을 찾을 수 있는 방법을 생각하다 최적화 알고리즘이 발전 하게 되었다. 최적화 이론과 수학적 표현 수치적 방법의 대표적인 방법이 경사하강법이다. 심화 경사 하강 학습법 경사하강 학습법의 단점들을 극복한 알고리즘에 대해서 알아보자. 경사하강법은 안장점에서 기울기가 0이 되므로 벗어나지 못하게 되는 문제점이 있다. 이동 벡터가 이전 기울기에 영향을 받도록 하는 방\u001d법 이전의 속도에 영향을 받는 방법이라고 할 수 있다. 장점 : Local minimum과 noise에 대처 가능 단점 : 경사하강법은 단순히$x_{t-1}$이동벡터($v_{t}$)를 추가로 사용하므로, 경사 하강법 대비 2배의 메모리를 사용 변수별로 learning rate가 달라지게 조절한다. 예를 들어서 $x=[x_{1}, x_{2}, x_{3},…,x_{n}]$이 존재할때 어떤 변수는 기울기를 크게 가져가고 어떤 변수는 기울기를 작게 가져갈 경우 처음에 기울기를 크게 가져가지 못한다면 local minimum에 빠지기 쉬운 문제점이 있다. 이런 문제점을 해결하고자 변수별로 learning rate를 다르게 가져가는 알고리즘인 Ada Grad 탄생된 것이다. 장점 : $g_{t}$가 누적되어 커진 것은 학습이 그만큼 많이 된 것이므로 학습이 많이 변수는 학습율을 감소시켜, 다른 변수들이 잘 학습되도록 한다. 단점 : $g_{t}$ 가 계속해서 커져서 학습이 오래 진행되면 learning rate가 0ㅇ에 가까워지므로 더이상 학습이 이루어지지 않는 단점이 있다. gradient의 크기를 제곱한 벡터(gradient벡터의 L2-norm)를 누적합을 해서 적게 학습되는 변수들을 더 학습시켜 주도록했지만 epoch나 batchsize등 반복 시키는 parameter의 value가 높아질수록 오래 진행되어 누적합이 커지게 되면 더 이상 학습이 되지 않는 문제점을 개선한 방법이다. 위의 식에서 $\\gamma$값은 0~1값을 갖게 되며, 이 값을 통해 이전의 gradient 누적합을 감소시키는 효과를 주면서 새로운 gradient의 값을 쫓아갈 수 있도록 개선하였다. 그러므로, 변수 간의 상대적인 학습율 차이는 유지하면서$g_{t}$가 무한정 커지지 않아 학습을 오래 할 수 있다. RMSprop과 Momentum의 장점을 결합한 알고리즘이다. 대부분의 코드에 이 Adam optimization을 사용한다. 경사 하강법\u001d을 이용한 얕은 신경망 학습123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112# 경사 하강법을 이용한 얕은 신경망 학습import tensorflow as tfimport numpy as np## 하이퍼 파라미터 설정epochs = 1000## 네트워크 구조 정의### 얕은 신경망#### 입력 계층 : 2, 은닉 계층 : 128 (Sigmoid activation), 출력 계층 : 10 (Softmax activation)# keras의 모듈을 상속해서 Model을 구현class MyModel(tf.keras.Model): def __init__(self): # 상속을 한 경우에는 상속을 한 상위 class를 initialize하는 것을 잊어버리지 말자! super(MyModel, self).__init__() # 아래의 input_dim을 적어줄 필요는 없다. 실제 데이터가 들어올때 정의 되기 떄문이다. self.d1 = tf.keras.layers.Dense(128, input_dim=2, activation=\"sigmoid\") self.d2 = tf.keras.layers.Dense(10, input_dim=128, activation=\"softmax\") # Model이 실제 call이 될때 입력에서 출력으로 어떻게 연결이 될 것인지를 정의 def call(self, x, training=None, mask=None): x = self.d1(x) return self.d2(x)## 학습 루프 정의@tf.function# tensorflow의 Auto Graph를 통해 쉽게 구현가능하다.# function 내의 python 문법으로 입력된 모든 tensor 연산들을 tf.function에 의해서# 최적화된다.def train_step(model, inputs, labels, loss_object, optimizer, train_loss, train_metric): # Gradient를 계산하기위한 with tf.GradientTape() as tape: predictions = model(inputs) loss = loss_object(labels, predictions) # loss를 model의 trainable_variables(W,b)로 각각 미분해서 gradient를 구한것. # loss는 scalar이고, model.trainable_variables는 벡터이므로 결과 또한 벡터가 될 것이다. gradients = tape.gradient(loss, model.trainable_variables) # 각 gradient와 trainable_variables들이 optimizer로 학습 optimizer.apply_gradients(zip(gradients, model.trainable_variables)) # loss를 종합 train_loss(loss) # matric train_metric(labels, predictions)## 데이터셋 생성, 전처리np.random.seed(0)pts = []labels = []center_pts = np.random.uniform(-8.0, 8.0, size=(10, 2))for label, center_pt in enumerate(center_pts): for _ in range(100): pts.append(center_pt + np.random.randn(*center_pt.shape)) labels.append(label)# GPU를 사용하게 된다면 위의 MyModel class에서 initialize 할때# Layer에 따로 dtype을 지정하지 않으면 float32로 설정되므로 동일하게 해주기 위해 type 재설정pts = np.stack(pts, axis=0).astype(np.float32)# 이미 integer이므로 바꿀 필요가 없음.labels = np.stack(labels, axis=0)# 위에서 만든 데이터를 train data set으로 변형# train_ds는 iterable한 object가 된다.# 1000개를 섞어 batch_size를 32개로 해서 구성해준다.train_ds = tf.data.Dataset.from_tensor_slices((pts, labels)).shuffle(1000).batch(32)print(pts.shape)print(labels.shape)## 모델 생성model = MyModel()## 손실 함수 및 최적화 알고리즘 설정### CrossEntropy, Adam Optimizerloss_object = tf.keras.losses.SparseCategoricalCrossentropy()optimizer = tf.keras.optimizers.Adam()## 평가 지표 설정### Accuracytrain_loss = tf.keras.metrics.Mean(name='train_loss')train_accuracy = tf.keras.metrics.SparseCategoricalAccuracy(name='train_accuracy')## 학습 루프for epoch in range(epochs): #위에서 batch_size를 32로 했으므로 한번 실행시 32개씩 나옴. for x, label in train_ds: train_step(model, x, label, loss_object, optimizer, train_loss, train_accuracy) template = 'Epoch &#123;&#125;, Loss: &#123;&#125;, Accuracy: &#123;&#125;' print(template.format(epoch+1, train_loss.result(), train_accuracy.result()*100))## 데이터셋 및 학습 파라미터 저장# 압축해서 여러개의 Numpy Object들을 저장할 수 있다.np.savez_compressed('ch2_dataset.npz', inputs=pts, labels=labels)W_h, b_h = model.d1.get_weights()W_o, b_o = model.d2.get_weights()# weight는 tensorflow에서 사용하고 있는 convention이랑# shallowNN을 구현할 때 사용했던 convention이 좀 다르다.W_h = np.transpose(W_h)W_o = np.transpose(W_o)np.savez_compressed('ch2_parameters.npz', W_h=W_h, b_h=b_h, W_o=W_o, b_o=b_o)","categories":[{"name":"deep learning","slug":"deep-learning","permalink":"https://heung-bae-lee.github.io/categories/deep-learning/"}],"tags":[]},{"title":"가장 단순한 신경망을 통한 작동원리","slug":"deep_learning_01","date":"2019-12-05T15:00:00.000Z","updated":"2019-12-08T12:33:35.852Z","comments":true,"path":"2019/12/06/deep_learning_01/","link":"","permalink":"https://heung-bae-lee.github.io/2019/12/06/deep_learning_01/","excerpt":"","text":"Node가 단일 뉴런 연산을 의미한다고 했는데 여기서의 단일 뉴런 연산이란 input에 가중치를 곱하고 합계를 낸 후에 activation function까지 통과시키는 과정을 의미한다. 위의 식에서 편향을 잊어버리지 말자!! 예를들면, 편향이 없다면 원점을 지나는 선만 표현할 수 있지만 편향을 통해 원점을 지나지 않는 선들도 표현할 수 있게 할 수 있다. 참고로 특별히 편향이 없는 경우도 있을 순 있다. 회귀 문제 어떤 입력이 들어왔을 떄 출력이 연속적인 값을 가질 때 Regression을 사용한다. 이진 분류 문제 다중 분류 문제 Softmax의 분모에 의해서 다른 클래스에 대한 학습에도 영향을 준다는 의미이다. 분모는 다른 클래스로 예측한 확률또한 더해주기 때문이다. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273# 얕은 신셩망을 이용한 다중 분류 문제import numpy as npimport matplotlib.pyplot as plt## 함수 구현# Sigmoid 함수def sigmoid(x): return 1/(1+np.exp(-x))# Softmax 함수def softmax(x): return np.exp(x)/np.sum(np.exp(x))# 네트워크 구조 정의class ShallowNN: # 아래의 W와 b에 적절한 값은 추후에 넣어주기 때문에 현재는 0으로 잡음 def __init__(self, num_input, num_hidden, num_output): self.W_h = np.zeros((num_hidden, num_input), dtype=np.float32) self.b_h = np.zeros((num_hidden, 1), dtype=np.float32) self.W_o = np.zeros((num_output, num_hidden), dtype=np.float32) self.b_o = np.zeros((num_output, 1), dtype=np.float32) # NN의 연산을 call 형태로 해서 작성 def __call__(self, x): h = sigmoid(np.matmul(self.W_h, x) + self.b_h) return softmax(np.matmul(self.W_o, h) + self.b_o)# 데이터셋 불러오기dataset = np.load('ch2_dataset.npz')inputs = dataset['inputs']labels = dataset['labels']print(labels.shape)print(inputs.shape)# ShallowNN Model 생성model=ShallowNN(num_input=inputs.shape[1], num_hidden=128, num_output=10)# 사전에 학습된 파라미터 불러오기weights = np.load('ch2_parameters.npz')model.W_h = weights['W_h']model.b_h = weights['b_h']model.W_o = weights['W_o']model.b_o = weights['b_o']# 모델 결과 프린트outputs = []for point, label in zip(inputs, labels): output = model(point) outputs.append(np.argmax(output)) print(np.argmax(output), label)outputs = np.stack(outputs, axis=0)# 정답 클래스 scatter plotplt.figure()for idx in range(10): mask = labels == idx plt.scatter(inputs[mask, 0], inputs[mask, 1])plt.title('True Label')# plt.grid()plt.show()# 모델 출력 클래스 scatter plotplt.figure()for idx in range(10): mask = outputs == idx plt.scatter(inputs[mask, 0], inputs[mask, 1])plt.title('Model output')# plt.grid()plt.show()","categories":[{"name":"deep learning","slug":"deep-learning","permalink":"https://heung-bae-lee.github.io/categories/deep-learning/"}],"tags":[]},{"title":"딥러닝이 무엇인가?","slug":"deep_learning00","date":"2019-12-04T15:00:00.000Z","updated":"2019-12-08T12:41:32.567Z","comments":true,"path":"2019/12/05/deep_learning00/","link":"","permalink":"https://heung-bae-lee.github.io/2019/12/05/deep_learning00/","excerpt":"","text":"딥러닝의 이해 기계학습의 경우에는 위의 고양이와 개를 구분하기 위해서 이진 분류기를 구현할 것인데, 이런 이진 분류기를 구현하기 위해서는 Feature Extractor\u001d가 필요하다. 여기서 말하는 Feature Extractor\u001d 란 구분에 용이한 특징을 추출하여 feature vector를 만드는 데 사용하는 것이다. 이렇게 잘 추출한 특징 벡터를 가지고 분류기를 개와 고양이를 구분한다. 특징 추출기를 통해 사람이 직접 Feature vector들을 만들고 Classifier 부분만 기계가 학습하는 방식이 Machine Learning이다. 반면에 딥러닝은 개와 고양이의 row data를 받아서 Feature Extractor\u001d가 네트워크 구조 내부에 포함되어 있다. 특징 추출도 컴퓨터가 하고 classifier 부분도 컴퓨터가 알아서 분류하므로 전체 네트워크 구조가 학습대상이 된다. 딥러닝은 과거 몇번의 고비(XOR문제를 다층 퍼셉트론으로 극복, 기울기 소실문제는 심층믿음 신경망을 통해 극복)을 극복하고 현재는 많은 이들의 관심 속에 발전해가고 있다. 딥러닝의 대중화를 이끈 요소들을 다음 그림들에서 볼 수있다.","categories":[{"name":"deep learning","slug":"deep-learning","permalink":"https://heung-bae-lee.github.io/categories/deep-learning/"}],"tags":[]},{"title":"data engineering basic","slug":"data_engineering_basic","date":"2019-11-29T10:57:36.000Z","updated":"2019-12-08T14:31:09.223Z","comments":true,"path":"2019/11/29/data_engineering_basic/","link":"","permalink":"https://heung-bae-lee.github.io/2019/11/29/data_engineering_basic/","excerpt":"","text":"데이터 분석가와 엔지니어링 차이점 데이터 분석가는 갖춰진 데이터 시스템과 데이터를 통해서 다양한 분석을 하는 업무이며, 엔지니어링은 그와 다르게 비즈니스에 맞는 데이터를 추출하고 그에 따라 분석하는 환경을 만들어 나가는 업무라고 생각할 수 있을 것이다. 특히, 데이터 전처리나 추출, 정제를 담당하는 업무이다. 데이터 엔지니어링이 중요한 이유 비즈니스 모델과 가장 연관이 깊은 업무이다. 왜냐하면 회사의 비즈니스 모델에 맞는 데이터를 가져와야하고 가져온 데이터를 통해 어떤 환경을 갖출 것인지, 그에따라 데이터 분석가들이 전략을 짤 때 기반을 갖출 수 있도록 해주려면 어떻게 해야할지가 중요하기 때문이다.그래서 엔지니어링을 뽑을 경우 해당 비즈니스의 Knowledge가 어느 정도 있는 것이 좋을 거라고 생각이들고 실제로 그렇게 면접도 보는(?)것 같다. 페이스북은 User와 관련 세밀한 데이터가 중요했지만 e-commerce는 User 관련 데이터 보다는 마케팅, CRM, 물류 데이터가 상대적으로 더 중요할 수도 있다. 데이터 아키텍쳐시 고려사항1.비즈니스 모델 상 가장 중요한 데이터는 무엇인가? 발생되는 데이터 양 대비 초점을 맞춰야 하는 데이터는 어떤 것인지 즉, 비용 대비 비즈니스 임팩트가 가장 높으 데이터를 확보하는 것이 제일 중요하다. 2.Data Governance 3.유연하고 변화 가능한 환경 구축 특정 기\b술 및 솔루션에 얽매여져 있지 않고 새로운 테크를 빠르게 적용할 수 있는 아키텍쳐를 만드는 것 생성되는 데이터의 형식이 변화할 수 있는 것처럼 그에 맞는 Tool들과 solution들도 빠르게 변화할 수 있는 시스템을 구축하는 \u001d것 4. Real Time(실시간) 데이터 핸들링이 가능한 시스템 밀리세컨 단위의 스트리밍 데이터가 됐건 하루에 한번 업데이트 되는 데이터든 데이터 아키텍쳐는 모든 스피드의 데이터를 핸들링 해야한다. Real Time Streaming Data Processing Cronjob Serverless Triggered Data Processing 5. 시큐리티 내부와 외부 모든 곳에서부터 발생할 수 있는 위험요소들을 파악하여 어떻게 데이터를 안전하게 관리할 수 있는지 아키텍쳐 안에 포함 6. 셀프 서비스 환경 구축 데이터 엔지니어 한명만 엑세스가 가능한 데이터 시스템은 확장성이 없는 데이터 분석 환경이다. 이런 환경에서는 예를 들어, 데이터 분석가들이라던지, 데이터 사이언티스트들, 비즈니스팀들 등 다른 사람들도 BI Tool, Query System for Analysis, Front-end application등 이 가능하게끔 확장성이 있도록 환경을 구축하는 것이 중요하다. 데이터 시스템의 옵션들API시대 현재 마케팅, CRM, ERP등 다양한 플랫폼 및 소프트웨어들은 API라는 송신방법을 통해 데이터를 주고 받을 수 있는 환경을 구축하여 생태계를 생성되어있다. 예를들면, facebook, google, Spotify같은 서비스들이 회사자체에 DB시스템을 구축하고 있는데, 이런 데이터들을 API를 통해 바로 DB에 엑세스해서 서비스를 제공할 수도 있고, 아니면 DB를 새로 생성해 거기에 받아서 저장해놓은 후 정제 및 분석 환경을 구축하여 다양한 서비스를 제공할 수 있다. 이런 환경에서 현재 많은 서비스들이 있으며, 새로운 서비스를 개발하는 입장에서는 필요한 여러가지 서비스들이 있는데, 일일이 다 만들수 없으므로 만들어져 있는 것들, 써드 파티라고 하는 서비스들을 이용하는 것이다. 이러한 서비스를 이용하는 데이터를 가지고도 또다른 분석환경을 구\b축해야 한다. ex) CaFe24(호스팅업체), facebook Ads,Google Ads(마케팅분야) Relational Databases 데이터의 관계도를 기반으로 한 디지털 데이터베이스로 데이터의 저장을 목적으로 생겨났다. SQL이라고 하는 스탠다드 방식을 통해 자료를 열람하고 유지한다. 현재 대부분의 서비스들이 가장 많이 쓰고 있는 데이터 시스템. NoSQL Databases 관계형 데이터 베이스에서는 Schema 형식에 맞춰 데이터를 추출 및 저장했다면, 이제는 너무나 다양한 형식이 없는 데이터 부터 틀에 맞출 수 없는 데이터들이 생성되어 NoSQL이 대두되었다. 예를 들면 메신저에서 많이 사용된다. Not Only NoSQL Unstructured, Schema Less Databases Scale horizontally Highly scalable Haddop / Spark / Presto 등 빅데이터 처리Distribtion Storage System / MapReduce를 통한 병렬 처리 Spark Hadoop의 진화된 버전으로 빅데이터 분석 환경에서 Real Time 데이터를 프로세싱하기에 더 최적 java, Python, Scala를 통한 API를 제공하여 Application 생성 SQL Query 환경을 서포트하여 분석가들에세 더 각광 서버리스 프레임워크 Triggered by http requests, database events, queuing services DB가 됐건, 어떤 server가 됐\u001d건 어떠한 하나의 가상 클라우드상에서 server가 필요하게 되는데, 서버를 생성하고 유지및 관리할 때 데이터가 발생하는 event가 발생할 때 Trigger가 되는 부분들을 처리하기 위해 사용한다. Pay as you User 항상 Server를 띄워놓고 있지 않기 때문에 쓰는 만큼만 비용을 지불하기에 좋다. Form of functions 하나의 Function이라고 생각하는 것이 좋다. 예를 들어서, 서버리스 프레임 워크를 통해서 어떠한 event가 들어왔을 경우, 어떤 것으로 Trigger가 됐을때, 어떠한 Algorithm을 실행시키는 function이라고 생각하면 된다. 3rd Party 앱들 및 다양한 API를 통해 데이터를 수집 정제하는데 유용 데이터 파이프라인데이터 파이프라인 데이터를 한 장소에서 다른 장소로 옮기는 것을 의미 ex) API -&gt; DB, DB -&gt; DB, DB -&gt; BI Tool 데이터 파이프라인이 필요한 경우 1) 다양한 데이터 소스들로부터 많은 데이터를 생성하고 저장하는 서비스를 구축할 경우 필요하다! 2) 데이터 사일로: 마케팅, 어카운팅, 세일즈, 오퍼레이션 등 각 영역의 데이터가 서로 고립되어 있는 경우 (ex)대기업의 각 부서를 생각해보면 이해하기 쉬울 것이다.즉, 각각의 팀들이 따로 존재하여 공유가 어려운경우) 3) 실시간 혹은 높은 수준의 데이터 분석이 필요한 비즈니스 모델 ex)facebook등 4) 클라우드 환경으로 데이터 저장 데이터 파이프라인 구축시 고려사\u001d항 Scalability : 데이터가 기하급수적으로 늘어났을때도 작동하는가? Stability : 에러, 데이터플로우 등 다양한 모니터링 관리 Security : 데이터 이동간 보안에 대한 리스크는 무엇인가? 데이터 프로세싱 자동화란? 데이터 프로세싱 자동화란 필요한 데이터를 추출, 수집, 정제하는 프로세싱을 최소한의 사람 인풋으로 머신이 운영하는 것을 의미 ex) Spotify 데이터를 하루에 한번 API를 통해서 클라우드 데이터베이스로 가져온다고 했을 때 매번 사람이 데이터 파이프라인을 작동하는 것이 아니라 Crontab 등 머신 스케쥴링을 통해 자동화 자동화를 위해 고려할 사항 error가 뜨는 것이든, 추출을 했으면 분석을 한다던지 사람이 하면 순서나 여러가지 고랴를 할 수 있지만, 자동으로 헀을경우는 머신이 모르기 떄문에 다음과 같은 사항들을 고려해야한다. 1) 데이터 프로세싱 스텝들 Spotify API에서 어떠한 데이터를 가져와야되고, 그 중에서 어떠한 것들은 걸러내고, 어떤 알고리즘을 돌리고, 그 후에 시각화를 한겠다는 말 그대로 프로세싱 스텝을 의미. 2) 에러 핸들링 및 모니터링 에러가 생성이 됐을때, 어떻게 반응을 하게끔할 것인지, 에러나 퍼포먼스 또는 데이터 추출이 얼마나 걸렸는지 같은 사항을 모니터링 할수 있게끔 구축해야한다. exampl.log라는 파일에 다양한 로그들을 저장하는데, 그 생성된 로그들도 CloudWatch에도 생성되어 모니터링이 가능하다. 3) Trigger/ Scheduling 다음 단계를 실행하기 위해 어떻게 Trigger가 되어서 실행을 시킬지, 하루에 한번 돌릴지, 아니면 한달에 한번 돌릴지 등에 관한 스케줄을 고려해야한다. Spotify 프로젝트 데이터 아키텍쳐Ad hoc VS Automated Ad hoc 분석 환경 구축은 서비스를 지속적으로 빠르게 변화시키기 위해 필수적인 요소 Ad hoc 분석은 쉽게 말해 분석을 하고 싶을 때만 하는 것이다. 이런 Ad hoc 분석이 필수적인 이유는 구축한 분석환경을 통해서 다양한 사람들이 분석을 할 수 있게끔해야 하기 때문이다. 이니셜 데이터 삽입, 데이터 Backfill 등을 위해 Ad hoc 데이터 프로세싱 시스템 구축 필요 Automated : 이벤트, 스케쥴 등 트리거를 통해 자동화 시스템 구축","categories":[{"name":"data engineering","slug":"data-engineering","permalink":"https://heung-bae-lee.github.io/categories/data-engineering/"}],"tags":[]},{"title":"Requests 모듈 사용하기(HTTP 통신)","slug":"Request","date":"2019-09-28T07:20:55.000Z","updated":"2019-11-21T10:39:17.411Z","comments":true,"path":"2019/09/28/Request/","link":"","permalink":"https://heung-bae-lee.github.io/2019/09/28/Request/","excerpt":"","text":"Requests 모듈 http request/response를 위한 모듈 HTTP method를 메소드 명으로 사용하여 request 요청 예)GET, POST 가장 우리가 흔하게 크롤링을 하는데 사용하는 방식이며, API만 알고 있다면 쉽게 사용할 수 있다!","categories":[],"tags":[{"name":"crawling","slug":"crawling","permalink":"https://heung-bae-lee.github.io/tags/crawling/"}]},{"title":"웹 기본 지식 이해하기 01(chrome을 이용하여 웹페이지 분석하기)","slug":"HTTP_method","date":"2019-09-28T05:52:18.000Z","updated":"2019-12-06T04:56:15.576Z","comments":true,"path":"2019/09/28/HTTP_method/","link":"","permalink":"https://heung-bae-lee.github.io/2019/09/28/HTTP_method/","excerpt":"","text":"HTTP HyperText Transfer Protocol: HTML(HyperText Markup language) 문서 등의 리소스를 전송하는 프로토콜(규약) 클라이언트에서 서버로 HTTP 요청을 하는데 이 요청 방식으로는 Get, Post, Put, delete, Option등이 있는데 이 중 크롤링에서 가장 많이 쓰이는 두가지(Get, Post)를 알아볼 것이다. GET 요청 : 데이터를 URL에 포함하여 전달이 가능하다. 그러므로 정보의 공유가 가능하다. 공유가 가능하다는 의미는 가장 쉬운 예를 들자면 URL 클릭하면 그 정보를 담고있는 웹 페이지를 요청하여 우리의 웹 브라우져에 랜더링을 거쳐 보여주는 것이 가능하다는 의미이다.(주로 리소스 요청에 사용) ex)https://search.naver.com/search.naver?sm=top hty&amp;fbm=1 POST 요청 : 데이터를 Form data에 포함하여 전달 그래서 대부분 우리 눈에 안보이는 요청이다.(주로 로그인에 사용) 예를 들어 설명하자면, 먼저 로그인 페이지가 있다면, 참고로 이 로그인 페이지는 리소스를 요청하는 것이므로 GET 방식이고 로그인 페이지에서 로그인을 하는 행위를 할 경우 이 떄 사용된다. ex) https://www.kangco.com/meber/member_check.asp 어떠한 방식으로 해당 웹 페이지가 서버에 요청을 하는지는 개발자 도구의 Network 탭에서 특정 Name을 클릭 후 Request Method를 보면서 확인할 수 있다. HTML element 이해하기(tag, attribute, value) HTML(Hyper Text Markup Language) 웹사이트를 생성하기 위한 언어로 문서와 문서가 링크로 연결되어 있고, tag를 사용하는 언어 태그(Tag)란? HTML 문서의 기본 블락 &lt;태그명 속성1=&quot;속성값1&quot; 속성2=&quot;속성값2&quot;&gt;Value&lt;/태그명&gt; (Value가 있는 경우) &lt;태그명 속성1=&quot;속성값1&quot; 속성2=&quot;속성값2/&quot;&gt; (Value가 없는 경우) 크롤링을 단 한번이라도 직접 해보신 분들은 우리가 원하는 값을 추출하기 위해서는 어느 정도의 HTML 지식이 있어야한다. 즉, Value를 추출하기 위해 해당 Value가 포함되어 있는 tag의 구조를 알아야 한다는 것이다. 위의 단순한 tag의 구조는 그런 관점에서 혹시라도 HTML의 구조를 모르시분들을 위해 간단히 설명하고 넘어가는 것이다. Requests 모듈 http request/response를 위한 모듈 HTTP method를 메소드 명으로 사용하여 request 요청 예)GET, POST 가장 우리가 흔하게 크롤링을 하는데 사용하는 방식이며, API만 알고 있다면 쉽게 사용할 수 있다!","categories":[],"tags":[{"name":"crawling","slug":"crawling","permalink":"https://heung-bae-lee.github.io/tags/crawling/"}]},{"title":"colab & Kaggle 연동 및 기초 사용법","slug":"kaggle_00","date":"2019-08-01T07:26:46.000Z","updated":"2019-09-28T05:51:41.381Z","comments":true,"path":"2019/08/01/kaggle_00/","link":"","permalink":"https://heung-bae-lee.github.io/2019/08/01/kaggle_00/","excerpt":"","text":"Kaggle Korea에서 진행중인 대회에서 Kaggle Kernel을 사용하다 보니 커널이 자꾸 죽는 이유는 도대체 무엇인지… competition에 늦게 참여한 관계로 더 시간이 촉박하기만 한데…. 그래서 google colab으로 바꾸려고 생각하였다. 캐글은 예측모델 및 분석 대회를 하는 플랫폼이다. 개인 및 단체에서 해결하고 싶은 과제와 데이터를 등록하면, 캐글에 가입한 데이터 과학자들이 모델을 개발하고 결과를 등록한다. 예측력을 순위로 하여 가장 좋은 순위에게는 상금도 주워진다. 그만큼 데이터 사이언스에 관한 분들은 모를 수 없는 사이트라고 생각한다. Google Colaboratory는 Google Drive + Jupyter Notebook의 기능을 가지고 있으며, Google Drive처럼 협업 가능(동시에 수정 가능)하다고 한다. https://colab.research.google.com/로 접속시 사용 가능하다. 무엇보다 가장 좋았던 점은 캐글의 커널은 9시간이 최장 이용시간인 반면에, colab은 12시간이다. 3시간 차이에 얼마나 더 바뀌겠냐라는 분들도 계시 겠지만 GPU가 없는 나에겐 3시간은 엄청난 시간이다. 더 자세한 사항은 [https://zzsza.github.io/data/2018/08/30/google-colab/][https://zzsza.github.io/data/2018/08/30/google-colab/] 이 블로그를 참조하는 것을 추천한다! 개인적으로 데이터 사이언스에 관해 많은 것에 대해 자세히 다루고 있다고 생각하며 강추한다!(절대 홍보글 아님.) 구글 드라이브와 Colab 연동 매번 session이 끊기거나 종료되면 이 작업을 해주어야 한다. 그래도 kaggle 보단 내 컴퓨터에선 덜 끊긴다. 먼저, 구글 드라이브와 연동을 시키는 이유는 로컬에서 Colab working directory로 파일을 업로드하게 되면 차후 다시 접속할 때 다시 업로드를 해주어야하지만 구글 드라이브에선 바로 읽을 수 있기 때문이다. 1234567from google.colab import authauth.authenticate_user()# colab에서 drive란 폴더를 만든 후, 우리 구글 드라이브의 root와 drive 폴더를 연결(mount)from google.colab import drivedrive.mount('/content/gdrive') 구글 드라이브와 로컬 연동 파일을 하나씩 업로드하지 말고 대량의 파일을 한꺼번에 업로드하고 싶은 경우 [BackupAndSync](https://www.google.com/drive/download/)를 사용해 로컬과 구글 드라이브를 연동 1) 위 링크를 클릭해 백업 및 동기화 다운로드 2) InstallBackupAndSync.dmg라는 파일을 클릭한 후, (열리지 않으면 우클릭 후 열기) 프로그램 설치 3)맥북 환경이 한글이신 분은 Google에서 백업 및 동기화라는 응용 프로그램이 추가됨(이것도 실행이 안되면 클릭 후 실행) 환경 설정에서 동기화할 폴더 선택 (단, 크기가 큰 파일은 동기화 시간이 오래 걸릴 수 있음) Kaggle 연동하기- 1) Kaggle beta API Json Key 다운- Kaggle - My Account - Dataset 옆에 있는 …을 클릭한 후, Account로 이동 - 하단에 API 부분에 Create New API Token을 클릭하면 Json Key가 다운로드 됨 - 이 Json 키를 매번 Colab에서 올려서 할 수도 있지만, 더 편하게 사용하고 싶어서 Google Storage에 Json 파일을 올리고, 거기서 키를 복사해오는 방법으로 진행합니다 - 2) Google Storage에 Json Key 저장- Google Storage로 이동한 후, Storage 버킷 선택 (버킷이 없다면 생성!) - Colab에서 아래 명령어 입력 123456from google.colab import authauth.authenticate_user()!mkdir -p ~/.kaggle!mv ./kaggle.json ~/.kaggle/!chmod 600 ~/.kaggle/kaggle.json 우선 여기까지! 내일 다시 시작합니다!!!!!","categories":[{"name":"Kaggle","slug":"Kaggle","permalink":"https://heung-bae-lee.github.io/categories/Kaggle/"}],"tags":[]},{"title":"[CS231n]Lecture10-Recurrent Neural Networks","slug":"cs231n_10","date":"2019-07-29T07:22:55.000Z","updated":"2019-07-31T13:40:54.829Z","comments":true,"path":"2019/07/29/cs231n_10/","link":"","permalink":"https://heung-bae-lee.github.io/2019/07/29/cs231n_10/","excerpt":"","text":"","categories":[],"tags":[{"name":"CS231n","slug":"CS231n","permalink":"https://heung-bae-lee.github.io/tags/CS231n/"}]},{"title":"[수리통계학] 나혼자 정리하는 통계생의 수리통계학 00","slug":"Statistics_00","date":"2019-07-29T07:12:38.000Z","updated":"2019-07-31T13:40:58.126Z","comments":true,"path":"2019/07/29/Statistics_00/","link":"","permalink":"https://heung-bae-lee.github.io/2019/07/29/Statistics_00/","excerpt":"","text":"먼저, 이 글은 data science라는 분야를 공부하며 원래 통계학을 전공했던 나였지만 학부과정에서 배웠던 그리고 부끄럽지만 석사 때 배웠다고 기억하고 있는 조각들을 모아 수리통계학을 간단히 정리하기 위해 쓰는 글이다. 확률과 확률분포여러 가지 조사 연구들은 동일한 조건에서의 반복 실험이 대체적으로 표준이 된다는 것이 특징이다. 예를 들어, 의학 연구에서는 복용된 약의 효과에 관심이 있을 것이다. 우리가 어떤 결론을 내리기 까지 그에 따른 근거를 뒷받침하기 위한 정보를 얻을 수 있는 유일한 방법은 실험이다. 이런 실험을 통해 얻은 실험값들은 예측할 수 없다는 것이 실험의 특성이다. 여기서 통계를 공부하다 보면 제일 먼저 알게되는 sample space를 정의할 것이다. sample space : 같은 조건에서 반복할 수 있는 실험에서 실현 가능한 결과의 집합","categories":[{"name":"Statistics - Mathematical Statistics","slug":"Statistics-Mathematical-Statistics","permalink":"https://heung-bae-lee.github.io/categories/Statistics-Mathematical-Statistics/"}],"tags":[]},{"title":"[CS231n]Lecture09-CNN_Architectures","slug":"cs231n_09","date":"2019-07-28T03:43:10.000Z","updated":"2019-07-31T13:40:52.676Z","comments":true,"path":"2019/07/28/cs231n_09/","link":"","permalink":"https://heung-bae-lee.github.io/2019/07/28/cs231n_09/","excerpt":"","text":"LeNet 산업에 아주 성공적으로 적용된 최초의 ConvNet이다. 이미지를 입력으로 받아 Stride = 1인 5x5필터를 거치고 몇 개의 Conv Layer와 Pooling Layer를 거친다. 그리고 마지막 출력 노드 전에 Fully Connected Layer가 붙는다. 엄청 간단한 모델이지만 숫자 인식에서 엄청난 성공을 거두었다. AlexNet 2012년에 등장한 최초의 Large scale CNN이며 Image Classification Benchmark의 우승 모델이다. ConvNet 연구의 부흥을 일으킨 장본인이다. 수년 전까지 대부분의 CNN 아키텍쳐의 베이스 모델로 사용되어 왔다. AlexNet은 다양한 Task의 transfer learning에 많이 사용되었다. AlexNet은 기본적으로 conv - pool - normalization 구조가 2번 반복된다. 그리고 conv layer가 조금 더 붙고 (CONV 3,4,5) 그 뒤에 pooling layer가 있다.(Max POOL3) 그리고 마지막에는 Fully connected layer가 몇 개 붙는다.(FC 6,7,8) 생긴 것만 봐서는 기존의 LeNet과 상당히 유사하며 layer만 늘어 났다고 생각이 들 것이다. AlexNet은 5개의 Conv Layer와 2개의 FC-Layer(마지막 FC Layer 전까지)로 구성된다. 다른 Conv Net의 다이어그램과 유사하긴 하지만 한 가지 차이점이 있다. 모델이 두개로 나누어져서 서로 교차한다는 것이다. AlexNet을 학습할 당시에 3GB GTX850으로 학습시켰다. 그래서 전체 Layer를 GPU에 다 넣을 수 없어서 분산 시켜 넣을 수 밖에 없었다. 각 GPU가 모델의 뉴런과 Feature Map을 반반씩 나눠가진다. Conv 1,2,4,5를 살펴보면 같은 GPU 내에 있는 Feature Map만 사용할 수 있다. 즉, 전체 96개의 feature Map을 볼 수 없다. 그래서 다이어그램을 보면 각 Conv Layer의 Depth가 48인 것이다. Conv 3, FC 6,7,8를 보면 이 Layer들은 이전 계층의 전체 Feature Map과 연결되어 있다. 이 Layer들에서는 GPU간의 통신을 하기 때문에 이전 입력 Layer의 전체 Depth를 전부 가져올 수 있는 것이다. AlexNet 논문의 아키텍쳐와 관련한 조그만 이슈는 그림을 자세히 보면 첫 Layer가 224x224라고 되어 있는데, 실제 입력은 227x227이다. 질문 Pooling layer에는 파라미터가 없는가? 파라미터는 우리가 학습시키는 가중치이다. Conv Layer에는 학습할 수 있는 가중치가 있다. 반면 Pooling의 경우에는 가중치가 없고 그저 특정 지역에서 큰 값을 뽑아내는 역할만 한다. 따라서 학습시킬 파라미터가 없는 것이다. 각각의 Layer의 파라미터 사이즈를 계산해 보자!!!! ZFNet 2013년 우승 모델이며 AlexNet의 하이퍼 파라미터를 개선한 모델이다. AlexNet과 같은 Layer 수이고, 기존의 구조도 같다. 다만, stride size, 필터 수 같은 하이퍼 파라미터를 조절해서 AlexNet의 Error rate를 좀 더 개선시켰다. 앞으로 언급할 두가지 모델은 Batch normalization이 없던 시절이었기 때문에 깊은 모델을 학습시키는 일이 어려웠다. 그렇기에 깊은 모델을 수렴시키기 위해서 각종 테크닉을 사용해야 했다.\u001d 먼저, VGG는 초기에 11 Layer이었는 11 Layer가 모델이 잘 수렴하는 한계였기 때문이다. 그리고 나서 11 Layer 중간에 Layer를 무작위로 추가해서 VGG-16, VGG-19를 학습시켰다. GoogLeNet의 경우에는 auxiliary classifiers를 도입하여 단지 네트워크의 초기 Layer에 gradient를 직접 흘려 보내기 위한 수단이었다.(성능을 올리기 위해 도입한것이 아니다! 그리고 Batch Norm이 있다면 굳이 이런식의 테크닉들은 더이상 필요치 않다!!!) VGGNet 훨씬 더 깊어졌고 더 작은 필터를 사용한다. 더 깊게 쌓이므로써 Non-Linearity를 더 추가 할 수 있고 파라미터 수도 더 적어지게 되었다. AlexNet에서는 8개의 Layer -&gt; VGGNet 16~19개의 Layer 3x3필터만 사용 (이웃픽셀을 포함할 수 있는 가장 작은 필터) 이유 : 필터의 크기가 작으면 파라미터의 수가 더 적어서 Depth를 더 키울 수 있다. 3x3 필터를 여러 개 쌓은 것은 결국 7x7 필터를 사용하는 것과 실질적으로 동일한 Receptive Filter를 가지는 것이다. 작은 필터를 유지해 주고 주기적으로 Pooling을 수행하면서 전체 네트워크를 구성하게 된다. fc7 은 4096 사이즈의 Layer인데 아주 좋은 feature representation을 가지고 있는 것으로 알려졌으며 \b다른 데이터에서도 feature 추출이 잘되며 다른 Task에서도 일반화 능력이 뛰어난 것으로 알려져있다. VGG19의 경우 VGG16과 유사한 아키텍쳐이지만 Conv Layer가 조금 더 추가 되었다. VGG19가 아주 조금 더 좋다. 그러나 보통 VGG16을 더 많이 사용한다. AlexNet에서 처럼 모델 성능을 위해서 앙상블 기법을 사용했다. 질문) 3x3인 Stride가 1인 필터 3개를 쌓게 되면 실질적인 Receptive Field가 어떻게 될까? Receptive Field은 필터가 한번에 볼 수 있는 입력의 Spatial area이다. 첫번째 Layer의 Receptive Field는 3x3이다. 두 번째 Layer의 경우는 각 뉴런이 첫 번째 Layer 출력의 3x3 만큼을 보게 될 것이다. 그리고 3x3 중에 각 사이드는 한 픽셀씩 더 볼 수 있게 된다. 따라서 두번째 Layer의 경우는 실제로 5x5의 receptive filed를 가지게 된다. 3번째 Layer의 경우 2번째 Layer의 3x3을 보게된다. 그리고 이 과정을 피라미드처럼 그려보면 입력 Layer의 7x7을 보게 되는 것이다.따라서 실질적인 Receptive Field는 여기에서 7x7이 된다. 하나의 7x7 필터를 사용하는 것과 동일하다. 질문) 하나의 Conv Layer 내에 여러개의 필터가 존재하는 이유는? 각 필터가 존재하는 이유는 서로 다른 패턴을 인식하기 위해서라고 할 수 있다. 각 필터는 각각의 Feature Map을 만들게 된다. 질문) Localization은 무엇인가? task 중에서 예를 들면 “이미지에 고양이가 있는가?”를 분류하는 것 뿐만 아니라 정확히 고양이가 어디에 있는지 네모박스를 그리는 것이다. Detection은 이미지 내에 다수의 객체가 존재할 수 있다. 그에 반해 localization은 이미지에 객체가 하나만 있다고 가정하고 이미지를 분류하고 추가적으로 네모박스도 쳐야한다. 질문) 네트워크가 깊어질수록 Layer의 필터 갯수를 늘려야 하는지?(Channel Depth를 늘려야 하는\u001d지) 디자인하기 나름이고 반드시 그럴 필요는 없다. 하지만, 실제로 사람들이 Depth를 많이 늘리는 경우가 많다. Depth를 늘리는 이유 중 하나는 계산량을 일정하게 유지시키기 위해서이다. 왜냐하면 보통 네트워크가 깊어질수록 각 Layer의 입력을 Down sampling하게 된다. 즉, 네트워크를 통해 나가면서 점점 정보를 잃어나가는 현상이 발생될 수 있다는 것이다. 그러므로 Spatial area가 작아질수록 필터의 depth를 조금씩 늘려주게 된다. Width나 Height가 작아지기 때문에 Depth를 늘려도 부담이 없다. GoogLeNet 2014년 Classification Challenge에서 우승한 모델이다. 22개의 Layer를 가진 깊은 네트워크이다. 가장 중요한 것은 효율적인 계산에 관한 그들의 특별한 관점이 있다는 것과 높은 계산량을 아주 효율적으로 수행하도록 네트워크를 디자인했다는 점이다. “a good local network typology”를 디자인 하고 싶었다. 그리고 “network within a network”라는 개념으로 local topology를 구현했고 이를 쌓아올렸다. Inception module을 여러개 쌓아서 만든다. 또한 파라미터를 줄이기 위해 FC-Layer를 사용하지 않는다. 전체 파라미터 수가 60M인 AlexNet에 비해 GoogLeNet은 전체 파라미터 수가 5M 정도이다. Inception Module 내부에는 동일한 입력을 받는 서로 다른 다양한 필터들이 병렬로 존재한다. 이전 Layer의 입력을 받아서 다양한 Conv 연산을 수행 한 후 각 Layer에서 각각의 출력 값들이 나온다. 그 출력들을 모두 Depth 방향으로 합친다.(concatenate) 그렇게 합치면 하나의 tensor로 출력이 결정되고 이 하나의 출력을 다음 레이어로 전달하는 것이다. 질문) 이러한 다양한 연산을 수행하고 이를 하나로 합쳐주는 아주 단순한 방식이 갖는 문제점은 무엇일까? 계산 비용에 문제가 있다. 1x1 conv의 경우 입력에 맞춰 depth는 256이다. 그리고 128개의 필터 하나다. 그리고 128개의 필터 하나 당 28x28 Feature map을 생성하게 될 것이다. 이런식으로 다른 Layer의 출력값을 계산해 보면 다음 그림과 같을 것이다. 참고로 이런 계산이 나온 이유는 spatial dimension을 유지하기 위해서 zero padding을 하였기 때문이다.Stride를 잘 조절해서 Spatial dimension를 유지하면 입력과 출력의 크기는 같게 된다. 즉 28x28은 동일하고 depth가 점점 쌓이게 된다는 것을 의미한다. 그림에서는 최종적으로 28 x 28 x 672 가 된다. Inception module의 입력은 28x28x256 이었으나 출력은 28x28x672이 된 것이다. Spatial dimension은 변하지 않았지만 depth가 엄청나게 불어난 것이다. 연산량이 \u001c많다는 것이 문제이며, Pooling Layer는 Depth를 그대로 유지하기 때문에 문제를 악화 시킨다. 위와 같은 문제를 해결하기 위한 key insight bottleneck layer를 이용하는 것이다. Conv 연산을 수행하기에 앞서 입력을 더 낮은 차원으로 보내는 것이다.(depth를 더 낮은 차원으로 projection하는 \u001d것) input feature map들 간의 선형 결합(linear combination)이라고 할 수 있다. 주요 아이디어는 바로 입력의 depth를 줄이는 것이다.각 Layer의 계산량은 1x1 conv를 통해 줄어든다. 질문) 1x1 Conv를 수행하면 일부 정보손실이 발생하지 않는다? 정보 손실이 발생할 순 있지만 동시에 redundancy가 있는 imput features를 선형결합 한다고 볼 수 있다. 1x1 conv로 선형결합을 하고 non-Linearity(ReLU같은)를 추가하면 네트워크가 더 깊어지는 효과도 있다. 일반적으로 1x1 con를 추가하면 여러모로 도움이 되고 더 잘 동작한다. 위의 그림에서 파란색 네모 박스는 추가시킨 보조 분류기(auxiliary classifier)이다. 그 구조는 Average pooling과 1x1 conv가 있고 FC-layer도 몇개 붙는 우리가 알고있는 작은 네트워크들이다. SoftMax로 1000개의 ImageNet class를 구분한다. 또한 네트워크가 깊기 때문애 이곳에서도 loss를 계산하\b고 추가적인 gradient를 얻을 수 있고 따라서 중간 Layer의 학습을 도울 수 있다. 질문) 보조분류기에서 나온 결과를 최종 분류 결과에 이용할 수 있는가?? GoogLeNet 학습 시, 각 보조분류기의 Loss를 모두 합친 평균을 계산한다. 아마도 도움이 될 것이다. 질문) bottleneck layer를 구성할 때 1x1 conv 말고 다른 방법으로 차원을 축소시켜도 되는가?? 여기에서 1x1 conv를 쓴 이유는 차원 축소의 효과도 있고 다른 Layer들 처럼 conv Layer이기 때문이다. 차원 축소 과정에서 이전의 feature map과 연관이 있는지 학습하려면 전체 네트워크를 Backprop으로 학습시킬 수 있어야 한다. 네트워크가 엄청 깊은 경우에서는 gradient 신호가 점점 작아지게 되고 결국에는 0에 가깝게 될 수 있다. 그렇기 때문에 보조 분류기를 이용해서 추가적인 gradient 신호를 흘려준다. 이 때 backprop은 각 보조분류기 별로 실행하는 것이 아닌 네트워크 전체가 한번에 작동시킨다. 질문) 각 Layer가 가중치를 공유하는가 아닌가?? 모든 Layer를 가중치를 공유하지 않는다. ResNet 2015년도 우승 모델이며, 혁명적으로 네트워크의 깊이가 깊어진 모델이다.(152개의 Layer) residual connection 이라는 방법을 사용한다. residual block들을 쌓아올리는 구조이다. short connection과 residual block이 도입된 모\u001d델 모델 Depth가 50이상일 때 Bottleneck Layers를 도입 ‘CNN을 깊고 더 깊게 쌓게 되면 어떤 일이 발생할까?’라는 의문에서 부터 시작된다. 예를 들어, VGG에 conv pool Layer를 깊게만 쌓는다고 과연 성ㄴ능이 더 좋아지는 것이 맞는지를 보자면 아니라는 것이다. 다음 그림에서 56-Layer와 20-Layer를 비교해서 설명하고 있다. 우리는 56-Layer는 상대적으로 더 많은 파라미터를 가지고 있기에 20-Layer보다 좀더 overfitting이 일어날 확률이 높다고 생각할 수 있을 것이다. 허나 우리 예상처럼 test error는 56-layer가 더 낮지만 training error 또한 더 낮기에 overfitting이 원인이 아니라는 것을 확실히 알 수 있다. ResNet 저자들아 내린 가설은 더 깊은 모델 학습 시 Optimization에 문제가 생긴다는 것이다. 그렇다면 모델이 더 깊다면 적어도 더 얕은 모델만큼은 성능이 나와야 하지 않는가라는 생각으로 인해 더 얕은 모델의 가중치를 깊은 모델의 일부 Layer에 복사한다. 그리고 나머지 Layer는 identity mapping을 하여 Deeper Model의 학습이 제대로 안되더라도 적어도 shallower Model 만큼의 성능을 보장하게끔 디자인 한다. 이런 아이디어를 모델에 적용시키기 위해 가중치가 없으면 입력을 identity mapping을 시켜 출력으로 내보내는 Skip Connection을 도입하게 된다. 실제 Layer는 변화량(delta)만 학습하면 된다. 입력 X에 대한 잔차(residual)이라고 할 수 있다. 질문) Layer의 출력과 Skip Connection의 출력이 같은 차원인가? 그렇다. 두 경로의 출력 값 모두 같은 차원이다. 일반적으로는 같은 차원이 맞지만, 그렇지 않은 경우에는 Depth-wise padding으로 차원을 맞춰준다. 질문) Layer의 출력인 Residual의 의미는 무엇인가? 아래 그림을 보면, 전체 출력 값은 F(x)+X 이고, F(x)는 Layer의 출력 값이다. X는 그저 입력값이다. 왼쪽의 평범한 네트워크는 H(x)를 학습시키고 있지만 아주 깊은 네트워크에서는 H(x)를 학습시키는 것은 너무 어렵다. 그래서 ResNet의 아이디어는 H(x)=F(x)+x이므로 F(x)를 학습시켜보면 어떨까라는 것이다. 즉, H(x)를 직접 배우는 대신에 X에 얼마의 값을 더하고 빼야할까를 배우는 것이 쉬울것이라고 생각한 것이다. 이것은 단지 가설일 뿐이지만 가설이 참이라면 모델의 일부가 학습된 shallow layers이고 나머지 layer들은 identity로 구성되어진 상황에서는 잘 동작할 것이다. 이는 대부분의 layer가 잘 동작하려면 layer의 출력이 identity에 가까워야 할지 모른다는 것을 암시한다. 이 때문에 Identity(Input) + 변화량(delta)만 학습시키면 된다. 예를들어, Output = Input(Identity)이어야만 하는 상황이\u001d면 F(x) = 0 이 되면 그만이다. 이는 상대적으로 학습시키기 쉽다고 볼 수 있다. ResNet에서는 Layer의 출력은 입력 + residual block의 출력이다. 우선 residual block의 가중치가 0이면 이 block은 identity mapping을 한다. 이러한 속성으로 모델이 필요없는 Layer를 사용하지 않도록 학습하는데 아주 유용하다. ResNet의 관점에서 L2 Regularization을 해석해 볼 수도 있다. Layer에 L2 Regularization을 추가시키면 L2는 모든 파라미터가 0이 되도록 노력할 것이다. 사실 CNN Architectures의 관점에서 보면 모든 파라미터가 0이면 이상하다. 하지만 ResNet의 관점에서는 파라미터를 0으로 만드려는 속성은 모델이 불필요한 Layer를 사용하지 않도록 해줄 수 있다.","categories":[{"name":"CS231n","slug":"CS231n","permalink":"https://heung-bae-lee.github.io/categories/CS231n/"}],"tags":[]},{"title":"내가 정리하는 C/C++/자료구조_00","slug":"data_structure_00","date":"2019-07-24T08:03:14.000Z","updated":"2019-12-11T16:25:06.686Z","comments":true,"path":"2019/07/24/data_structure_00/","link":"","permalink":"https://heung-bae-lee.github.io/2019/07/24/data_structure_00/","excerpt":"","text":"개발환경 구축하기C와 C++1) C++는 기본적으로 C의 기능을 확장한 형태의 프로그래밍 언어이다.2) 따라서 C 언어의 기능을 포함하고 있다는 점에서 C++프로젝트로 .C 확장자를 갖는 파일을 생성하여 코딩해도 정상적으로 동작한다. 개발환경 구축하기 나는 개인적으로 IDE(Integrated Development Environment) 중에서 Atom을 이미 설치하고 있기에 따로 대표적인 Visual Studio를 설치하진 않았다. Atom에서는 따로 gpp-compiler 라는 패키지를 설치해주면 끝난다! 단축키 또한 자신이 커스터마이징 할 수 있는데, 나는 default인 f5가 compile f6이 디버깅으로 되어있는 상태에서 사용할 것이다. Development_environment 전통적인 프로그램은 전처리기 -&gt; 컴파일러 -&gt; 링커를 거쳐 실행파일로 만들어진다. 역시! 모든 언어의 기초를 배울때 하는 Hello World를 언급하며 시작해보자! 12345678#include &lt;stdio.h&gt;int main(void) &#123; printf(\"Hello world\\n\"); // system(\"pause\"); system( \"read -n 1 -s -p \\\"Press any key to continue...\\\"\" ); return 0;&#125; 명령문 하나하나씩 설명을 하자면 처음, #include 명령어를 이용해 다양한 라이브러리를 불러 올 수 있다. 위에서 불러온 stdio.h(standard io)는 여러 기본적인 기능을 포함하고 있지만 그 중 대표적으로 위에서 사용한 printf가 있다.main함수는 다양한 함수가 사용 될 수 있겠지만 처음 시작할 때는 main함수 이후에 사용한다. 또한 가장 큰 특징은 함수는 반환값이 없을 수도 있지만 main 함수에서는 항상 0을 반환하는 것이 일반적이다. 나와 같이 R과 python으로 프로그래밍을 배운 사람이라면 ;이 낯설을 것이다. C/C++에서는 하나의 명령어가 끝났음을 알리기 위해 ;을 붙인다. 위의 명령 프롬프트에서 pause 명령어를 실행시키면 키보드를 입력 전까지 대기하는 기능을 사용할 수 있다. system 함수를 이용하여 운영체제의 기본적인 기능을 이용할 수 있다. 허나, 나의 mac북은 window의 프롬프트 창과는 다른 운영체제이므로 당연히 pause가 걸리지 않는다! 실행하면 찾을 수 없는 명령어라고 나오므로 약간의 편법으로 구사할 수 있을 것 같다! 혹시라도 mac에서 pause를 걸려한다면 저런식으로 만들어 보는 방법도 있다.","categories":[{"name":"C/C++/자료구조","slug":"C-C-자료구조","permalink":"https://heung-bae-lee.github.io/categories/C-C-자료구조/"}],"tags":[]},{"title":"[CS231n]Lecture08-Deep learning Software","slug":"cs231n_08","date":"2019-07-23T05:13:30.000Z","updated":"2019-07-24T07:35:38.400Z","comments":true,"path":"2019/07/23/cs231n_08/","link":"","permalink":"https://heung-bae-lee.github.io/2019/07/23/cs231n_08/","excerpt":"","text":"GPU Graphics card 또는 Graphics Processing Unit이라고 하는데 결국엔 우리가 아는 사실 처럼 computer graphics를 랜더링하기 위해 더 와닿게 말하자면 게임을 더 최적의 환경에서 하기 위해 만들어 졌다고 할 수 있다. # Cores Clock speed Memory Price CPU 4 4.4 GHz Shared with system $339 CPU 10 3.5 GHz Shared with system $1723 GPU 3840 1.6 GHz 12GB GDDR5X $1200 GPU 1920 1.68 GHz 8GB GDDR5 $399 위의 표에서 볼 수 있듯이 CPU의 경우 core의 수가 적다. GPU는 CPU보다 훨씬 더 많은 core를 가지고 있지만 각각의 코어가 더 느린 clock speed에서 동작하며 그 코어들이 CPU처럼 독립적으로 동작하지 않으며 많은 일을 처리할 수 없다. GPU는 코어마다 독립적인 테스크가 있는 것이 아니라 많은 코어들이 하나의 테스크를 병렬적으로 수행한다. GPU의 코어의 수가 많다는 것은 어떤 테스크가 있을 때 그 테스크에 대해 병렬로 수행하기 아주 적합하다는 것을 알 수 있다. CPU에도 캐시가 있지만 비교적 작다. 대부분의 memory는 RAM에서 끌어다 쓴다. 실제 RAM과 GPU간의 통신은 상당한 보틀넥을 초래한다. 그렇기 때문에 GPU는 보통 RAM이 내장되어 있다. GPU는 내장되어있는 메모리와 코어 사이의 캐싱을 하기 위한 일종의 다계층 캐싱 시스템을 가지고 있다. 이는 CPU의 캐싱구조와 매우 유사하다. CPU는 범용처리에 적합하고, GPU는 병렬처리에 더 특화되어 있다. GPU에서 정말 잘 동작하고 아주 적합한 알고리즘은 바로 행렬곱 연산이다. 실제로 GPU로 학습을 할 때 생기는 문제 중 하나는 바로 Model과 Model의 가중치는 전부 GPU RAM에 상주하고 있는 반면에 Train data는 하드드라이브(SSD)에 있다는 것이다. 때문에 Train time에 디스크에 디스크에서 데이터를 읽어들이는 작업을 세심하게 신경쓰지 않으면 보틀넥이 발생할 수 있다. 즉,GPU는 forward/backward 가 아주 빠른 것은 사실이지만, 디스크에서 데이터를 읽어들이는 것이 보틀넥(병목현상)이 되는 것이다. 이러한 문제를 해결하기 위한 해결책 중 하나는 데이터셋이 작다면 데이터 전체를 RAM에 올려 놓는 것이다. 또는 데이터셋이 작지 않더라도, 서버에 RAM 용량이 크다면 가능 할 수도 있을 것이다. 또한 기본적으로 HDD 대신 SSD를 사용하는 것이 좋다. 또 다른 방법으로는 CPU의 multiple CPU threads(CPU의 다중스레드)를 이용해서 데이터를 RAM에 미리 올려 놓는 것이다.(Pre-fetching)GPU는 빠른데 데이터 전송 자체가 충분히 빠르지 못하면 보틀넥이 생길수 밖에 없다. Deep learning frameworkDeep learning framework를 사용하는 이유1) 딥러닝 프레임워크를 이용하면 엄청 복잡한 그래프를 우리가 직접 만들지 않아도 된다.2) forward pass만 잘 구현해 놓는다면 Back propagation은 알아서 구성되어 gradient를 쉽게 계산할 수 있다.3) cuBLAS, cuDNN, CUDA 그리고 memory등을 직접 세심하게 다루지 않고 GPU를 효율적으로 사용할 수 있다. framework의 존재 목표는 forward pass 코드를 Numpy스럽게 작서을 해 놓으면 GPU에서도 동작하고 gradient도 알아서 계산해 주는 것이다. [그림1][그림2] Tensorflow placeholder는 그래프 밖에서 데이터를 넣어주는 변수이고, variable은 그래프 내부에 있는 변수이다. Tensorflow는 분산처리도 지원하기 떄문에 서로 다른 머신을 이용해 graph를 쪼개서 실행시킬 수도 있다. 혹 분산처리를 계획한다면 Tensorflow가 유일한 선택지가 될 것이다. Pytorch Facebook에서 나온 PyTorch는 TensorFlow와는 다르게 3가지 추상화 레벨을 정의해 놓았다. 이미 고수준의 추상화를 내장하고 있기에 (Module 객체) TensorFlow 처럼 어떤 모듈을 선택할 지 고민할 필요가 없다. tensor : Numpy array와 유사한 tensor object가 있으며 GPU에서 작동한다. tensorflow의 Numpy array variable : 그래프의 노드(그래프를 구성하고 gradient 등을 계산) tensorflow의 Tensor, Variable, Placeholder Module : 전체 Neural network를 구성 tensorflow의 tf.layers, TFSlim, TFLearn 등 Static computational graph vs Dynamic graphPytorch와 TensorFlow의 주된 차이점 중 하나이다. TensorFlow는 두단계로 나누어진다.(Static computational graph - 그래프가 단 하나만 고정적으로 존재하기 때문이다.) 1) 그래프를 구성하는 단계 2) 구성된 그래프를 반복적으로 돌리는 단계 그래프를 한번 구성해 놓으면 학습시에는 동일한 그래프를 아주 많이 재사용하게 된다. 그러므로 그런 그래프를 최적화시킬 기회가 주어질 수 있다. 처음 최적화 시킬 때 까지 시간이 소요된다 하더라도 최적화된 그래프를 여러번 사용한다는 것을 고려해보면 그에 따른 소요된 시간은 중요치 않을 수 도 있다. 또한 메모리내에 그 네트워크 구조를 갖고 있다는 것이되므로 \b네트워크 구조를 파일 형태로 저장할 수 있다. 그래프의 모든 전체적인 연산들을 다 고려해서 만들어 주어야한다.(ex.loop문) TensorFlow Fold라는 TF 라이브러리가 static graph으로 만든 트릭으로 dynamic graphs를 작성하게 해준다. Pytorch는 하나의 단계이다.(Dynamic computational graph) 매번 forward pass 할 때 마다 새로운 그래프를 구성한다. 또한, 그래프 구성과 그래프 실행하는 과정이 얽혀 있기에 모델을 재사용하기 위해서는 항상 원본 코드가 필요하다. 코드가 훨씬 깔끔하고 작성하기 더 쉽다. tensorflow와는 다르게 python 명령어들을 활용할 수 있다. 다양한 데이터에도 유동적인 네트워크를 만들 수 있다.(RNN사용 - NLP에서 문장을 파싱하는 문제 중 트리를 파싱하기 위해 recursive한 네트워크가 필요할 수 있다.) Recurrent network, Recursive network, Modular Networks(이미지와 질문을 던지면 적절한 답을 하는 구조)를 구성할 때 조금 더 편할 수 있다.","categories":[{"name":"CS231n","slug":"CS231n","permalink":"https://heung-bae-lee.github.io/categories/CS231n/"}],"tags":[]},{"title":"[CS231n]Lecture07-Training Neural Networks2","slug":"cs231n_07","date":"2019-07-22T03:24:40.000Z","updated":"2019-07-23T04:21:56.948Z","comments":true,"path":"2019/07/22/cs231n_07/","link":"","permalink":"https://heung-bae-lee.github.io/2019/07/22/cs231n_07/","excerpt":"","text":"지난 6강에서는 activation function을 중점적으로 다루어 보았는데, 10년전 까지만 해도 sigmoid가 아주 유명했다. 허나, Vanishing gradient가 생기는 문제로 인해 최근에는 Sigmoid와 tanh 보다는 ReLU를 쓴다라고 했다. 대부분의 경우 normalize나 zero-centered로 데이터를 처리해 주지 않으면, Loss가 파라미터에 너무 민감하기 때문에 학습시키기에 어렵다. 하이퍼파라미터를 몇 개씩 선택하는지에 따른 고민은 보통 모델에 따라 다르며, 하이퍼파라미터의 수가 많을 수록 기하급수적으로 경우의 수가 늘어난다. 많은 하이퍼 파라미터 중 learning rate가 가장 중요할 것이라고 본다. regularization, learning rate decay, model size 같은 것들은 Learning rate보단 덜 중요하다. 그렇기에 Block Coordinate Descent(BCD) 같은 방법을 쓸 수도 있다. 우선 learning rate를 정해놓은 다음에 다양한 모델 사이즈를 시도해 보는 것이다. 이 방법을 사용하면 기하급수적으로 늘어나는 Search space를 조금은 줄일 수 있다. 하지만 정확히 어떤 순서로 어떻게 찾아야 할지 정해야 하는 것이 가장 큰 문제이다. 우리가 어떤 하이퍼파라미터 값을 변경할 시에 다른 하이퍼파라미터의 최적 값이 변해버리는 경우는 가끔 발생한다. 이런 경우 더 좋은 최적화 방법을 사용하면 모델잉 learning rate에 덜 민감하도록 할 수 있다. Fancier OptimizationSGD(Stochastic Gradient Descent)의 문제점 1)가중치가 움직일수 있는 방향 중 불균형한 방향이 존재한다면 SGD는 잘 동작하지 않을 것이다. 아래의 그림을 보고 수평축과 수직축 이 두가지에 대해 가중치의 변화에 따른 손실함수의 변화량이라고 생각해 보자.(우리가 쉽게 어릴적 보았던 지도에서 등고선을 떠올린다면 더 쉽게 이해할 수 있을 것이다.) 그렇다면, 수평축의 가중치 보다 수직축의 가중치가 훨씬 더 손실함수의 변화하는 속도가 빠를 것이다.(왜? 기울기가 더 가파르니까!!!) 즉, Loss는 수직 방향의 가중치 변화에 훨씬 더 민감하게 반응한다. 아래의 그림에서 red point가 현재 Loss라고 가정했을때, 현재 지점의 Hessian matrix의 최대/최소 singular values값의 비율이 매우 안좋다는 뜻이므로 Loss는 bad condition number를 지니고 있다고 말할 수 있을 것이다.[그림0] 아래와 같은 손실함수에서 SGD를 시행한다면, gradient의 방향이 고르지 못하기 때문에 지그재그 모양으로 gradient의 방향이 그려지게 된다. Loss에 영향을 덜 주는 수평방향 차원의 가중치는 업데이트가 아주 느리게 진행된다. 즉, 이렇게 가중치가 움직일수 있는 방향 중 불균형한 방향이 존재한다면 SGD는 잘 동작하지 않을 것이다. [그림1] 2)local minima와 saddle points X축은 어떤 하나의 가중치를 나타내고, Y축은 Loss를 나타내고 있다. 위의 그림은 local minima에 관한 그림이고, 아래의 그림은 saddle point와 관련된 그림이다. saddle point가 의미하는 것은 어떤 방향은 Loss가 증가하고 몇몇 방향은 Loss가 감소하고 있는 곳을 생각해 볼 수 있다. 그에 반해 local minima는 한 방향으로 Loss가 상승하는 방향이다. 이런 saddle point 문제는 고차원 공간에서는 더욱 더 빈번하게 발생하며, 지난 몇 년간 알려진 사실은 very large neural network가 local minima 보다는 saddle point에 취약하다는 것이다. saddle point 뿐만 아니라 saddle point 근처에서도 문제가 발생하는데 근처에서 gradient가 0은 아니지만 기울기가 아주 작은 곳들이 보일 것이다. 그것이 의미하는 바는 gradient를 계산해서 업데이트를 해도 기울기가 아주 작기 때문에 현재 가중치의 위치가 saddle point 근처라면 업데이트는 아주 느리게 진행된다는 점 또한 문제점이다. 3) mini-batch로 인한 가중치 업데이트는 추정값이다. 손실함수를 계산할 때는 엄청 많은 Training Set 각각의 loss를 전부 계산해야 한다. 매번 이렇게 전부를 계산하는 것은 어렵기 때문에 실제로는 mini-batch의 데이터들만 가지고 실제 Loss를 추정하기만 한다. 이는 gradient의 부정확한 추정값만을 구할 뿐이라는 것이다. 위에서 말한 위험요소들을 다루기 위해서 더 좋은 최적화 알고리즘이 필요하다. 아래에서 소개하는 최적화 알고리즘들의 velocity은 하이퍼 파라미터가 아니며 초기값을 항상 0으로 둔다!1) SGD + momentum 아이디어는 gradient의 방향으로만 움직이는 SGD에 velocity를 유지하는 것이다. 즉, gradient를 계산할 때 velocity를 이용한다. 현재 mini-batch의 gradient 방향만 고려하는 것이 아니라 velocity를 같이 고려하는 것이다.아래의 수식을 보면 velocity의 영향력을 rho의 비율로 맞춰주는데 보통 0.9 또는 0.99 같은 높은 값으로 맞춰준다. gradient vector 그대로의 방향이 아닌 velocity vector의 방향으로 나아가게 된다. [그림2]local minima와 saddle points 문제는 local minima에 도달해도 여전히 velocity를 가지고 있기 때문에 gradient가 0이라도 움직일 수 있으며 계속해서 내려갈 수 있다. saddle point 주변의 gradient가 작더라도, 굴러내려오는 속도가 있기 때문에 velocity를 가지게 되어 이 또한 잘 극복해 내고 계속 밑으로 내려올 수 있는 것이다. 기존의 SGD만을 사용했을 경우처럼 지그재그로 움직이는 상황을 momentum으로 인해 그러한 변동을 서로 상쇄시켜 버린다. noise가 평균화 되버리는 의미를 갖는다. 이를 통해서 Loss에 민감한 수직 방향의 변동은 줄여주고 수평방향의 움직임은 점차 가속화 될 것이다. momentum을 추가하게 되면 high condition number problem을 해결하는데 도움이 되는 것이다! 직관적으로 보면 velovity는 이전 gradients의 weighted sum이다. 더 최근의 gradients에 가중치가 더 크게 부여되고 계산되는 과정이 일좀의 smooth moving average라고 볼 수 있다. 시간이 지날수록 이전의 gradient들은 exponentially하게 감소한다.[그림3] 2) Nesterov momentumSGD momentum은 현재지점에서의 gradient를 계산한 뒤에 velocity와 곱해주었지만 Nesterov momentum은 계산 순서만 변형을 시켜 주었다고 보면 된다. 아래의 왼쪽 그림을 보면, 빨간 점에서 시작해서 우선은 Velocity 방향으로 움직인다. 그리고 그 지점에서의 gradient를 계산한 후 다시 원점으로 돌아가서 이 둘을 합치는 것이다. velocity의 방향이 잘못되었을 경우에 현재 gradient의 방햐을 좀 더 활용할 수 있도록 해준다. Nesterov는 Convex Optimization 문제에서는 뛰어난 성능을 보이지만 하지만 Neural network와 같은 Non-convex problem에서는 성능이 보장되는 않는다.[그림4]Nesterov의 첫번째 수식은 기존의 momentum과 동일하다. 아래 그림에서 재배열한 수식을 보면 기존과 동일하게 velocity와 계산한 gradient를 일정 비율로 섞어주는 역할을 한다. 그리고 두 번째 수식에서 마지막 부분을 보면 현재 점과 velocity를 더해주며, 현재 velocity - 이전 velocity를 계산해서 일정 비율(rho)을 곱하고 더해줍니다. 현재/이전의 velocity간의 에러 보정(error-correcting term)이 추가되었다.[그림5]이전의 velocity의 영향을 받기 때문에 momentum 방법들은 minima를 그냥 지나쳐 버리는 경향이 있다. 하지만 스스로 경로를 수정하고는 결국 minima에 수렴한다. 3) AdaGrad 학습 도중에 계산되는 gradient에 제곱을 해서 계속 더해준다. 가중치를 업데이트 할때 gradient로 나눠주는 작업을 수행한다. 한 차원은 항상 gradient가 높은 차원이고 다른 하나는 항상 작은 gradient를 가지는 2차원 좌표가 있다고 가정하자. small dimension에서는 gradient의 제곱 값 합이 작은데 이 작은 값으로 나워지므로 가속도가 붙게된다. Large dimension에서는 gradient가 큰 값 이므로 큰 값이 나워지게 되어 속도가 점점 줄어든다. 하지만 학습이 계속 진행될수록 학습 횟수가 늘어난다는 문제가 있다. 학습 횟수가 많아질수록 AdaGrad의 값은 점점 작아진다. 이러한 점은 Convex한 Loss인 경우에 좋은 특징이 될 수 있다. minimum에 근접하면 서서히 속도를 줄여서 수렴할 수 있게 해 줄 수 있기 때문이다. 하지만 saddle point problem과 같은 non-convex 문제에서는 AdaGrad가 멈춰 버리는 상황이 발생할 수 도 있어 문제가 있다. 일반적으로 NN을 학습시킬 때는 잘 사용하지 않는다.[그림6] 4) RMSProp 위와 같은 문제를 보완하기 위한 알고리즘이다. AdaGrad의 gradient 제곱 항을 그대로 사용한다. 점점 속도가 줄어드는 문제를 제곱항을 그저 누적시키는 것이 아니라 기존의 누적 값에 decay_rate를 곱해주는 방식을 통해 해결하였다. decay_rate는 보통 0.9 또는 0.99를 자주 사용한다. gradient 제곱을 계속 나눠준다는 점은 AdaGrad와 유사하다. 이를 통해 step의 속도를 가속/감속 시킬 수 있다. [그림7] 5) Adam momentum + RMSProp 으로 위에서 종합한 momentum계열의 알고리즘과 Ada계열의 알고리즘의 특징을 합한 것이다. 빨간색 부분은 gradient의 가중합이다. 파란색 부분은 AdaGrad나 RMSProp처럼 gradients의 제곱을 이용하는 방법이다. 초기 Step이 엄청 커져 버릴 수 있고 이로 인해 잘못될 수도 있다. 이런 문제를 해결하기 위해 보정하는 항을 추가한다.(bias correction term) Adam은 다양한 문제에도 정말 잘 동작한다. 하지만 예를들어 손실함수가 타원형이고 축 방향으로 정렬되어 있지 않고 기울어져 있다고 생각해 보자. 회전된 타원(poor conditioning) 문제는 Adam을 비롯한 다른 여러 알고리즘들도 다를 수 없는 문제이다.[그림8] learning rates decay 전략 처음에는 learning rate를 높게 설정한 다음에 학습이 진행될수록 learning rates를 점점 낮추는 것이다. 예를 들면, 100,000 iter에서 learning rates를 낮추고 학습시키는 것이다.(step decay) 또는 exponential decay 처럼 학습과정 동안에 꾸준히 learning rate를 낮출 수도 있다. learning rate가 너무 높아서 더 깊게 들어가지 못하는 상황에 learning rate를 낮추게 되면 속도가 줄어들며 지속해서 Loss를 내려갈 수 있을 것이다. learning rate decay는 부차적으로 생각해보는 것이지 학습 초기부터 고려하지는 않는다. 또한 Adam 보다는 SGD Momentum을 사용할 때 자주 사용한다.[그림9] 위에서 언급한 알고리즘들은 1차 미분값을 사용하여 1차 근사함수를 실제 손실함수라고 가정하고 가중치의 업데이트를 진행하였다. 이런 방식은 근사 시킨 값이므로 정확성이 떨어져 스텝의 사이즈를 키워 멀리 갈수가 없다. 2차 미분값을 활용하여 근사 시키는 방법을 통해 그러한 문제를 해결할 수 있을 것이다.[그림10][그림11] Second-Order Optimization 위의 2차원을 다차원으로 확장시켜보면 이를 Newton step이라고 한다. Hessian matrix의 inverse matrix를 이용하게 되면 실제 손실함수의 2차 근사를 이용해 곧바로 minima로 이동할 수 있다는 것이다. 다른 알고리즘들과 달리 learning rate를 사용하지 않는다. 실제로는 2차 근사도 완벽하지 않기에 learning rate가 필요하다. 어디까지나, minima로 이동하는게 아니라 minima의 방향으로 이동하기 때문이다. 허나, inverse matrix를 구하기 힘들고 메모리에 대량의 파라미터를 저장할 방법이 없기에 이 알고리즘은 NN에서 사용되지 않는다. 1) Quasi-Newton methods(BGFS most popular) Full Hessian을 그대로 사용하기 보다 근사시킨다. Low-rank approximations하는 방법이다. 2) L-BFGS Hessian을 근사시켜 사용하는 second-order optimizer이다. 사실상 DNN에서는 잘 사용하지 않는다. 왜냐하면 L-BFGS에서 2차 근사가 stochastic case에서 잘 동작하지는 않으며, Non-convex 문제에도 적합하지 않기 때문이다. 단지 full batch update가 가능하고 stochasticity가 적은 경우라면, L-BFGS가 좋은 선택이 될 수 있다. NN을 학습시키는데 많이 사용되지는 않지만 Style transfer 같은 stochasticity와 파라미터가 적은 경우에서 Optimization을 해야할 경우에 종종 사용할 수 있다. 위에서 살펴본 방법들은 학습과정의 error를 줄이기 위한 방법들이었다. 허나 우리가 진정으로 관심을 갖고 보아야 할 것은 test set의 error이다. 그런 test set의 error를 줄이기 위한 방안들을 다음에서 제시한다. Model Ensemble model을 train 시킨 후 우리가 가장 기대하는 바는 새롭게 들어온 test set에 대한 성능. 즉, test set에 대한 error가 작기를 기대한다. 그렇게 하는 가장 쉽고 빠른 방법이 바로 Model Ensemble이다. machine learning 분야에서 종종 사용하는 기법으로 예를 들어 설명하자면 모델을 하나만 학습시키지 말고 10개의 모델을 독립적으로 학습시키는 것이다. 결과는 10개 모델 결과의 평균을 이용한다. 모델의 수가 늘어날수록 Overfitting이 줄어들고 성능이 조금씩 향상된다. 보통 2%정도 증가한다. ImageNet이나 Kaggle competition 같이 모델의 성능을 최대화 시키는 것이 주된 목표일 경우 많이 사용한다. 허나 개인적으로나 주변의 조언들을 종합해보자면 우선 기본적인 base모델의 성능을 높이는데 주력하는 것이 더 좋을 듯하다. 실제로 실무에서는 Ensemble이나 Stacking같은 기법을 자주 사용하지는 않는다고 하기 때문이다. 하지만 한번 쯤은 만들어 보는 것도 좋은 것 같다. 또한 학습 도중 중간 모델들을 저장하고 앙상블로 사용할 수도 있다. 그리고 Test시에는 여러 중간 모델들을 통해 나온 예측값들을 평균을 내서 사용한다. 만약 모델간의 Loss 차이가 크면 한쪽이 Overfitting 일수 있고, 차이가 작아도 안좋은 것은 아닐까라는 생각에 의해 좋은 앙상블 결과를 위해서라면 모델 간의 최저그이 갭을 찾는 것이 중요하지 않는냐는 생각이 들 수도 있겠지만, 언제나 말하듯 우리에게 중요한 것은 validation set의 성능을 최대화시키는 것이다. 앙상블시에 다양한 모델 사이즈, learning rate, 그리고 다양한 regularization 기법 등을 앙상블 할 수 있다. 이런 모델을 독립적으로 학습시키는 방법외에도 학습하는 동안에 파라미터의 exponentially decaying average를 계속 계산한다. 이 방법은 학습중인 네트워크의 smooth ensemble 효과를 얻을 수 있다. 즉, checkpoints에서의 파라미터를 그대로 사용하지 않고 smoothly decaying average를 사용하는 방법이다.(Polyak averaging) Regularization 모델에 어떤 조건들을 추가할 텐데 그 term들은 모델이 Training data에 fit하는 것을 막아줄 것이다. 그리고 한번도 보지 못한 데이터에서의 성능을 향상시키는 방법이다. L2 regularization은 NN에는 잘 어울리지 않는다. 왜??? NN에서 가장 많이 사용하는 Regularization은 바로 dropout이다!!! Dropout Forward pass 과정에서 한 layer씩 출력(activation = previous activation * weight)을 전부 구한 후에 임의로 일부 뉴런을 0으로 만들어 주는데 매번 Forward pass마다 0이 되는 뉴런을 바꿔주어 특징들 간의 상호작용을 방지한다고 볼 수 있다. 즉, 네트워크가 어떤 일부 feature에만 의존하지 못하게 해준다. 다양한 feature를 골고루 이용할 수 있도록 하여 Overfitting을 방지한다고 볼 수 있다..보통은 0.5로 준다. [그림12] 단일 모델로 앙상블 효과를 가질 수 있다는 것이다. 서로 다른 파라미터를 공유하는 서브네트워크 앙상블을 동시에 학습시키는 것이라고도 생각할 수도 있다. 그러나, 뉴런의 수에 따라서 앙상블 가능한 서브네트워크의 수가 기하급수적으로 증가하기 때문에 가능한 모든 서브네트워크를 사용하는 것은 사실상 불가능하다. Dropout을 사용하면 Test time에는 어떤 일이 발생되나? Dropout을 사용하면 기본적으로 NN의 동작자체가 변하게 된다. 기존의 NN은 w와 x에 대한 함수였다. 그러나 Dropout을 사용한면 Network에 z라는 입력이 추가된다. z는 random dropout mask이다. test시에는(예측시) 임의의 값을 부여하는 것은 좋지 않다. 왜냐하면 예측할때마다 결과가 바뀔수 있기 때문이다. 이런 randomness를 average out시키는데 적분을 통해 marginalize out시키는 것으로 생각해볼 수 있다. 허나 실제로는 까다로운 문제이므로 z를 여러번 샘플링해서 예측시에 이를 average out시키는 것이다. 하지만 이 방법도 test time에서의 randomness을 만들어 내기 때문에 좋지 않은 방법이다. 허나 다음 그림과 같이 test time에서 stochasticity를 사용하지 않고 할 수 있는 값 싼 방법 중 하나는 dropout probability를 네트워크의 출력에 곱하여 test time과 train time의 기대값을 같게 해주는 것이다. [그림13] 실제로 코드에서는 아래와 같이 예측시에 dropout probability를 곱해주거나 tip으로 train에서는 연산이 GPU에 의해 계산되어 추가되는 것에 별로 신경쓰지 않지만 Test time에서는 효율적으로 동작하길 바라므로 train시에 오히려 역으로 dropout probability를 나누어주는 식으로 수행할 수 있다. [그림14] dropout을 사용하게 되면 Train time에서 gradient에는 어떤 일이 일어나는지 궁금할 것이다. 결론은 우리가 생각하던 Dropout이 0으로 만들지 않은 노드에서만 Backpropagation이 발생하게 된다. Dropout을 사용하게 되면 각 스텝마다 업데이트되는 파라미터의 수가 줄어들기 때문에 전체 학습시간은 늘어나지만 모델이 수렴한 후에는 더 좋은 일반화 능력을 얻을 수 있다. 기본적으로 Dropout은 일반적인 regularization전략을 구체화시킨 하나의 예시에 불과하다. 이 전략은 Train time에는 네트워크에 randomness를 추가해 네트워크를 마구잡이로 흩뜨려 놓으므로써 Training data에 너무 fit하지 않게 해준다. 그리고 Test time에서는 randomness를 평균화 시켜서 generalization 효과를 주는 것이다. Dropout이 Regularization에 가장 대표적인 예이긴 하지만 Batch normalization 또한 비슷한 동작을 할 수 있다. 왜냐하면 mini-batch로 하나의 데이터가 샘플링 될 때 매번 서로 다른 데이터들과 만나게 된다. Train time에서는 각 데이터에 대해서 이 데이터를 얼마나 어떻게 정규화시킬 것인지에 대한 stochasticity이 존재했다. 하지만 test time에서는 정규화를 mini-batch 단위가 아닌 global 단위로 수행함으로써 stochasticity를 평균화 시킨다. 이러한 특성 때문에 Batch-Normalization은 Dropout과 유사한 Regularization 효과를 얻을 수 있다. 실제로 Batch-Normalization을 사용할 때는 Dropout을 사용하지 않는다. Batch-Normalization에도 충분히 regularization 효과가 있기 때문이다.[그림15] Batch-Normalization과는 다르게 자유롭게 조절할 수 있는 파라미터 p가 있기 때문에 Batch-Normalization은 여전히 쓸모있다. data augmentation Regularization 패러다임에 부합하는 전략 중 하나이다. 예를 들어 고양이 사진을 classification 문제로 풀려고 할때, 이미지의 반전을 주어 입력한다던지 아니면, 임의의 다야한 사이즈로 잘라서(crop) 사용할 수 있다. 또한, color jittering도 있는데 간단한 방법으로는 학습시 이미지의 contrast 또는 brightness를 바꿔준다. 복잡한 방법으로는 PCA의 방향을 고려하여 color offset을 조절하는 방법이다. 이런 방법은 color jittering을 좀 더 data-dependent한 방법으로 진행하는 것으로 자주 사용하는 방법은 아니다. data augmentation은 어떤 문제에도 적용해 볼 수 있는 아주 일반적인 방법이라고 할 수 있다. 어떤 문제를 풀려고 할 때, 이미지의 label을 바꾸지 않으면서 이미지를 변환시킬 수 있는 많은 방법들을 생각해 볼 수 있다.train time에 입력 데이터에 임의의 변환을 시켜주게 되면 일종의 regularization 효과를 얻을 수 있다. 그 이유는 위에서 언급하고 강조한 것과 같이 train time에는 stochasticity가 추가되고 test time에는 marginalize out 되기 때문이다. DropConnect Dropout과 다르게 activation이 아닌 weight matrix를 임의적으로 0으로 만들어주는 방법이다. fractional max pooling 보통의 경우, 2x2 max pooling 연산은 고정된 2x2 지역에서만 수행하지만 fractional max pooling에서는 그렇게 하지 않고 pooling 연산을 수행할 지역이 임의로 선정된다. 예를 들면 아래의 그림에서 Train time에 샘플링 될 수 있는 임의의 pooling region을 볼 수 있다. 그리고 test time에 stochasticity를 average out 시키려면 pooling regions를 고정시켜 버리거나 혹은 여러개의 pooling regions를 만들고 averaging over를 시킨다. 많이 사용하지는 않지만 좋은 방법이다.[그림16] Stochastic Depth Train time에는 layer 중 일부를 제거해 버리고 일부만 사용해서 학습한다. Test time에는 전체 네트워크를 다 사용한다. 최신의 연구이며 실제로 잘 사용하진 않지만 아주 좋은 아이디어이다. 보통 하나 이상의 regularization 방법을 사용하는데 그 중에서도 Batch-Normalization만으로도 충분하다. 다만 Overfitting이 발생한다 싶으면 Dropout과 같은 다양한 방법을 추가해 볼 수 있다. 이를 가지고 blind cross-validation을 수행하지는 않는다. 대신에 네트워크에 overfit의 조짐이 보일때 하나씩 추가시켜 본다. Transfer Learning overfitting이 일어날 수 있는 상황 중 하나는 충분한 데이터가 없을 때이다. 우리는 이런 상황에서 Transfer learning을 사용하여 문제를 해결 할 수 있다. 또한, 흔히들 CNN 학습에는 엄청많은 데이터가 필요하다고 생각할 수 있는데 그런한 사고를 무너뜨려 버려준다. 1) 먼저 ImageNet 같은 아주 큰 데이터셋으로 학습을 한번 시킨다.ImageNet에서 학습된 feature를 우리가 가진 작은 데이터셋에 적용하는 것이다.이제는 1000개의 ImageNet 카테고리를 분류하는 것이 아니라 10종의 강아지를 분류하는 문제이다. 데이터는 엄청 적다. 이 데이터 셋은 오직 C(예:10개)개의 클래스만 가지고 있다. 2) 가장 마지막의 Fully connected layer는 최종 feature와 class scores간의 연결인데 이를 초기화시킨다. 또한, 기존의 ImageNet은 4,096 x 1,000 차원의 matrix였지만 이제는 우리가 10개의 클래스를 갖으므로 4,096 x 10 차원의 matrix로 바꿔준다. 나머지 이전의 모든 레이어드르이 가중치는 그대로 둔다. 이렇게 되면 linear classifier를 학습시키는 것과 같다. 왜냐하면 오로지 마지막 레이어만 가지고 우리 데이터를 학습시키는 것이기 때문이다. 이러한 방법을 사용하면 아주 작은 데이터 셋일지라도 아주 잘 동작하는 모델을 만들 수 있다. 만일, 데이터가 조금 더 있다면 전체 네트워크를 fine-tuning 할 수 있다. 최종 레이어들을 학습시키고 나면, 네트워크의 일부만이 아닌 네트워크 전체의 학습을 고려해 볼 수도 있을 것이다 데이터가 더 많이 있다면 네트워크의 더 많은 부분을 업데이트 시킬 수 있을지도 모른다. 이 부분에서는 보통 기존의 Learning rate보다는 낮춰서 학습시킨다. 왜냐하면 기존의 가중치들이 이미 ImageNet으로 잘 학습되어 있고 이 가중치들이 대게는 아주 잘 동작하기 때문이다. 우리가 가진 데이터셋에서의 성능을 높히기 위해서라면 그 가중치들을 아주 조금씩만 수저정하면 될 것이다. transfer learning은 거의 일상적인 수준이 되었다. 대부분은 ImageNet pretrained model을 사용하고 현재 본인의 task에 맞도록 fine tuning한다. captioning의 경우 word vectors를 pretrain하기도 한다. pretrained CNN 뿐만 아니라 큰 규모의 코퍼스로 부터 학습된 pretrained word vectors도 함께 이용할 수 있다. 허나, captioning task에서는 pretrained word vectors을 사용하는 경우가 많지 않고 크게 중요하지 않다. 문제에 대한 데이터셋이 크지 않은 경우라면 풀려는 문제와 유사한 데이터셋으로 학습된 pretrained model을 다운로드 받아라. 그리고 이 모델의 일부를 초기\b화시키고 가지고있는 데이터로 모델을 fine-tuning한다. TensorFlow : https://github.com/tensorflow/modelsPytorch : https://github.com/pytorch/vision","categories":[{"name":"CS231n","slug":"CS231n","permalink":"https://heung-bae-lee.github.io/categories/CS231n/"}],"tags":[]},{"title":"[CS231n]Lecture06-Training Neural Networks","slug":"cs231n_06","date":"2019-07-19T14:15:00.000Z","updated":"2019-07-23T04:18:10.010Z","comments":true,"path":"2019/07/19/cs231n_06/","link":"","permalink":"https://heung-bae-lee.github.io/2019/07/19/cs231n_06/","excerpt":"","text":"Optimization을 통해서 네트워크의 파라미터를 학습시킬 수 있다. Loss가 줄어드는 방향으로 이동하는데 이것은 gradient의 반대 방향으로 이동하는 것과 같다. Mini-batch SGD 알고리즘으로 가중치들(네트워크의 파라미터)을 업데이트하는 과정은 다음과 같다. Mini-batch SGD로 가중치 업데이트 과정Loop: 데이터의 batch size를 정한 후 그만큼의 크기의 데이터만 가져온다. Forward prop을 통해 Loss값을 산출한다. gradient를 계산하기 위해서 Backpropagation을 시행한다. 계산하여 얻은 gradient를 이용해서 파라미터를 업데이트 한다. Training Neural NetworksNeural Networks의 학습을 처음 시작할때 필요한 기본설정에 대해 말하자면 다음과 같다. activation function 선택, preprocessing, weight initialization, regularization, gradient checking Activation function1)Sigmoid $\\sigma(x) = \\frac{1}{1+e^{-x}}$ 각 입력을 받아서 그 입력을 [0,1]사이의 값이 되도록 해준다. 입력의 값이 크면 Sigmoid의 출력값이 1에 가까울 것이고 작으면 0에 가까울 것이다. neuron의 firing rate를 saturation 시키는 것으로 해석할 수 있다. 왜냐하면 어떤 값이 0에서 1사이의 값을 가지면 이를 fireing rate라고 생각할 수 있기 때문이다. ReLu가 생물학적 타당성이 더 크기에 최근에는 대부분 ReLu를 사용한다.(이 부분은 생물학적인 내용인것 같다.) 참조 firing rate 문제점 Saturation되는것이 gradient를 없앤다. Sigmoid에서 x가 0이면 잘 작동할 것이고, gradient도 잘 얻게 될 것이다. 허나, 음의 큰 값이거나 양의 큰값이면 sigmoid가 flat하게 되고 gradient가 0이 될 것이다. 거의 0에 가까운 값이 backprob이 되는 것이다. 그렇다면 결국 출력 노드에서는 가중치의 업데이트 의미가 있는 것이 되겠지만 밑으로 계속 Backpropagation 과정을 하다보면 0이 계속 전달되게 되므로 의미가 없어진다. sigmoid의 출력이 zero centered 하지 않다는 것이다. sigmoid의 입력이 항상 양수라고 가정해보자. 그런 layer에서 dL/df를 계산하면서 local gradient를 생각해보자. local gradient는 전부 양수가 되거나 전부 음수가 된다. 결론적으로는 gradient의 부호가 계속 동일하게 되기 때문에 가중치가 모두 같은 방향으로만 움직일 것임을 의미한다. 파라미터를 업데이트 할 때 다 같이 증가하거나 다같이 감소하거나 할 수 밖에 없다. 이런 gradient 업데이트는 아주 비효율적이다. 위에서 전부 양수 또는 음수로 업데이트된다는 것을 해석해보면, gradient가 이동할 수 있는 방향은 4분면 중 두 영역만 해당 될 것이다. 이러한 이유가 zero-mean data를 우리가 만들어주는 이유이다. 입력 X가 양수/음수를 모두 가지고 있으면 전부 같은 방향으로 움직이는 일은 발생하지 않을 것이기 때문이다. exponential로 인해 계산비용이 크다는 것이다.(내적의 계산이 비싸다.) 2)tanh sigmoid와는 비슷한 모양을 가지지만 출력값의 범위가 [-1,1]이다. 가장 큰 차이라면 zero-centered라는 것이다. 이를 통해 sigmoid의 두번째 문제는 해결되지만, saturation 때문에 여전히 Gradient는 죽는다. 여전히 flat한 구간이 있기 때문이다.-3)ReLU f(x) = max(0,x) 적어도 양의 값에서는 saturetion되지 않는다. sigmoid와는 다르게 exponential같은 연산이 없는 단순한 max 연산이므로 계산이 매우 빠르다.(sigmoid나 tanh보다 수렴속도가 6배정도로 훨씬 빠르다.) 생물학적 타당성도 ReLU가 sigmoid보다 크다. ImageNet 2012에서 우승한 AlexNet이 처음 ReLU를 사용하기 시작했다. 문제점 더 이상 zero-centered가 아니라는 점이다. tanh가 이 문제는 해결했는데 ReLU는 다시 이 문제를 가지고 있게 된다. 양의 수에서는 saturation이 되지 않지만 음의 경우에서는 그렇지 않다. Dead ReLU가 발생되는 문제의 이유 initialization을 잘못한 경우 learning rate가 지나치게 높은 경우 4)Leaky ReLU f(x) = max(0.01x, x) ReLU와 유사하지만 음수 영역에서 더이상 0이 아니며, 여전히 계산이 효율적이어서 sigmoid나 tanh보다 수렴을 빨리 할 수 있다. Dead ReLU가 없다! 5)Parametric ReLU f(x) = max(alpha*x, x) Leaky ReLU와 유사하게 음의 영역에서도 기울기를 가지고 있다는 것을 확인할 수 있다. 다만 alpha라는 파라미터를 정해 놓는 것이 아니라, backprob으로 학습시키는 점이 다르다. 6)Exponential Linear Units(ELU) ReLU의 장점을 그대로 가져오는데, 추가적으로 zero-mean에 가까운 출력을 보여준다. zero-mean에 가까운 출력은 앞서 Leaky ReLU, PReLU가 가진 이점이있다. 하지만 Leaky ReLU와 비교해보면 ELU는 negative에서 기울기를 가지는 것 대신 또 다시 saturation이 된다.ELU가 주장하는건 이런 saturation이 좀더 noise에 강인할 수 있다는 것이다. ReLU와 Leaky ReLU의 중간 정도이다. Leaky ReLU처럼 zero-mean의 출력을 내지만 Saturation의 관점에서 ReLU의 특성도 가지고 있다. 6)Maxout “Neuron” maxout는 ReLU와 leaky ReLU의 좀 더 일반화된 형태이다. 선형함수이기 때문에 saturation되지 않으며 gradient가 죽지 않을 것이다. 문제점은 뉴런당 파라미터의 수가 두배가 된다는 것이다. w1과 w2를 지니고 있어야하기 때문이다. 실제로 가장 많이들 쓰는 것은 바로 ReLU이다. 다만 ReLU를 사용하려면 learning rate를 아주 조심스럽게 결정해야 할 것이다. Leaky ReLU, Maxout, ELU와 같은 것들도 써볼 수 있지만 아직 실험단계이긴 하다. 여러분들의 문제에 맞춰 어떤 활성함수가 잘 동작하는지 확인해 볼 수 있을 것이다. tanh도 써볼 수 있지만, 대게는 ReLU, ReLU의 변종들이 좀 더 잘 동작한다고 생각하면 된다. Data Preprocessing가장 대표적인 전처리 과정은 zero-mean으로 만들고 normalize하는 것이다. 이런 과정은 왜 거치는 것일까? zero-centering은 가중치의 업데이트시에 좀 더 다양한 방향의 gradient를 얻기 위함이며, normalization을 해주는 이유는 모든 차원이 동일한 범위한에 있게 해줘 동등한 기여를 하게 하기 위해서이다. 이미지의 경우 실제로는 전처리로 zero-centering 정도만 해준다. 왜냐하면 이미지는 이미 각 차원간에 스케일이 어느정도 맞춰져 있기 때문에 normalization이 필요치 않기 때문이다. 다른 PCA나 whitening같은 더 복잡한 전처리 과정도 잘 사용치 않는다. -AlexNet은 전체 이미지의 평균을 빼주는 방식으로 zero-centering을 해주지만 VGGNet은 각 채널별 평균을 빼주는 방식으로 진행한다. 이런 방식의 결저을 각자의 판단에 맡겨진다. weight Initialization모든 가중치를 0으로 세팅한다면 어떻게 될까? 가중치가 0이라서 모든 뉴런은 모두 다 같은 연산을 수행한다. 출력도 같을 것이고, 결국 gradient도 서로 같을 것이다. 모든 가중치가 똑같은 값으로 업데이트 된다. 이것이 모든 가중치를 동일하게 초기화시키면 발생하는 일이다. 위와 같은 문제들을 해결하기 위해 다음과 같은 방법들을 제시한다. 표준 정규 가우시안 분포에서 임의의 작은 값으로 초기화한다. 이 방법은 깊은 네트워크에서 문제가 생길 수 있다. 왜냐하면 가중치를 업데이트 하는데 있어서 가중치의 값이 작기 때문에 가중치가 0으로 수렴되는 상황이 발생될 수 있기 때문이다. 적절한 가중치를 얻는 것은 너무 어렵다. 너무 작으면 사라져버리고 너무 크면 saturation(가중치의 gradient가 0)이 되어버린다. 1)Xavier Initialization-Standard gaussian으로 뽑은 값을 입력의 수로 스케일링해준다. 기본적으로 Xavier initialization가 하는 일은 입/출력의 분산을 맞춰주는 것이다. 입력의 수가 작으면 더 작은 값으로 나누고 좀 더 큰 값을 얻는다. 더 큰 가중치를 얻는 이유는 작은 입력의 수와 가중치가 곱해지기 때문에 가중치가 커야만 출력의 분산 만큼 큰 값을 얻을수 있기 때문이다. 반대로 입력의 수가 많은 경우에는 더 작은 가중치가 필요하다. 각 레이어의 입력이 Unit gaussian이길 원한다면 이런 류의 초기화 기법을 사용해 볼 수있다. 이런 결과는 Linear activation이 있다고 가정하는 것이다. tanh의 경우를 예를 들면 active region안에 있다고 가정하는 것이다. 하지만 ReLU를 쓰면 잘 작동하지 않는다. ReLU는 출력의 절반이 0이되어 죽는다. 결국 출력의 분산을 반토막 내버린다. 그러므로 값이 너무 작아지는 것이다. 이런 문제를 해결하기 위해 추가적으로 2로 나눠주는 즉 입력의 반밖에 들어가지 않는 점을 추가해주는 방법을 사용하기도 한다. 2)Batch Normalizationgaussian의 범위로 activation을 유지시키는 것에 관련한 아이디어 중 하나이다. 우리는 layer로 부터 나온 activation의 값들이 Unit gaussian이기를 바란다. 가중치를 잘 초기화 시키는 것 대신에 학습 할 때 마다 각 레이어에 이런 일을 해줘서 모든 layer가 Unit gaussian이 되도록 해준다. Batch size 만큼의 데이터에서 각 피처별로 평균과 분산을 계산한후 Normalization을 해준다. 이러한 연산은 Fully connected layer나 Conv Layer직후에 넣어준다. 깊은 네트워크에서 각 layer의 가중치가 지속적으로 곱해져서 Bad scaling effect가 발생했지만, Normalization은 그런 Bad effect를 상쇄시켜 버린다. Batch Normalization은 입력의 스케일만 살짝 조정해 주는 역할이기 때문에 Fully connected와 Conv layer 어디에든 적용가능하다. Conv layer에서 차이점이 있다면 Normalization을 차원마다 독립적으로 수행하는 것이 아니라 같은 Activation Map의 같은 채널에 있는 요소들은 같이 Normalize해 준다. 왜냐하면 Conv 특성상 같은 방식으로 normalize 시켜야 하기 때문이다. 즉, Conv Layer의 경우 Activation map(채널, Depth)마다 평균과 분산을 하나만 구한다. 그리고 현재 Batch에 있는 모든 데이터로 Normalize를 해준다. 이처럼 layer의 입력이 unit gaussian이 되도록 강제하는 것이다. tanh를 예시로 생각해 보면 입력데이터가 tanh로 인해 얼마나 saturation 될지를 조절하고 싶은 경우 같이 유연성을 줄 수도 있다. 학습가능한 감마와 베타를 통해 normalization 단계 이전으로 다시 복원 시켜주는 것과 같은 작업을 통해 유연성을 갖게할 수 있다. 때문에 batch 단위로 normalization을 일단 해주고 파라미터를 다시 학습시키는 것이다. 또한 Batch Normalization은 regularization의 역할도 한다. 각 layer의 출력은 해당 데이터 하나 뿐만 아니라 batch 안에 존재하는 모든 데이터들에 영향을 받는다. 더 이상 layer의 출력은 deterministic하지 않고 조금씩 바뀌게 되고 이는 regularization effect를 준다. 우리가 입력을 강제로 gaussian 분포로 만들어 버리게 되면 기존의 구조를 잃는 것은 아닌지에 대한 의문이 생길 수 도 있다. 특히 CNN의 경우 입력의 공간적 특성을 유지시켜 계산하는 방법이므로 더 강한 의문이 들수도 있겠지만, 예를 들어 설명하자면 데이터의 전처리를 할 때도 gaussian을 사용하는데 그럴 경우도 모든 피처들을 가우시안 분포로 만든다고 해도 어떠한 구조도 잃어버리지 않는다. 단지, 데이터에 연산이 잘 수행되도록 선형변환(스케일링, 시프트)을 해주는 것이다. 또한, shift와 scale요소를 추가시켜 학습을 시켜버리면 결국 identity mapping이 되서 Batch normalization이 사라지는 것이 아닌지의문이 들 수 있다. 실제로 감마와 베타를 학습시키게 되면 identity가 되지는 않는다. sift와 scale이 일정량 변하긴 하지만 보통은 identity mapping이 될 정도는 아니다. 그러므로 여전히 batch normalization의 효과를 얻을 수 있다. Batch Noramalization에서 평균과 분산은 학습데이터에서 구한것이며, test시에는 추가적인 계산은 하지않는다. 하이퍼 파라미터 최적화 시에는 Log scale로 값을 주는 것이 좋다. 파라미터 값을 샘플링할때 10^-3 ~10^-6을 샘플링하지 말고 10의 차수 값만 샘플링하는 것이 좋다. 최적의 값이 내가 정한 범위의 중앙 쯤에 위치하도록 범위를 잘 설정해 주는 것이 중요하다. 실제로는 grid search보다는 random search를 하는 것이 더 좋다. 왜냐하면 실제로는 어떤 파라미터가 더 중요할 수도 있는데 그러한 important variable에서 더 다양한 값을 샘플링 할 수 있기 때문이다.","categories":[{"name":"CS231n","slug":"CS231n","permalink":"https://heung-bae-lee.github.io/categories/CS231n/"}],"tags":[]},{"title":"[CS231n]Lecture05-Convolution Neural Network","slug":"cs231n_05","date":"2019-07-18T18:00:00.000Z","updated":"2019-12-13T03:43:27.468Z","comments":true,"path":"2019/07/19/cs231n_05/","link":"","permalink":"https://heung-bae-lee.github.io/2019/07/19/cs231n_05/","excerpt":"","text":"CNN의 역사는 생략하겠다. CNN의 기본적인 구조기존의 Fully connected Layer와 CNN의 주된 차이점은 기존의 이미지 구조를 보존시킨다는 점이다. 그리고 필터가 가중치 역할을 하는 것이라고 생각하면 될 것이다. 간단히 표현하자면, 필터를 통해 이미지를 슬라이딩하면서 공간적으로 내적을 수행하는 방식이 CNN 구조이다. 더 자세히 말하자면, 우선 필터의 크기는 입력의 크기보다는 작지만 필터의 깊이는 항상 입력의 깊이 만큼 항상 확장되어야 한다. 그러한 필터를 전체 이미지의 일부 공간에 겹쳐놓고 내적을 수행한다. 필터의 W(가중치)와 이에 상응하는 위치에 있는 입력 이미지의 픽셀을 곱해준다. 이러한 내적을 할 때는 fully connected layer의 연산과 동일하게 필터 크기에 상응하는 입력 데이터의 텐서를 하나의 긴 벡터로 보고 벡터 끼리의 내적으로 생각하면 된다. 왜냐하면 각 원소끼리 Convolution을 하는 것과 텐서를 쭉 펴서 내적을 하는 것은 동일한 작업의 결과물을 보여주기 때문이다. 신호처리 분야에서의 convolution은 실제로 필터를 뒤집은 다음에 연산을 수행한다는 내용이 있었는데 이 부분은 아직 정확한 의미를 알지 못해 좀 더 찾아보며 공부한 후 추후에 다시 내용을 업데이트 해야할 것 같다. 이제부터는 CNN에서의 필터가 작동하는 방식을 말해 보면, Convolution은 이미지의 좌상단부터 시작하게 된다. 그리고 필터와 입력 이미지 데이터의 내적으로인해 각 해당 위치에 activation map을 산출하게 된다. 예를 들어 2칸씩 띄어서 필터를 슬라이딩 한다던지 출력 activation map 행렬의 크기는 필터를 어떻게 슬라이드를 하느냐에 따라 다를 것이다. 기본적으로는 하나씩 연산을 수행한다. 보통 Convolution Layer에서는 여러개의 필터를 사용하는데 그 이유는 필터마다 다른 특징을 추출하고 싶기 때문이다. activation map의 갯수는 사용하는 필터갯수에 따라 달라진다. CNN(ConvNet)layer들 사이에 보통의 NN 처럼 activation function, Convolution, pooling(뒤에 더 자세한 설명을 하겠지만 pooling은 activation map의 사이즈를 줄이는 역할을 한다.) 같은 처리를 한 후 이러한 layer 구조를 여러번 쌓아준다. 이러한 여러 Layer들을 쌓고나서 보면 결국 각 필터들이 계층적으로 학습을 하는것을 보게된다. 보통은 CNN 전체의 구조에서 앞쪽에 있는 필터들은 low-level feature(Edge와 같은)를 학습하게 되고, 중간은 Mid-level feature을 가지게 되어 cornor나 blobs등과 같은 특징들이 보인다. 뒤쪽으로 갈수록 high-level feature(좀 더 객체와 닮은 것들이 출력으로 나오는)를 학습하게 된다. 이렇게 필터에 따라 특징을 추출하는 과정이 중요하기에 필터의 Depth를 늘리는 데 어떤 직관을 가져야하는지 의문이 들수도 있을 것이다. 이는 어떻게 모델을 디자인해야 되는지의 문제이므로 실제로는 어떤것이 더 좋은지를 찾아내야한다. Conv Layer를 계층적으로 쌓아서 단순한 특징을 뽑고 그서을 또 조합해서 더 복잡한 특징으로 활용했다. 이는 강제로 학습시킨 것이 아니라 계층적 구조를 설계하고 역전파로 학습시킨 것 뿐이지만 필터는 이렇게 학습되는 것이다. 우리가 각 필터를 통해 얻은 activation map을 시각화하면 이미지가 어떻게 생겨야 해당 뉴런의 활성을 최대화시킬 수 있는지는 나타내는 것이다. 즉, 이미지가 필터와 비슷하게 생겼으면 출력값이 커지게 된다! 그러므로 우리는 이런 시각화를 통해 어떤 필터에 대한 activation map인지를 역으로 추론해 볼 수 있을 것이다. 마치 이미지 중 어느 위치에서 필터가 크게 반응하는 지를 볼 수 있기 때문이다.시각화는 Backpropagation을 통해 해볼 수 있다. 보통 필터의 갯수는 2의 제곱수로 한다. ex) 32, 64, 128, 512등 Spatial dimension먼저, 한가지 주의할 점은 우리의 입력데이터를 잘 커버할 수 없는 필터 사이즈로 CNN 구조를 설계하게 되면, 그로인한 불균형한 결과를 볼 수도 있기 때문에 잘 동작하지 않을 수 있다는 문제가 있다. 그러므로 필터의 사이즈를 정할떄는 입력데이터를 커버할 수 있는 사이즈로 정해주어야 할 것이다. 우리가 필터를 슬라이딩한 후의 activation map의 사이즈(가로,세로 크기)는 (원래 image dimension - 필터 dimension)/stride + 1 이를 이용해서 어떤 필터 크기를 사용해야하는 지를 알 수가 있다. 어떤 스트라이드를 사용했을 때 이미지에 꼭 맞는지, 그리고 몇 개의 출력값을 낼 수 있는지도 알 수 있다. Padding가장 흔히 쓰는 기법은 zero-pad이다. 입력 image data의 코너 즉 가장자리는 필터를 적용할 때 필터의 중심보다는 덜 영향을 주진 않을지의 의문을 가질 수도 있을 것이다. 그러한 의문을 해소하기 위해 zero padding을 사용하는 것이다. 다음 그림처럼, 가장자리에 0을 채워 덫붙여 넣는 것이다. 그렇게하면 좌상단의 자리에서도 필터 연산을 수행할 수 있게 된다. 혹시 Padding을 모르는 사람들을 위해 말을 하자면, 예를들어 image data의 가장자리에 픽셀을 덫붙여주는 작업이다. zero padding을 하면 모서리에 필요없는 특징을 추가하게 되는 것은 아닌지라는 의문을 갖을 수 있는데, 우리의 본 목적은 이미지나 영상 내에서 어떤 edge 부분의 위치(값)을 얻고 싶은 것이고, zero-padding은 이를 할 수 있는 하나의 방법일 뿐이라는 것을 명심하자! 왜냐하면 우리는 지금 필터가 닿지 않는 모서리 부분에서도 값을 뽑을 수 있게 되기 때문이다. (zero가 아닌 mirror나 extend하는 방법도 있다!! 허나, zero-padding 제법 잘 동작하는 방법 중 하나이다.) 물론 모서리 부분에 약간의 artifact가 생길 순 있다. 당연히 고려해야 하는 부분이다. zero-padding을 하는 또 다른 이유는 Layer를 거치면서도 입력의 사이즈를 유지하기 위해서이다. padding을 해줌으로서 컬럼이 두개가 더 생성되어 결국에는 입력받은 데이터의 크기와 동일한 출력 크기를 얻을 수 있다는 점을 앞서 배운 공식에 적용시켜 생각해보면 이해가 갈 것이다. 즉, 요약하면 Padding을 하게되면 출력 사이즈를 유지시켜주고 필터의 중앙이 닿지 않는 곳도 연산할 수 있다는 것을 알 수 있다. 다음은 내가 강의를 들으면서 접했던 질문 중 나 또한 궁금했던 질문이다. 만약 이미지가 square matrix가 아니고 rectangular matrix라면 수평, 수직방향의 stride를 다르게 적용해야 하는지 이다. 이런 질문은 나왁 같은 입문자들에게는 궁금할 만한 질문이라고 생각한다. 담은 물론 가능하지만, 보통은 square matrix로 이미지를 처리한후 사용하여 같은 stride를 적용한다는 것이다. 이미지 해상도 문제와도 관련이 있다. 아마 우리는 입력 이미지 원본 상태의 비율을 유지하고 싶겠지만 대부분은 정사각형으로 잘라서 사용한다는 것이다. 일반적으로 어떤 stride와 filter를 쓸건지를 정하는 방법이 있다. filter size stride 3x3 1 5x5 2 7x7 3 만약 Layer가 여러겹 쌓인 구조를 설계한다고 가정했을때, zero-padding을 하지 않는 다면 출력 사이즈는 아주 빠르게 줄어 들게 될 것이다. 그 의미는 결국 일부 정보를 잃게 되는 것이고 원본 이미지를 표현하기에 너무 작은 값을 사용하게 될 것이다. 또한, 그 이유는 매번 필터를 적용하여 convolution을 할 때 각 코너에 있는 값들을 계산하지 못하기 때문이다. 예를 들어 보자. input volume이 32x32x3이고, 10개의 5x5 필터들을 stride 1, padding을 2로 주었을 경우, output volume size는 어떻게 될 것인가? 정답은 32x32x10이다.(32+(2x2)-5/1)+1=32이고 필터의 갯수가 10이므로) 그렇다면 이 Layer의 parameter는 총 몇개 일까? 정답은 5x5x3=75개라는 가중치와 bias인 1개를 더한 75+1=76개를 각 필터당 가지므로 총 10개의 필터가 있기에 76*10=760개이다. 1x1 Convolution도 의미가 있다. 필터의 크기가 1초과인 다른 필터들 처럼 공간적인 정보를 이용하진 않지만 여전히 Depth만큼 연산을 수행한다. 그러니 1x1 ConvNet는 입력의 전체 Depth에 대한 내적을 수행하는 것과 같다. &#39;stride를 선택하는 데 있어 가질 수 있는 직관은 무엇인가&#39;라는 의문에 stride를 크게 가져갈수록 출력은 점점 작아질 것이라는 것이다. 즉, 이미지를 다운샘플링하는 것인데 Pooling을 하는 것과 비슷하다. 엄밀히 말하자면 둘은 다른 얘기이며, Pooling 보다 더 좋은 성능을 보이기도 한다. Pooling 처럼 다운 샘플링하는 동일한 효과를 얻으면서도 더 좋은 성능을 낼 수도 있다. 그리고 activation map의 사이즈를 줄이는 것은 추후 모델의 전체 파라미터의 갯수에도 영향을 미친다. 왜냐하면 출력 노드 전 마지막 단계에서 Fully connected Layer를 보게 되면 Conv의 출력 모두와 연결되어 있음을 알 수 있다. 즉, Conv Layer의 출력이 작을수록 Fully connected Layer에서 필요한 파라미터의 수가 더 작을 것이라는 점이다. 파라미터의 수, 모델의 사이즈, 그리고 Overfitting 과 같은 것들에는 다양한 trade-off가 있다. 이러한 trade-off는 stride를 몇 으로 할지를 결정할때 고려해야 하는 문제이다. Conv Layer를 Brain Neuron의 관점에서 살펴보자. 뉴련과 Conv Layer의 가장 큰 차이점은 우리의 뉴런은 Local connectivity를 가지고 있다는 점이다. Conv Layer처럼 슬라이딩을 하는 것이 아니라 특정 부분에만 연결되어 있다. 하나의 뉴런은 한 부분만 처리하고, 그런 뉴런들이 모여서 전체 이미지를 처리하는 것이다. 이런 식으로 spatial structure를 유지한 채로 Layer의 출력인 activation map을 만드는 것이다. 또한, 필터는 이미지에서 같은 지역을 돌더라도 서로 다른 특징을 뽑아낸다고 볼 수 있다. Pooling layerPooling Layer는 Representation들을 더 작고 관리하기 쉽게 해준다. 즉 파라미터의 수를 줄인다는 것이다.그리고 일종의 공간적인 불변성을 얻을 수 도 있다. 결국 Pooling Layer를 관리하는 일은 Downsampling하는 것이다. 여기서 중요한 점은 Depth에는 아무런 영향을 주지 않는다는 것이다. 그리고 일반적으로 Max pooling이 사용된다. Pooling에도 필터 크기를 정할 수 있다. 얼마만큼의 영역을 한 번에 묶을지를 정하는 것이다. 기본적으로 Downsampling을 하고 싶은 것이기 때문에 Pooling을 할 때는 겹치지 않는 것이 일반적이다. 또한, 우리가 다루는 값들은, 얼마나 이 뉴런이 활성화되었는 지를 나타내는 값이다. 즉, 이 필터가 각 위치에서 얼마나 활성화되었는지 이다. Max pooling은 그 지역이 어디든, 어떤 신호에 대해 “얼마나” 그 필터가 활성화 되었는지를 알려준다고 알 수 있다. \b인식에 대해 생각해 보았을때 인식은 그 값이 어디에 있었다는 것 보다는 그 값이 얼마나 큰지가 중요한 것이다. 그러므로 average pooling 보다 더 좋다. Pooling도 일종의 stride 기법이라고 볼 수 있다. 사람들은 Downsampling을 할때 Pooling을 하기보단 stride를 많이 사용하고 있는 추세이고 성능도 좋다. Pooling Layer도 Conv Layer에서 사용했던 수식을 그대로 이용해서 Design choice를 할 수 있다.한가지 특징이 있다면 pooling layer에서는 보통 padding을 하지 않는다. padding의 목적은 주로 사이즈를 유지하기 위한 것이지만 pooling의 목적은 down sampling이고 Conv layer에서 처럼 코너의 값을 계산하지 못하는 경우도 없기 때문이다. filter size stride 2x2 2 3x3 2","categories":[{"name":"CS231n","slug":"CS231n","permalink":"https://heung-bae-lee.github.io/categories/CS231n/"}],"tags":[]},{"title":"[CS231n]Lecture02-Image classification pipeline","slug":"cs231n_02","date":"2019-07-18T07:00:00.000Z","updated":"2019-12-08T05:34:11.115Z","comments":true,"path":"2019/07/18/cs231n_02/","link":"","permalink":"https://heung-bae-lee.github.io/2019/07/18/cs231n_02/","excerpt":"","text":"기본적으로 Computer vision에서 가장 핵심이 될 수 있는 작업은 Image Classification이라고 할 수 있을 것이다. Image classification이 가능하면 detection, segmentation, captioning 작업들이 수월하게 작업이 가능해진다. 이미지는 기본적으로 3차원의 배열 형태로 [0, 255] 사이의 수로 이루어져 있다. 3차원은 기본적으로 이미지가 컬러인 경우이며, 각각의 차원은 RGB채널로 불린다. 이미지는 카메라 앵글이라던지 보는 시각에 따라 달리 보이며, 밝기도 다를 수 있으며, 형태의 변형, 그리고 은폐, 은닉 등등 여러 문제들이 존재한다. 그렇다면, 우리는 이런 문제들을 가진 상태에서 classification을 하는데 있어서 숫자를 정렬하는 알고리즘과 같은 명백한 알고리즘이 존재하지 않는다는 것이 문제점으로 떠오를 것이다. 물론 이미지를 보고 이미지의 edge, chunk를 찾아서 library화 하고 이미지가 어떻게 배열되어 있는지와 같은 feature들을 가지고 들어온 이미지를 classification하는 방식으로 진행해왔지만, 이 정도만으로는 역부족이었다. 이제는, 데이터 기반의 접근방식을 사용한다. - 1) Labeling 되어있는 data를 준비한다. - 2) Image classifer를 훈련시키기 위해 Machine Learning을 사용한다. - 3) test image set을 활용해서 classifier를 평가한다. 먼저 지금은 잘 사용되지 않는 Nearest Neighbor Classifier를 설명해 볼 것이다.방법은 간단하다. 먼저 모든 train data와 각 image data의 label을 읽어 메모리상에 기억하게 해놓는다.그런 후에 가장 비슷한 train image의 label으로 예측하게끔 하는 방법이다. 위에서 말한 가장 비슷한 image라는 것은 소위 생각해보면 데칼코마니 같이 서로 겹쳐 놓았을때 같게 되면 두 image는 동일한 image라고 생각하기 때문에 각각의 동일한 위치의 픽셀값을 빼 절대값의 합을 취하는 L1 norm을 사용하는 방법과 ConvNet(CNN)은 data가 엄청 많아야 학습 시킬 수 있다라는 생각은 잘못된 생각일 수 있다. 왜냐하면 우리 모델을 처음부터 학습시키는 것이 아닌 학습되어 있는 모델의 가중치를 가져와 쓰는 Fine Tune이 있기 때문이다.","categories":[{"name":"CS231n","slug":"CS231n","permalink":"https://heung-bae-lee.github.io/categories/CS231n/"}],"tags":[]},{"title":"growth_hacking_01","slug":"growth_hacking_01","date":"2019-05-17T23:38:10.000Z","updated":"2019-07-20T03:36:16.967Z","comments":true,"path":"2019/05/18/growth_hacking_01/","link":"","permalink":"https://heung-bae-lee.github.io/2019/05/18/growth_hacking_01/","excerpt":"","text":"결국 문제는 Distribution 모바일 앱 시장을 생각해 보면 알수 있듯이 초창기에는 신기해서 앱을 다운로드하던 시정이 있었지만, 현재는 앱을 다운로드하지 않는 트렌드를 알 수 있다. 클라우드 서비스의 성장과 SaaS의 성장으로 인래 많은 스타트업이 생겼지만, 그 중 대부분이 실패를 한다. 그 이유는 유통때문이다. 즉, 빈약한 유통채널을 가지고 있기 때문이다. 그러한 대표적인 사례로 TiVo를 꼽을 수 있다. 즉, 컨텐츠가 있어야 디지털 비디오 레코드 상품을 판매하는 것이 의미있는 것인데, 컨텐츠들은 모두 케이블 TV 사업자와 위성 TV 사업자가 컨텐츠 유통을 쥐고있기 때문에 유통이 어려웠다. 결국 Tivo는 Patent Troll(특허 전쟁)로 전락하였다. 성공적인 기술 기업의 일반적인 모델은, 제품 중심기업이 아니라 유통 중심 기업이 되는 것이다. 구글, 페이스북등의 기업은 그 자체가 유통 플랫폼이 되어, 계속해서 새로운 제품을 고객들에게 선보이고 있다. 허나 위의 유통 중심의 기업으로 성장하기가 어려운 현실이 되었다. 시장에 많은 제품과 서비스가 나와있으며 소비자와 고객들이 가진 시간과 돈은 한정되어있으므로 모든 제품과 서비스가 고객들에게 도달하지 못하기 때문이다. 또한, 페이스북, 인스타그램 등 광고 플랫폼의 지면에는 한계가 있지만, 광고하고 싶은 기업은 점점 늘어나기 때문에 광고비는 상승한다. 사람들은 점점 광고를 클릭하지 않으며, 사람들이 기업의 마케팅 활동에 적응하고 피로감을 느끼고있는 상황은 더욱 더 유통이 이루어지기 힘들게 하고 있다.","categories":[{"name":"growth hacking","slug":"growth-hacking","permalink":"https://heung-bae-lee.github.io/categories/growth-hacking/"}],"tags":[]},{"title":"growth_hacking_00","slug":"growth_hacking_00","date":"2019-05-17T22:36:16.000Z","updated":"2019-07-20T03:36:19.296Z","comments":true,"path":"2019/05/18/growth_hacking_00/","link":"","permalink":"https://heung-bae-lee.github.io/2019/05/18/growth_hacking_00/","excerpt":"","text":"Growth hacking outlineStart up? 에어비앤비, 우버, 비바리퍼블리카(토스), 우아한형제들(배달의 민족), VCNC의 타다 등의 회사 확장가능하고 반복가능한 사업모델을 탐색하기 위해 고안되어진 임시조직 아직 잘 작동하는 사업 모델을 찾아내지 못한 기업을 의미하며, 사업 모델이 잘 작동한다면 Established company라고 부를 수 있다. 스타트업의 숙명은 결국 사업 모델을 찾기 전까지 여러 가지 시도를 하고 시행착오를 겪을 수 밖에 없다! 스타트업의 특징 한정된 자원(Runway) ex) 제한된 돈 Runway의 끝에 도달하기 전에 해야할 일 시장, 고객 등에 대한 가설을 확인하며 고객 확보 매출, 후속 투자 유치 등 이런 스타트업과 가설검증의 관계는 무엇일까? - 가설은, 팀이 가진 경험이나 직관을 기반으로한 학습된 추측이다. 결국 스타트업은 끊임없이 가설을 검증해야하는 조직이다!! 그러므로, 스타트업은 빠른 속도로(Lean하게) 가설을 검증해야 한다. 왜냐하면 많은 가설들을 주어진 자원내에 해결하여 이익을 창출해야하기 때문이다. 그로스 역시, 끊임 없이 가설을 세우고 검증하는 “테스트”를 반복하는 것이다. 리스크와 가설 위에서 가설의 검증 중요성을 언급하였다. 그렇다면 스타트업이 가지고 있는 가설 중 어떤 가설 부터 확인해야 하는지를 말하자면, 틀렸을 경우, 사업이 실패할 확률이 큰 리스크가 높은 가설을 먼저 확인해야 함이 논리적일 것이다. 그렇다면 그 리스크가 큰 가설은 제일 무엇일지를 고민해보면 수익을 창출해낼수 있으려면 고객이 있어야 하므로 잠재적인 고객이 없다는 것이 가장 리스크가 높을 것이다. 고객 리스크고객에 대한 가설을 확인하는 방법 고객 인터뷰 (가장 효과적인 방법) 포커스 그룹 인터뷰(FGI) 5~6명 정도되는 인원들을 한 방에 모아놓고 인터뷰 진행을 하므로 인터뷰 중 자신의 주관적인 의견을 말하기 보다는 그 인터뷰의 흐름에 따라 의견을 낼 수 있는 집단 사고의 위험이 있을 수 있다. 또한 목소리 큰 사람에세 동조하는 경향을 보이므로 이런 문제를 해결하기 위해 전문 모더레이터를 고용하는 방법이 있지만 이 방법은 비용이 높으므로 스타트업에서 추천하는 방법은 아니다. 1대 1 심층 인터뷰 위의 포커스 그룹 인터뷰와는 다르게 집단 사고의 위험이 없고 비교적 쉽게 수행할 수 있다. 온전히 한명의 고객에 집중할 수 있다는 장점이 있다. 여기까지 보게 되면 그로스 해킹은 데이터를 보아야만 하는 것이 아니지 않느냐는 의문이 생길 것이다. 이에 대한 답은 아니다라는 결론을 내릴 수 있게 된다. 왜냐하면 그로스라는 것은 결국 고객을 파악하여 고객이 어떤 문제를 가지고 있는지 같은 고객의 잠재적인 니즈를 파악하여 그를 해결하므로서 수익을 창출하는 것이기 때문이다. 참고로 데이터 기반 회사의 끝판왕인 구글도 고객 인터뷰를 중시한다. [참고] 고객 인터뷰 공부하기 애쉬 모리아의 책 “린 스타트업”, “스케일링” Google Ventures - User Research, Quick n’Dirtyhttps://library.gv.com/user-research-quick-and-dirty-1fcfa54c91c4 고객이 존재한다면 추후에 확인해야할 리스트 고객이 존재하긴 하더라도, 적은 수의 고객만 존재한다면 시장의 파이가 크지 않으므로 사업모델을 만들어내기 적합하지 않다. 이런 시장의 크기는 충분히 여러명(50명, 100명)과 인터뷰를 하며, 반복적인 패턴을 관찰해야 하며, 또 다른 방법으로는 실제 제품을 개발하지 않고 아이디어를 검증하는 방법인 Smoke Test를 실행헤 보는 것이다. 예를 들면, 더미 화면을 만들어 그곳으로 트래픽을 유입시\u001d켜서 테스트를 하는 방법이다. 이렇게 함으로써 우리 제품의 시장에서의 수요를 확인할 수 있다. 솔루션 리스크 Problem-Solution Fit이 맞지 않다라는 말을 들어본적이 있을 것이다. 즉, 솔루션이 문제에 적합하지 않다는 것이다. 고객의 문제도 존재하고, 지갑을 열 고객도 충분히 많지만 우리의 제품이 그 문제에 대한 효과적인 해결책이 아닌 경우에 위의 말을 사용한다. 솔루션 리스크에 대비하려면 프로토타입을 만들어서 고객 반을을 먼저 확인해야 한다. 가설을 확인하지 않은 채, 제품 개발에 너무 많은 자원을 들이지 않아야 한다.","categories":[{"name":"growth hacking","slug":"growth-hacking","permalink":"https://heung-bae-lee.github.io/categories/growth-hacking/"}],"tags":[]},{"title":"프로그래머를 위한 베이지안 with 파이썬(1)","slug":"Bayes","date":"2019-03-08T14:52:20.000Z","updated":"2019-07-20T03:36:10.633Z","comments":true,"path":"2019/03/08/Bayes/","link":"","permalink":"https://heung-bae-lee.github.io/2019/03/08/Bayes/","excerpt":"","text":"베이지안 심리 상태 베이지안 추론은 불확실성을 유지한다는 점에서 기존의 전통적인 통계적 추론과 다르다. 위의 말을 읽었을때 개인적으로 통게학을 전공한 나로써는 이해가 잘 가지 않았다. 왜냐하면 통계라는 학문 자체가 불확실성을 기반으로 하는 것이 아닌가라는 의문이 들었기 때문이다. random한 것에서 확률적으로 높은 것을 찾아내는 것인데 말이다. 우선 확률을 해석하는 방법은 크게 두가지로 구분 될 수 있다. 고전적인 빈도주의적 관점 : 사건이 장기적으로 일어나는 빈도로 해석ex) 항공기의 사고 확률을 오랫동안 발생한 비행기 사고의 빈도로 해석한다. 위의 빈도주의적 관점은 논리적으로는 오류가 없어 보이나, 오랫동안이라는 전제조건이 필요하다. 만일 오랫동안 즉, 충분한 시도가 없었을 경우의 확률은 어떠한 근거로 이야기 해야할 것인가의 의문을 갖게 된다. 그것이 바로 베이지안 방법이다. 베이지안 관점 : 사건 발생에 대한 믿음 또는 확신의 척도로 해석 간단히 말하면, 확률은 의견이나 견해를 요약한 것이라는 의미일 것이다. 주목할 점은 믿음의 정도나 확신의 척도가 개인의 주관에 달려 있다는 점이다. 그렇다면 객관적이지 않은데 이것을 확률이라고 말할 수 있는가? 좀더 근본적인 얘기를 해보자면 믿음이기 때문에 누군가가 틀렸다는 것을 말할 수 없지 않은가? 베이지안관점에서의 확률을 이야기하자면 베이즈 정리 또한 빼놓고 이야기 할수 없을 것이다.베이즈 정리의 사전확률과 사후확률","categories":[{"name":"Bayes","slug":"Bayes","permalink":"https://heung-bae-lee.github.io/categories/Bayes/"}],"tags":[]},{"title":"비주얼 디자인에서 제목(Headings), 단락(Paragraph)구조 도출하기","slug":"front_end4","date":"2019-03-05T14:05:59.000Z","updated":"2019-07-20T03:36:22.826Z","comments":true,"path":"2019/03/05/front_end4/","link":"","permalink":"https://heung-bae-lee.github.io/2019/03/05/front_end4/","excerpt":"","text":"제목(Hedings), 단락(Paragraph) 도출하는 과정단락(Paragraph) 사용자가 가장 많이 읽는 콘텐츠는 단락으로 단락은 p요소로 구성된다. 제목의 단계(Hedings Level 1 - 6) 사용자가 가장 먼저 읽은 콘텐츠는 제목으로 제목은 h요소로 구성된다. h1 요소는 문서에서 단 한번만 사용하며 HTML5에서는 섹션 콘텐츠 마다 사용 가능하다. HTML 제목 HTML 단락 HTML 주\u001d석 1234567891011121314&lt;!DOCTYPE html&gt;&lt;html lang=\"ko-KR\" dir=\"ltr\"&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\"&gt; &lt;title&gt;HTML 제목(Headings) 그리고 단락(Paragraph)&lt;/title&gt; &lt;/head&gt; &lt;body&gt; \b오늘의 나이, 대체로 맑음 &lt;h1&gt;이제 좀 살아본 사람들의 마흔, 자기 생의 날씨를 적절히 대처하기 알맞은 나이.&lt;/h1&gt; &lt;h2&gt;이 나이에도 여전히 미숙하고 꾸준히 실수한다.&lt;/h2&gt; &lt;img src=\"sbs-drama__do-you-want-to-kiss-first.png\" alt=\"SBS 드라마 &lt;키스 먼저 할까요?&gt;의 한 장면: 배우 김선아가 홀로 겨울바다를 걷는 중...\"&gt; &lt;/body&gt;&lt;/html&gt; HTML 이미지 &amp; 피규어 &amp; 캡션 HTML 문서에 연결되어 화면에 표시되는 이미지 요소와 도표, 차트, 표 이미지 등을 캡션과 함께 묶어주는 피규어 요소에 알아본다. 위에서 img 요소의 alt 속성을 해두는 이유는 링크가 깨질 경우에는 화면에 alt 속성 값이 출력 되어 어떤 이미지 였는지 정보를 제공할 수 있으며, 또한 시각 장애인의 경우 이미지를 보지 못하므로 이런 대체 속성을 통해서 정보를 얻을 수 있기 때문이다. 또한, HTML의 이미지 같은 경우는 서버를 통해 연결되어 있다. 즉, 한글이나 기타 문서 작업의 프로그램에서 처럼 이미지를 실제로 포함하고 있는 것(임베딩)이 아니라는 점이 크게 다른 점이라고 할 수 있다. 웹 문서에 주로 사용되는 이미지 포멧은 다음과 같다. 비트맵 그래픽 파일 : JPG, GIF, PNG 포멧이 사용 벡터 그래픽 파일 : SVG 포멧이 사용 (위의 비트맵 그래픽 파일은 픽셀로 구성되어 있기 때문에 크기를 키울 경우 뿌옇게 흐려진다.) JPG 이미지JPG 이미지는 압축률이 높고, 다양한 색상을 처리하도록 설계되었으며, 그러므로 사진 또는 복잡한 그래픽(그레디언트와 같은) 이미지에 많이 사용된다. 하지만, GIF, PNG와 달리 투명한 픽셀을 허용하지 않는다. PNG 이미지사진의 경우 동일한 품질의 PNG 파일 크기가 일반적으로 JPG보다 크기 때문에 PNG는 사진이나 애니메이션을 제외한 모든 유형에 적합하다. 하지만 JPG와 달리 투명 처리가 가능해 아이콘, 로고, 다이어그램 등에 사용하면 좋다. GIF 이미지GIF는 표현 가능한 색상이 256색으로 제한되어 있기에 사진에는 적합하지 않다. 하지만, 애니메이션을 적용할 수 있는 포멧으로 단순한 그래픽의 애니메이션에 사용하면 좋다. 투명하게 처리가 가능하긴 하지만, PNG 포멧 보다 표현력이 떨어진다. SVG 이미지SVG는 벡터 기반 그래픽 포멧으로 품질 손실없이 확대, 축소 할 수 있다. 오늘날 처럼 다양한 스크린에 대응하는 반응형 웹 디자인에 매우 적합하다. HTML 이미지HTML 피규어HTML 피규어 캡션 HTML 문법 유효성 검사 &amp; 엔티티(Entity) 코드HTML 문법 유효성 검사(Validator) HTML 문서의 문법의 유효성 검사 방법과 각 괄호(Angle Bracket,&lt; &gt;) 모양의 문자를 브라우저가 태그로 인식하지 않도록 이스케이프(Escape) 처리하는 엔티티(Entity)코드에 대해서 알아본다. 참고자료vaildator.w3.orgentitycode.com 위에서 첫번째 사이트의 경우 HTML 문법을 검사할수 있는 온라인 서비스를 제공하고 있어서 서비스를 이용하면 좋다. 또한, 이스케이프 처리를 할려는 문자들은 두번째 사이트에서 찾아서 수정하면 된다. 위의 코드에서 이스케이프 처리를 해준다면, 다음과 같이 &lt;&gt; 부분이 변경된다. 1234567891011121314&lt;!DOCTYPE html&gt;&lt;html lang=\"ko-KR\" dir=\"ltr\"&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\"&gt; &lt;title&gt;HTML 제목(Headings) 그리고 단락(Paragraph)&lt;/title&gt; &lt;/head&gt; &lt;body&gt; \b오늘의 나이, 대체로 맑음 &lt;h1&gt;이제 좀 살아본 사람들의 마흔, 자기 생의 날씨를 적절히 대처하기 알맞은 나이.&lt;/h1&gt; &lt;h2&gt;이 나이에도 여전히 미숙하고 꾸준히 실수한다.&lt;/h2&gt; &lt;img src=\"sbs-drama__do-you-want-to-kiss-first.png\" alt=\"SBS 드라마 &amp;lt키스 먼저 할까요?&amp;gt의 한 장면: 배우 김선아가 홀로 겨울바다를 걷는 중...\"&gt; &lt;/body&gt;&lt;/html&gt; HTML 목록 디자인HTML 문서 작성 시, 목록은 매우 빈번하게 사용 되는 요소이다. 비순차 목록(Unorderd List) : 순서가 없는 목록 순차 목록(Ordered List) : 순서가 중요한 목록 여기서 가장 중요한 것은 ol이나 ul요소의 자식은 꼭 li요소로 감싸고 시작해야한다는 점이다!!! 참고 자료 HTML 앵커(Anchor) &amp; 하이퍼링크(Hyperlink)하이퍼링크(Hyperlink)현재 페이지에서 다른 페이지로 이동하게 해주는 것을 하이퍼링크라고 한다. 이렇게 하이퍼 링크를 할때 사용하는 요소는 앵커요소이며, 다음과 같다. 앵커(Anchor) : 페이지를 다른 페이지로 전환하지 않고, 현재 페이지 하단으로 이동할 때 사용한다.123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html lang=\"en\" dir=\"ltr\"&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt;목차(Table of Contents)&lt;/h2&gt; &lt;!-- Depth 1: ul --&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=\"#intro\"&gt;소개&lt;/a&gt;&lt;/li&gt; &lt;!-- Depth 2: ul --&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=\"\"&gt;영상소개&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"\"&gt;어렵진 않을까 걱정되시나요&gt;?&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"\"&gt;GSAP에 대해 간략하게 정리해볼까요?&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"\"&gt;TweenLite&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;li&gt;&lt;a href=\"\"&gt;다운로드 &amp;amp; CDN&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=\"intro\"&gt;소개&lt;/h3&gt; &lt;/body&gt;&lt;/html&gt; 예를들어, 위의 코드에서는 앵커를 사용하여 소개를 누르게 되면, 주소가 file:///Users/heungbaelee/workspace/myBlog/source/_posts/day.html에서 file:///Users/heungbaelee/workspace/myBlog/source/_posts/day.html#intro로 바뀌게 되는 것을 확인 할 수 있다. 참고자료하이퍼링 요소 웹사이트는 폴더로 구성된 HTML 파일의 모음일 뿐이다. 다른 파일 내부에서 이들 파일을 참조하기 위해 인터넷은 URL(uniform resource locators)를 사용한다. URL은 웹 사이트의 리소스 위치 경로를 말하며 다음과 같이 구성된다. 예를들어 다음과 같은 주소가 있을때, https://Developer.mozila.org/EN-US/DOCS/WEB/HTML 에서 https:// : SCHEME Developer.mozila.org : DOMAIN /EN-US/DOCS/WEB/HTML : PATH 웹 문서에 URL을 입력하는 방법은 3가지 정도가 있다. 절대 경로 : 현재 HTML 문서와 상관없이 URL 주소를 사용해 리소스를 찾는 상대 경로 : 현재 HTML 문서에서 상대적인 위치를 설정하는 것을 말한다. ex) “../mics/extra.html”과 같이 사용한다. 루트 상대경로 : 현재 HTML 문서가 존재하는 영역의 최상위 루트 경로에서 대상을 찾는 것 ex)”/images.html”","categories":[{"name":"Front end","slug":"Front-end","permalink":"https://heung-bae-lee.github.io/categories/Front-end/"}],"tags":[]},{"title":"HTML의 DOCTYPE?","slug":"frontent3","date":"2019-02-12T01:57:00.000Z","updated":"2019-03-05T13:56:18.570Z","comments":true,"path":"2019/02/12/frontent3/","link":"","permalink":"https://heung-bae-lee.github.io/2019/02/12/frontent3/","excerpt":"","text":"우선 코드를 작성할때 HTML 코드는 tag name에 대문자로도 작성이 가능하나, 소문자로 작성하는 것을 권하며 코드 간 들여 쓰기를 하는 이유는 HTML 요소 간 관계(부모, 자식, 형제)를 구분하기 용이 함에 들여쓰나, 브라우저는 코드가 한 줄 이어도 해석하는데 아무런 문제가 없다. DTD(표준 호환모드)문서 유형 정의(Document Type Definition)를 말하며 브라우저의 렌더링 모드를 표준으로 작동하게 만들어 준다. 여기서 중요한 것인 DTD는 반드시 HTML 문서의 최상 위에 위치해야 한다. 비표준(quirks) 모드와 표준(standards) 호환모드 또한, 브라우저에서 해당 웹의 DOCTYPE을 알고 싶은 경우는 console 창에 document.doctype을 입력하면 출력되게 되어있어서 확인 할 수 있다. 웹 표준 기술 규격에 따르면 html 요소는 오직 1개의 head와 뒤 따르는 1개의 body 요소만 자식으로 포함할 수 있다는 사실을 기억하자. 문서에 사용된 주 언어가 무엇인지 설정하는 lang 속성루트 요소에 lang 속성을 사용하여 문서에 주요 사용되는 언어(language)를 설정한다.사용되는 언어 코드는 ISO 639 (전 세계 언어 명칭에 고유 부호를 부여하는 국제 표준)에서 찾을 수 있다. 12345678910&lt;!doctype html&gt;&lt;html lang=\"ko-KR\"&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt; HTML 문서 작성을 위한 기본 문법&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p title=\"Development Tools\"&gt;개발 도구(Devtools)&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 위의 코드에서 html 태그의 lang이라는 attribute를 통해 작성하는 코드에서 주로 사용되는 언어를 선택 해주면 된다. “ko-KR”은 대한민국에서 주로 사용언어는 korean이라는 의미이다. ko, en 은 korean, english 의 약자로 언어(language) 정보를 말한다. 반면 KR은 Republic of Korea 지역(locale) 정보를 말한다. ko 만 사용하면 한국어를 통칭하지만, 언어를 지역마다 구분해야 할 경우, 지역 정보를 추가하여 사용하는 것이 좋다. 예를들어, ko-KR은 대한민국(남한)에서 사용하는 한국어를 의미하지만, ko-KP는 조선 민주주의 인민공화국(북한, 북조선)에서 사용하는 한국어를 의미하게 된다. 영문권에서는 지역마다 사용 되는 영어가 달라 다음과 같이 표기하여 구분한다. en-GB ⇒ 영국 영어en-US ⇒ 미국 영어en-CA ⇒ 캐나다 영어 언어 조회는 Language subtag lookup 에서 할 수 있다.","categories":[{"name":"Front end","slug":"Front-end","permalink":"https://heung-bae-lee.github.io/categories/Front-end/"}],"tags":[]},{"title":"deep learning_01","slug":"deep_learning1","date":"2019-01-16T13:59:30.000Z","updated":"2019-12-08T05:35:02.857Z","comments":true,"path":"2019/01/16/deep_learning1/","link":"","permalink":"https://heung-bae-lee.github.io/2019/01/16/deep_learning1/","excerpt":"","text":"우선 지금부터 설명하는 내용은 패스트캠퍼스의 교육과정에서 배운 내용과 제 나름대로 책을 읽어가며 정리하는 내용을 바탕으로 작성하는 글입니다. 딥러닝 기초딥러닝? ML분야에서나 AI분야에서 활발하게 이용하고 있는데 간단히 말하자면, 여기서 말하는 ‘deep’은 학습을 수행하는 신경망(혹은 그에 상응하는 다른 것)의 층수가 ‘깊다’라는 의미이다. 즉, 여러층을 가진 구조를 사용한 학습을 말한다. 신경망 기초 이론 신경망(neural network) 모형은 기저 함수(basis function)의 형태를 모수(parameter)값으로 변화 시킬 수 있는 적응형 기저 함수 모형(adaptive basis function model)이며 구조적으로는 복수의 퍼셉트론을 쌓아놓은 형태이므로 MLP(multi-layer perceptron)로도 불린다. 시그모이드 활성화 함수 일반적으로 활성화 함수 h로는 위와 아래가 막혀있는(bounded) 시그모이드 함수 \\( \\sigma \\)를 사용하는데 가장 많이 사용하는 활성화 함수는 로지스틱 함수이다. 비선형 기저 함수퍼셉트론에서 x 대신 기저함수 \\( \\phi(x) \\)를 사용하면 XOR 문제 등의 비선형 문제를 해결할 수 있다. 그러나 고정된 기저 함수를 사용해야 하므로 문제에 맞는 기저 함수를 찾아야 한다는 단점이 있다. 따라서 많은 기저 함수를 사용할 수 밖에 없는 것이 보통이다. 하이퍼 파라미터에 의해 모양이 바뀌는 비선형 기저 함수만약 기저 함수 \\( \\phi(x) \\)의 형태를 추가적인 모수 \\( \\theta \\)를 사용하여 조절할 수 있다면 즉, 기저함수 \\( \\phi(x;\\theta) \\)를 사용하면 \\( \\theta \\)값을 바꾸는 것만으로 다양한 시도를 하여 다양한 모양의 기저함수를 테스트해 볼 수 있을 것이다. 앞으로 설명할 신경망 즉, MLP(Multi-Layer-Perceptron)은 퍼셉트론이 사용하고 있는 로지스틱 시그모이드 함수를 기저 함수로 사용하는 모형이다. 기저 함수의 형태는 하이퍼 파라미터인 w","categories":[{"name":"deep learning","slug":"deep-learning","permalink":"https://heung-bae-lee.github.io/categories/deep-learning/"}],"tags":[]},{"title":"HTML이란?","slug":"Foront_end2","date":"2019-01-15T03:36:00.000Z","updated":"2019-03-05T13:54:47.784Z","comments":true,"path":"2019/01/15/Foront_end2/","link":"","permalink":"https://heung-bae-lee.github.io/2019/01/15/Foront_end2/","excerpt":"","text":"HTML 문서 작성을 위해 알아야 할 기본 문법웹 페이지는 head 영역과 body영역으로 구성 된다. Head Page title(웹 페이지의 제목으로 브라우저 탭에 표시된다.) 만약 위의 값이 한글인데 깨지게 된 경우는 console창에서 document.characterSet을 쳐보면 인코딩 방식을 확인 할 수 있으며 meta 태그에 charset=”utf-8” 속성값을 입력해주면된다. CSS Links Other Abstract things Body Headings Paragraph Other things(추상적이지 않고 우리 눈에 볼수 있는 것) HTML 용어- element(요소) - tag - open tag - close tag - attribute - value 기본 문법HTML 요소는 대소문자를 구분하지 않는다!!! 하지만 대게 가독성과 기타 이유 때문에 소문자로 작성한다.HTML은 elements로 구성되어 있으며, 이들은 적절한 방법으로 나타내고 실행하기 위해 각 컨텐츠의 여러 부분들을 감싸고 마크업 한다. 만약 문장을 그냥 자체로 표현하고 싶다면?? 다음과 같이 로 감싸면 된다. 1$ &lt;p&gt;My cat is very grumpy.&lt;/p&gt; 여기서 는 opening tag &lt;/p&gt;는 closing tag 안에 감싸져 있는 My cat is very grumpy는 Content 위의 코드 전체를 Element라고 한다. 닫는 태그가 없는 HTML 요소 Empty Element는 contents를 감싸지 않아 비어있다는 의미로써 contents를 감싸지 않기 때문에 닫는 태그를 갖지 않는다. empty element 중첩된 요소(Nesting elements)요소 안에 다른 요소가 들어갈 수 있다. 그런 요소는 중첩되어 있다고 표현한다. 예를 들어 “고양이가 매우 사납다”라는 문단을 강조하기 위해서 ‘매우’라는 단어를 강조하는 요소를 중첩해서 사용할 수 있다.1$ &lt;p&gt;My cat is &lt;strong&gt;very&lt;/strong&gt; grumpy.&lt;/p&gt; 블럭 레벨 요소 vs 인라인 요소(Block vs inline elements)HTML의 두 종류의 Element는 Block level element와 Inline element이다. Block-level elements는 웹페이지 상에 Block을 만드는 요소이다. 앞뒤 요소 사이에 새로운 줄(Line)을 만들고 나타난다. 즉 블록 레벨 요소 이전과 이후 요소사이의 줄을 바꾼다. 블록 레벨 요소는 일반적으로 페이지의 구조적 요소를 나타낼 때 사용된다. 예를 들어 개발자는 블록 레벨 요소를 사용하여 Paragraph, list, Navigation Menus(네비게이션 메뉴), Footers(꼬리말)등을 표현할 수 있다. 블록 레벨 요소는 인라인 요소에 중첩될 수 없다. 그러나 블록 레벨 요소는 다른 블록 레벨 요소에 중첩될수 있다. Inline elements는 항상 블록 레벨 요소내에 포함되어 있다. 인라인 요소는 문서의 한 단락같은 큰 범위에는 적용 될 수 없고 문장, 단어 같은 작은 부분에 대해서만 적용될 수 있다. 가장 큰 차이점은 인라인 요소는 새로운 줄을 만들지 않는다.즉 인라인 요소를 작성하면 그것을 작성한 단락내에 나타나게 된다. 예를 들어, 인라인 요소에는 하이퍼링크를 정의하는 요소인 , 텍스트(Text)를 강조하는 요소인 , 등이 있다. 123&lt;em&gt;first&lt;/em&gt;&lt;em&gt;second&lt;/em&gt;&lt;em&gt;third&lt;/em&gt;&lt;p&gt;forth&lt;/p&gt;&lt;p&gt;fifth&lt;/p&gt;&lt;p&gt;sixth&lt;/p&gt; 위의 코드를 실행 시켜 보면 알 수 있듯이 은 인라인 요소여서 서로 같은 줄에 공백이 없이 위치 하지만, 는 블록 레벨 요소이어서, 각 요소들은 새로운 줄에 나타나며, 위와 아래에 여백이 있다.(정확히는 여백은 브라우저가 문단에 적용하는 기본 CSS styling 때문에 적용된다.) 빈 요소(Empty elements)모든 요소가 위에 언급된 Open tag, contents, closed tag의 패턴을 따르는 것은 아니다. 주로 문서에 무언가를 첨부하기 위해 단일 태그(Single tag)를 사용하는 요소도 있다. 예들들어 요소는 해당 위치에 이미지를 삽입하기 위한 요소이다.(빈 요소는 가끔 Void 요소로 불리기도 한다.) 1&lt;img src=\"https://raw.githubusercontent.com/mdn/beginner-html-site/gh-pages/images/firefox-icon.png\"&gt; 속성(attributes)element는 Attribute를 가질 수 있다. Attribute는 element에 실제론 나타내고 싶지 않지만 추가적인 내용을 담고 싶을 때 사용한다. 아래의 코드는 나중에 스타일에 관련된 내용이나 기타 내용을 위해 해당 목표를 구분할 수 있는 class attribute를 부여 했다. Attribute를 사용할 때 지켜야 할 점 element 이름 다름에 바로오는 attribute는 element이름과 attribute 사이에 공백이 있어야 되고, 하나 이상의 attribute가 있는 경우엔 attribute 사이에 공백이 있어야 한다. attribute 이름 다음엔 등호(=)가 붙는다. attribute 값은 열고 닫는 따옴표로 감싸야 한다.","categories":[{"name":"Front end","slug":"Front-end","permalink":"https://heung-bae-lee.github.io/categories/Front-end/"}],"tags":[]},{"title":"HTML이란?","slug":"Front_end","date":"2019-01-14T08:36:00.000Z","updated":"2019-03-05T13:54:51.234Z","comments":true,"path":"2019/01/14/Front_end/","link":"","permalink":"https://heung-bae-lee.github.io/2019/01/14/Front_end/","excerpt":"","text":"HTML(Hyper Text Markup Language)이란?? Hyper Text란? text의 밑줄이 거지게되어 사용자가 이걸 눌르면 연결되어있는 링크로 연결된다. 구조를 설계할 때 사용되는 언어이며, 하이퍼링크 시스템으로 이루어져 있다. 확장자는 htm, html으로 가지며, 이 파일은 단순한 텍스트 파일에 불과하지만, 이 파일을 웹브라우져가 화면에 렌더링(그림을 그려준다라고 생각하면됨)을 통해 사용자가 볼수 있도록 해준다. HTML 표준 기술 사양 HTML 문서 파일과 웹 브라우저의 해석 &amp; 시멘틱 마크업 시멘틱 마크업(Semantic Markup) HTML은 웹사이트 콘텐츠의 의미를 설명하는 유일한 목적을 가진다. 즉, 비주얼 디자인(모양, 색, 크기 등)이 아니라(이 요소들은 CSS나 Javascript의 목표) 전체적인 구조 설계(Structure Design)를 목표로 한다. Semantic Markup은 종종 POSH(Plain Old Semantic HTML)라고도 불리우는데 해석 그대로 평범하고 오핸된 의미론적인 HTML이라는 뜻이다. 적절한 HTML요소를 올바르게 사용하는 것에서 시작한다. 1$ &lt;div id=\"heading\" style=\"font-size: 300%; padding: 10px;\"&gt;시멘틱 마크업이란?&lt;/div&gt; 위의 마크업은 확실히 제목같아 보이지만 의미와 용도면에서는 제목으로서의 기능은 없다. 이것은 검색엔진의 최적화, 접근성, 개발면에서 다음과 같은 사항들을 고려해야된다. 최적화 : 검색엔진을 최적화하는 것에서 매우 중요한 것은 headings 요소 안의 키워드이다. 접근성 : 스크린리더기는 네비게이션 길잡이로 headings요소를 참고한다. 개발 : 적절한 시멘틱 요소를 사용하지 않게 될시 스크립트와 스타일을 주기 위해 해당 요소를 설정하는데 많이 까다롭다. 시멘틱 마크업은 가능한 가벼워야 하기에 중첩된 모든 div요소와 실타래 처럼 얽혀 있는 스파게티 코드는 제거되어야 파일 사이즈가 작아지고 코딩이 더 쉬워진다. 결론적으로 HTML, CSS, Javascript는 각각 분리되어야 개발 및 유지 보수 측면에서 상당한 수고를 덜어 줄 수 있다. 1$ &lt;h1&gt;시멘틱 마크업이란?&lt;/h1&gt; 2005년 Andy Clark(세계적인 웹디자이너)도 데이터 구조, 스타일 정보, 그리고 스크립트 정보를 각각 분리시켜야 한다고 말한다. 1) 시멘틱 HTML은 정확하고 접근이 용이한 컨텐츠의 데이타 구조를 형성한다. 바로 HTML5가 이런 부분을 잘 지원하고 있다. 그래서 우리는 어떠한 스크립트를 추가 하지 않고도 가능한 접근이 용이하며 쓸모있게 데이터 구조를 만들어 내야한다. CSS는 스타일 정보를 제공한다. 즉, 데이터 구조에 우리가 원하는대로 시각적인 효과를 더해 주는 것이다. CSS3는 이전의 CSS2보다 더 강력한 툴이다. HTML5와 그 외 다른 것에 정의되어진 스크립팅 APIs와 베이스언어를 포함한 자바스크립트는 우리가 제작하는 사이트에 풍부한 기능과 유용성의 증대를 더해 주는 스크립팅을 제공한다. 텍스트 에디터로 HTML 파일을 열어서 마크업 한 후에 HTML 파일울 웹 브라우저로 열어 새로고침하면 결과를 확인할 수 있다. 브라우저는 어떻게 동작하는가?","categories":[{"name":"Front end","slug":"Front-end","permalink":"https://heung-bae-lee.github.io/categories/Front-end/"}],"tags":[]},{"title":"크롤링과 스크래핑 및 unix명령어 기초지식(1)","slug":"unix","date":"2018-12-23T09:34:53.000Z","updated":"2019-01-16T12:08:35.899Z","comments":true,"path":"2018/12/23/unix/","link":"","permalink":"https://heung-bae-lee.github.io/2018/12/23/unix/","excerpt":"","text":"크롤링과 스크래핑 웹페이지에의 정보를 추출하기 위한 프로그램을 웹 크롤러(Web Crawler) 또는 단순하게 크롤러(Crawler)라고 한다. 크롤러는 스파이더(Spider) 또는 봇(Bot)이라고 부르기도 하는데, 예를 들어 구글에서 우리가 검색할 경우 빠르게 검색 할 수 있는 이유 중의 하나는 바로 웹검색 엔진이 미리 전 세계의 웹사이트를 수집하고 저장함으로 가능한 일이다. 또한 RSS 리더는 사람 대신 크롤러가 RSS 피드를 확인하고, 변경 사항이 있는 경우에 업데이트된 항목이 있다고 알려주기도 한다. 가장 공감할 수 있는 부분은 바로 트위터, 페이스북 등의 SNS에서 웹 페이지 URL을 공유하면 페이지의 제목과 이미지를 미리 보기로 출력해 주는데, 이것도 크롤러가 해당 페이 지를 방문해서 관련된 정보를 추출하기 때문에 가능한 것이다. 그렇다면 크롤러와 스크래핑 두 용어의 차이점은 무엇인가??? 크롤링 웹 페이지의 하이퍼링크를 순회하면서 웹 페이지를 다운로드 하는 작업 스크래핑 다운로드한 웹 페이지에서 필요한 정보를 추출하는 작업 그렇다면 우리는 결국 크롤링한 후 스크래핑까지 하게 되는 일련의 작업을 앞으로 할 것이라고 생각한다. Wget으로 크롤링하기가장 먼저 Wget으로 크롤링하는 법을 소개 할 것이다. 크롤링과 스크래핑이 무엇인지 감을 잡기 위함이다. W","categories":[{"name":"crawling","slug":"crawling","permalink":"https://heung-bae-lee.github.io/categories/crawling/"}],"tags":[]},{"title":"hexo를 이용한 블로그 만들기","slug":"1day","date":"2018-12-21T15:00:00.000Z","updated":"2020-01-10T19:58:16.175Z","comments":true,"path":"2018/12/22/1day/","link":"","permalink":"https://heung-bae-lee.github.io/2018/12/22/1day/","excerpt":"","text":"Hexo로 나만의 블로그 만들기! Hexo는 쉽고 빠르고 강력한 블로그 프레임워크입니다. Node.js만 조금 알고 있다면 자신의 취향에 맞게 커스터마이징 할 수 있어서 좋습니다. 또한 템플릿 엔진으로는 Swig 또는 EJS 를 주로 사용합니다. 작성 시 사용할 수 있는 언어로는 HTML, Markdown, AsciiDoc 등이 있습니다. 이 글은 그 중에서 Markdown으로 작성할 예정입니다. 아래의 주소는 Hexo의 공식 홈페이지로서 기본적인 사용법을 알려주고 있습니다. Hexo 만약, 바로 사용법을 알고 싶다면 documentation을 클릭해주세요! 요점만 간략히 요약하자면 Hexo는 다음과 같은 특징이 있습니다. 커맨드라인(cmd)으로 간편하게 포스트 생성 및 관리 마크다운(Markdown) 지원 SEO, 반응형 웹을 지원하는 다양한 테마 npm 을 이용한 간편한 플러그인 적용 Github Pages, Netlify 등을 이용한 호스팅","categories":[{"name":"hexo","slug":"hexo","permalink":"https://heung-bae-lee.github.io/categories/hexo/"}],"tags":[]}]}